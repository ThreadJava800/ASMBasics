Turbo Assembler	 Version 4.1	    02/20/23 14:36:46	    Page 1
calc.asm



      1	0000			     .model tiny
      2
      3	0000			     .code
      4
      5
      6				     org 100h
      7
      8				     locals @@
      9
     10	0100			     Start:
     11	0100  BE 0000			     mov si, 00h
     12	0103  BF 0000			     mov di, 00h
     13
     14	0106  E8 00ED			     call IntInput
     15	0109  8B F7			     mov si, di
     16	010B  56			     push si
     17
     18	010C  BF 0000			     mov di, 00h
     19	010F  E8 00E4			     call IntInput
     20	0112  56			     push si
     21
     22					     ;;	DRAWING	FRAME ;;
     23
     24	0113  B8 C985			     mov ax, 0C985h
     25	0116  BA 9C84			     mov dx, 09C84h
     26
     27	0119  BB B800			     mov bx, 0b800h
     28	011C  8E C3			     mov es, bx
     29	011E  BB 07B4			     mov bx, 160d * 12d	+ 52d
     30
     31	0121  B9 001E			     mov cx, 30d
     32	0124  BF 0009			     mov di, 9d
     33
     34					     ; call DrawRect
     35
     36					     ;;	PRINTING VALUES	;;
     37
     38	0127  5E			     pop si
     39	0128  5F			     pop di
     40	0129  03 F7			     add si, di
     41
     42	012B  BB B800			     mov bx, 0b800h
     43	012E  8E C3			     mov es, bx
     44	0130  BB 09A2			     mov bx, 160d * 15d	+ 66d
     45
     46	0133  56			     push si
     47
     48	0134  8B C6			     mov ax, si
     49	0136  E8 0013			     call ToBin
     50	0139  81 C3 008C		     add bx, 160d - 20d
     51
     52	013D  5E			     pop si
     53	013E  56			     push si
     54	013F  E8 003B			     call ToHex
     55	0142  81 C3 00A0		     add bx, 160d
     56
     57	0146  5E			     pop si
Turbo Assembler	 Version 4.1	    02/20/23 14:36:46	    Page 2
calc.asm



     58	0147  E8 0089			     call ToDec
     59
     60	014A  CD 20			     int 20h
     61
     62				     include ..\liba.asm
1    63	014C			     .data
1    64	0000  0A 54 68 69 73 20	73+	     ErrorMsg: db 0Ah, 'This symbol is not allowed!$'
     65	      79 6D 62 6F 6C 20	69+
     66	      73 20 6E 6F 74 20	61+
     67	      6C 6C 6F 77 65 64	21+
     68	      24
1    69
1    70	001D			     .code
1    71
1    72				     ;-----------------------------------------------------------
1    73				     ; Print binary of value
1    74				     ;-----------------------------------------------------------
1    75				     ; Entry:	     AX	= value	to convert to
1    76				     ;		     BX	= coordinates to print on string
1    77				     ; Exit:	     None
1    78				     ; Expects:	     ES	-> videomem (b800h)
1    79				     ; Destroys:     BX, CX, DL
1    80				     ;-----------------------------------------------------------
1    81	014C			     ToBin	     proc
1    82
1    83	014C  BA 8000					     mov dx, 8000h	     ; dx = 2 ** 15
1    84	014F  EB 17 90					     jmp @@NewByte
1    85
1    86	0152			     @@Print1:
1    87	0152  26: C7 07	0531				     mov es:[bx], 0531h	     ; put 0 to	videomem
1    88	0157  83 C3 02					     add bx, 2			     ; bx += 2
1    89	015A  EB 17 90					     jmp @@Next
1    90
1    91	015D			     @@Print0:
1    92	015D  26: C7 07	0530				     mov es:[bx], 0530h	     ; put 0 to	videomem
1    93	0162  83 C3 02					     add bx, 2			     ; bx += 2
1    94	0165  EB 0C 90					     jmp @@Next
1    95
1    96	0168			     @@NewByte:
1    97	0168  8B C8					     mov cx, ax			     ; cx = ax
1    98	016A  23 CA					     and cx, dx			     ; cx && dx
1    99
1   100	016C  83 F9 00					     cmp cx, 0h			     ; if cx ==	0: print(0) else: print(1)
1   101	016F  74 EC					     je	 @@Print0
1   102	0171  EB DF					     jmp @@Print1
1   103
1   104	0173			     @@Next:
1   105	0173  83 FA 01					     cmp dx, 1h			     ; if dx ==	1: return
1   106	0176  74 04					     je	@@Exit
1   107
1   108	0178  D1 EA					     shr dx, 1			     ; dx >> 1
1   109	017A  EB EC					     jmp @@NewByte
1   110
1   111	017C  C3		     @@Exit:	     ret
1   112	017D						     endp
1   113
1   114				     ;-----------------------------------------------------------
Turbo Assembler	 Version 4.1	    02/20/23 14:36:46	    Page 3
calc.asm



1   115				     ; Print hex of value
1   116				     ;-----------------------------------------------------------
1   117				     ; Entry:	     SI	= value	to convert to
1   118				     ;		     BX	= coordinates to print in cmd
1   119				     ; Exit:	     None
1   120				     ; Expects:	     ES	-> videomem (b800h)
1   121				     ; Destroys:     AX, BX, CX, DX, DI, BP, SP
1   122				     ;----------------------------------------------------------
1   123	017D			     ToHex   proc
1   124
1   125	017D  BA 8000						     mov dx, 8000h	     ; first byte is 1 others are 0
1   126	0180  B9 0004						     mov cx, 0004h	     ; cx = 0
1   127	0183  BF 0000						     mov di, 0000h
1   128
1   129	0186			     @@ReadBytes:
1   130	0186  FE C5						     inc ch			     ; ch++ (byte counter in 4th)
1   131	0188  80 FD 05						     cmp ch, 05h		     ; if ch ==	5: exit	else:	    +
    132				     continue
1   133	018B  74 45						     je	@@Exit
1   134	018D  EB 01 90						     jmp @@Proceed4bit
1   135
1   136	0190			     @@Proceed4bit:
1   137	0190  8B C6						     mov ax, si			     ; ax = si (given value)
1   138	0192  23 C2						     and ax, dx			     ; ax && ax
1   139
1   140	0194  3D 0000						     cmp ax, 00h		     ; if ax ==	0: SkipMul()
1   141	0197  74 0E						     je	@@SkipMul
1   142
1   143	0199  B0 01						     mov al, 01h		     ; al = 1 (value to	add)
1   144	019B  B4 00						     mov ah, 00h		     ; ah = 0 (needed not to brake  +
    145				     ax)
1   146	019D  80 E9 01						     sub cl, 1			     ; cl-- (bit num)
1   147	01A0  D2 E0						     shl al, cl			     ; al = 2^cl
1   148	01A2  80 C1 01						     add cl, 1			     ; cl++
1   149	01A5  03 F8						     add di, ax			     ; di += ax	(di - result to	    +
    150				     print)
1   151
1   152	01A7			     @@SkipMul:
1   153	01A7  80 E9 01						     sub cl, 1			     ; cl--
1   154	01AA  D1 EA						     shr dx, 1			     ; dx /= 2
1   155
1   156	01AC  80 F9 00						     cmp cl, 00h
1   157	01AF  74 02						     je	@@PrintSymbol
1   158	01B1  EB DD						     jmp @@Proceed4bit	     ; if cl ==	0: Print else continue	    +
    159				     reading byte
1   160
1   161	01B3			     @@PrintSymbol:
1   162	01B3  8B C7						     mov ax, di			     ; ax = di
1   163	01B5  B4 05						     mov ah, 05h		     ; ah = 05h	(COLOR)
1   164
1   165	01B7  3C 0A						     cmp al, 10d		     ; if al >=	10: PrintAsLetter
1   166	01B9  73 05						     jae @@LetterPrint
1   167
1   168	01BB  04 30						     add al, 30h		     ; else: al	+= 30h -> print	as  +
    169				     ASCII
1   170	01BD  EB 06 90						     jmp @@ContinuePrint
1   171
Turbo Assembler	 Version 4.1	    02/20/23 14:36:46	    Page 4
calc.asm



1   172	01C0			     @@LetterPrint:
1   173	01C0  04 37						     add al, 37h		     ; al += 37	-> add letter as    +
    174				     ASCII
1   175	01C2  EB 01 90						     jmp @@ContinuePrint
1   176
1   177	01C5			     @@ContinuePrint:
1   178	01C5  26: 89 07						     mov es:[bx], ax	     ; put ax to videomem
1   179	01C8  83 C3 02						     add bx, 2			     ; bx += 2
1   180	01CB  BF 0000						     mov di, 00h		     ; di = 0
1   181	01CE  B1 04						     mov cl, 04h		     ; cl = 4 (byte count)
1   182	01D0  EB B4						     jmp @@ReadBytes
1   183
1   184	01D2			     @@Exit:
1   185	01D2  C3						     ret
1   186	01D3							     endp
1   187
1   188
1   189				     ;-----------------------------------------------------------
1   190				     ; Print dec of value
1   191				     ;-----------------------------------------------------------
1   192				     ; Entry:	     SI	= value	to convert to
1   193				     ;		     BX	= coordinates to print on string
1   194				     ; Exit:	     None
1   195				     ; Expects:	     ES	-> videomem (b800h)
1   196				     ; Destroys:     AX, BX, CX, DX, DI
1   197				     ;-----------------------------------------------------------
1   198	01D3			     ToDec	     proc
1   199
1   200	01D3  8B C6					     mov ax, si			     ; ax = si
1   201	01D5  BF 0006					     mov di, 06h		     ; amount of digits
1   202
1   203	01D8			     @@PrintSymb:
1   204	01D8  B9 000A					     mov cx, 000Ah	     ; cx = 10
1   205	01DB  F7 F1					     div cx			     ; ax = ax / 10, dx	= ax % 10
1   206
1   207	01DD  80 C2 30					     add dl, 30h		     ; dl += 30	(symb ascii)
1   208	01E0  B6 05					     mov dh, 05h		     ; dh = 5	(color)
1   209
1   210	01E2  26: 89 17					     mov es:[bx], dx
1   211	01E5  BA 0000					     mov dx, 0000h	     ; print on	screen
1   212
1   213	01E8  83 EB 02					     sub bx, 2			     ; bx -= 2
1   214	01EB  83 EF 01					     sub di, 1			     ; di --
1   215
1   216	01EE  83 FF 00					     cmp di, 0
1   217	01F1  74 02					     je	@@Exit
1   218
1   219	01F3  EB E3					     jmp @@PrintSymb
1   220
1   221	01F5  C3		     @@Exit:	     ret
1   222	01F6						     endp
1   223
1   224
1   225				     ;------------------------------------------------------------
1   226				     ; Reads dec number
1   227				     ;------------------------------------------------------------
1   228				     ; Entry:	     None
Turbo Assembler	 Version 4.1	    02/20/23 14:36:46	    Page 5
calc.asm



1   229				     ; Exit:	     DI	- dec value
1   230				     ; Expects:	     None
1   231				     ; Destroys:     AX, CX, DI, SI
1   232				     ;------------------------------------------------------------
1   233	01F6			     IntInput	     proc
1   234
1   235	01F6  BF 0000					     mov di, 0000h	     ; di = 0
1   236	01F9  B9 0005					     mov cx, 0005h	     ; cx = 5 (max amount of numbers)
1   237	01FC  EB 0B 90					     jmp @@Loop
1   238	01FF			     @@OnError:
1   239	01FF  BA 0000r					     mov dx, offset ErrorMsg
1   240	0202  B4 09					     mov ah, 09h
1   241	0204  CD 21					     int 21h			     ; print Error message
1   242
1   243	0206  EB 2E 90					     jmp @@Exit
1   244
1   245	0209  B4 01		     @@Loop:	     mov ah, 01h
1   246	020B  CD 21					     int 21h			     ; reading char -> al
1   247
1   248	020D  3C 0D					     cmp al, 0Dh
1   249	020F  74 25					     je	@@Exit
1   250
1   251	0211  3C 13					     cmp al, 13h
1   252	0213  74 21					     je	@@Exit			     ; if al ==	'\n' ||	'\r': retunr
1   253
1   254	0215  3C 30					     cmp al, 30h
1   255	0217  72 E6					     jb	@@OnError
1   256
1   257	0219  3C 40					     cmp al, 40h
1   258	021B  77 E2					     ja	@@OnError	     ; if !alnum(al): OnError()
1   259
1   260	021D  2C 30					     sub al, 30h		     ; al -= 30	(ascii -> number)
1   261	021F  B4 00					     mov ah, 00h
1   262
1   263	0221  8B F0					     mov si, ax
1   264	0223  8B C7					     mov ax, di
1   265	0225  8B FE					     mov di, si			     ; swap (ax, di)
1   266
1   267	0227  BE 000A					     mov si, 10d
1   268	022A  F7 E6					     mul si			     ; ax *= 10
1   269
1   270	022C  03 C7					     add ax, di			     ; ax += di	(last number)
1   271
1   272	022E  8B F0					     mov si, ax
1   273	0230  8B C7					     mov ax, di
1   274	0232  8B FE					     mov di, si			     ; swap (ax, di)
1   275
1   276	0234  E2 D3					     loop @@Loop
1   277
1   278	0236  C3		     @@Exit:	     ret
1   279	0237						     endp
1   280
1   281
1   282				     ;-------------------------------------------------------------
1   283				     ; Draws rectangle on screen with given borders
1   284				     ;-------------------------------------------------------------
1   285				     ; Entry:	     AX	- horizontal border
Turbo Assembler	 Version 4.1	    02/20/23 14:36:46	    Page 6
calc.asm



1   286				     ;		     DX	- vertical   border
1   287				     ;		     BX	- left highest point
1   288				     ;		     CX	- horizontal size
1   289				     ;		     DI	- vertical   size
1   290				     ; Exit:	     None
1   291				     ; Expects:	     ES	-> videomem (0b800h)
1   292				     ; Destroys:     BP, SI
1   293				     ;-------------------------------------------------------------
1   294	0237			     DrawRect		     proc
1   295
1   296	0237  55						     push bp
1   297	0238  8B EC						     mov bp, sp
1   298
1   299	023A  8B 5E 1A						     mov bx, [bp + 26d]
1   300	023D  8B 7E 18						     mov di, [bp + 24d]
1   301	0240  8B 4E 16						     mov cx, [bp + 22d]
1   302
1   303	0243  83 E9 02						     sub cx, 2
1   304	0246  8B F7						     mov si, di				     ; i = di
1   305	0248  EB 0C 90						     jmp @@MainCycle
1   306
1   307	024B  83 EE 01		     @@IterateI:	     sub si, 1				     ; i--
1   308
1   309	024E  2B D9						     sub bx, cx				     ; start vertically
1   310	0250  2B D9						     sub bx, cx
1   311	0252  81 C3 00A0					     add bx, 160d		     ; new line
1   312
1   313	0256  8B C1		     @@MainCycle:    mov ax, cx				     ; j = cx
1   314
1   315	0258  83 EB 02						     sub bx, 2				     ; bx -= 2 (then i += 2 +
    316				     to	print)
1   317
1   318	025B  83 FE 00						     cmp si, 00h
1   319	025E  75 39						     jne @@DrawV
1   320
1   321	0260  83 C3 02		     @@ContinueMain: add bx, 2				     ; bx += 2 (watch previous comment)
1   322	0263  83 FE 00						     cmp si, 00h
1   323	0266  74 79						     je	@@Exit				     ; if i == 0: exit(0)
1   324
1   325	0268  8B 56 04		     @@SecondCycle:  mov dx, [bp + 4]
1   326	026B  26: 89 17						     mov es:[bx], dx
1   327
1   328	026E  3D 0000						     cmp ax, 00h
1   329	0271  74 4A						     je	@@DrawRightV		     ; print left border (WORKS!)
1   330
1   331	0273  3B F7						     cmp si, di
1   332	0275  74 12						     je	@@DrawH				     ; draw highest border
1   333
1   334	0277  83 FE 01						     cmp si, 01h
1   335	027A  74 15						     je	@@DrawLower		     ; draw lowest border
1   336
1   337	027C			     @@ContinueSecond:
1   338	027C  3D 0000						     cmp ax, 00h
1   339	027F  74 CA						     je	@@IterateI		     ; if j == 0: i++
1   340
1   341	0281  2D 0001						     sub ax, 1				     ; else: j--
1   342	0284  83 C3 02						     add bx, 2				     ; bx += 2
Turbo Assembler	 Version 4.1	    02/20/23 14:36:46	    Page 7
calc.asm



1   343	0287  EB DF						     jmp @@SecondCycle
1   344
1   345	0289  8B 56 14		     @@DrawH:		     mov dx, [bp + 20d]
1   346	028C  26: 89 17						     mov es:[bx], dx
1   347	028F  EB EB						     jmp @@ContinueSecond
1   348
1   349	0291  8B 56 10		     @@DrawLower:    mov dx, [bp + 16d]
1   350	0294  26: 89 17						     mov es:[bx], dx
1   351	0297  EB E3						     jmp @@ContinueSecond
1   352
1   353	0299  83 FE 01		     @@DrawV:		     cmp si, 01h
1   354	029C  74 0F						     je	@@LowLeft
1   355	029E  3B F7						     cmp si, di
1   356	02A0  74 03						     je	@@HighLeft
1   357	02A2  EB 11 90						     jmp @@Left
1   358
1   359	02A5  8B 56 0C		     @@HighLeft:	     mov dx, [bp + 12d]
1   360	02A8  26: 89 17						     mov es:[bx], dx
1   361	02AB  EB B3						     jmp @@ContinueMain
1   362
1   363	02AD  8B 56 08		     @@LowLeft:		     mov dx, [bp + 8d]
1   364	02B0  26: 89 17						     mov es:[bx], dx
1   365	02B3  EB AB						     jmp @@ContinueMain
1   366
1   367	02B5  8B 56 0E		     @@Left:		     mov dx, [bp + 14d]
1   368	02B8  26: 89 17						     mov es:[bx], dx
1   369	02BB  EB A3						     jmp @@ContinueMain
1   370
1   371	02BD  83 FE 01		     @@DrawRightV:   cmp si, 01h
1   372	02C0  74 07						     je	@@LowRight
1   373	02C2  3B F7						     cmp si, di
1   374	02C4  74 0B						     je	@@HighRight
1   375	02C6  EB 11 90						     jmp @@Right
1   376
1   377	02C9  8B 56 06		     @@LowRight:	     mov dx, [bp + 6d]
1   378	02CC  26: 89 17						     mov es:[bx], dx
1   379	02CF  EB AB						     jmp @@ContinueSecond
1   380
1   381	02D1  8B 56 0A		     @@HighRight:    mov dx, [bp + 10d]
1   382	02D4  26: 89 17						     mov es:[bx], dx
1   383	02D7  EB A3						     jmp @@ContinueSecond
1   384
1   385	02D9  8B 56 12		     @@Right:		     mov dx, [bp + 18d]
1   386	02DC  26: 89 17						     mov es:[bx], dx
1   387	02DF  EB 9B						     jmp @@ContinueSecond
1   388
1   389	02E1  5D		     @@Exit:		     pop bp
1   390
1   391	02E2  C3						     ret
1   392	02E3							     endp
1   393
1   394
1   395				     ;-----------------------------------------------------------
1   396				     ; Put symbol with given ascii to videomem
1   397				     ;-----------------------------------------------------------
1   398				     ; Entry:	     BX	= coordinates where to print symbol
1   399				     ;		     CX	= symbol itself
Turbo Assembler	 Version 4.1	    02/20/23 14:36:46	    Page 8
calc.asm



1   400				     ; Exit:	     None
1   401				     ; Expects:	     ES	-> videomem (b800h)
1   402				     ; Destroys:     None
1   403				     ;-----------------------------------------------------------
1   404	02E3			     PutChar proc
1   405
1   406	02E3  26: 89 0F			     mov es:[bx], cx	     ; put symbol to videomem
1   407
1   408	02E6  C3			     ret
1   409	02E7				     endp
1   410
    411
    412				     end     Start
Turbo Assembler	 Version 4.1	    02/20/23 14:36:46	    Page 9
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "02/20/23"
??FILENAME			  Text	 "calc	  "
??TIME				  Text	 "14:36:46"
??VERSION			  Number 040A
@32BIT				  Text	 0
@@CONTINUEMAIN			  Near	 DGROUP:0260
@@CONTINUEPRINT			  Near	 DGROUP:01C5
@@CONTINUESECOND		  Near	 DGROUP:027C
@@DRAWH				  Near	 DGROUP:0289
@@DRAWLOWER			  Near	 DGROUP:0291
@@DRAWRIGHTV			  Near	 DGROUP:02BD
@@DRAWV				  Near	 DGROUP:0299
@@EXIT				  Near	 DGROUP:017C
@@EXIT				  Near	 DGROUP:01D2
@@EXIT				  Near	 DGROUP:01F5
@@EXIT				  Near	 DGROUP:0236
@@EXIT				  Near	 DGROUP:02E1
@@HIGHLEFT			  Near	 DGROUP:02A5
@@HIGHRIGHT			  Near	 DGROUP:02D1
@@ITERATEI			  Near	 DGROUP:024B
@@LEFT				  Near	 DGROUP:02B5
@@LETTERPRINT			  Near	 DGROUP:01C0
@@LOOP				  Near	 DGROUP:0209
@@LOWLEFT			  Near	 DGROUP:02AD
@@LOWRIGHT			  Near	 DGROUP:02C9
@@MAINCYCLE			  Near	 DGROUP:0256
@@NEWBYTE			  Near	 DGROUP:0168
@@NEXT				  Near	 DGROUP:0173
@@ONERROR			  Near	 DGROUP:01FF
@@PRINT0			  Near	 DGROUP:015D
@@PRINT1			  Near	 DGROUP:0152
@@PRINTSYMB			  Near	 DGROUP:01D8
@@PRINTSYMBOL			  Near	 DGROUP:01B3
@@PROCEED4BIT			  Near	 DGROUP:0190
@@READBYTES			  Near	 DGROUP:0186
@@RIGHT				  Near	 DGROUP:02D9
@@SECONDCYCLE			  Near	 DGROUP:0268
@@SKIPMUL			  Near	 DGROUP:01A7
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0101H
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 CALC
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
DRAWRECT			  Near	 DGROUP:0237
ERRORMSG			  Near	 DGROUP:0000
INTINPUT			  Near	 DGROUP:01F6
PUTCHAR				  Near	 DGROUP:02E3
START				  Near	 DGROUP:0100
Turbo Assembler	 Version 4.1	    02/20/23 14:36:46	    Page 10
Symbol Table



TOBIN				  Near	 DGROUP:014C
TODEC				  Near	 DGROUP:01D3
TOHEX				  Near	 DGROUP:017D

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  001D Word	  Public  DATA
  _TEXT				  16  02E7 Word	  Public  CODE
