Turbo Assembler	 Version 4.1	    02/20/23 14:29:55	    Page 1
strfun.asm



      1	0000			     .model tiny
      2
      3	0000			     .data
      4	0000  4C 4F 4F 4C 5F 20	24	     hello:  db	'LOOL_ $'
      5	0007  4C 4F 4F 4C 5F 24		     test2:  db	'LOOL_$'
      6
      7	000D			     .code
      8
      9				     org 100h
     10
     11				     locals @@
     12
     13	0100			     Start:
     14	0100  8C C8			     mov ax, cs
     15	0102  8E D8			     mov ds, ax
     16	0104  8E C0			     mov es, ax
     17
     18	0106  BF 0000r			     lea di, hello
     19	0109  BE 0007r			     lea si, test2
     20	010C  E8 01D9			     call Strcmp
     21
     22					     ;mov dx, offset hello
     23					     ;mov ah, 09h
     24					     ;int 21h
     25
     26	010F  C3			     ret
     27
     28				     include ..\liba.asm
1    29	0110			     .data
1    30	000D  0A 54 68 69 73 20	73+	     ErrorMsg: db 0Ah, 'This symbol is not allowed!$'
     31	      79 6D 62 6F 6C 20	69+
     32	      73 20 6E 6F 74 20	61+
     33	      6C 6C 6F 77 65 64	21+
     34	      24
1    35
1    36	002A			     .code
1    37
1    38				     ;-----------------------------------------------------------
1    39				     ; Print binary of value
1    40				     ;-----------------------------------------------------------
1    41				     ; Entry:	     AX	= value	to convert to
1    42				     ;		     BX	= coordinates to print on string
1    43				     ; Exit:	     None
1    44				     ; Expects:	     ES	-> videomem (b800h)
1    45				     ; Destroys:     BX, CX, DL
1    46				     ;-----------------------------------------------------------
1    47	0110			     ToBin	     proc
1    48
1    49	0110  BA 8000					     mov dx, 8000h	     ; dx = 2 ** 15
1    50	0113  EB 17 90					     jmp @@NewByte
1    51
1    52	0116			     @@Print1:
1    53	0116  26: C7 07	0531				     mov es:[bx], 0531h	     ; put 0 to	videomem
1    54	011B  83 C3 02					     add bx, 2			     ; bx += 2
1    55	011E  EB 17 90					     jmp @@Next
1    56
1    57	0121			     @@Print0:
Turbo Assembler	 Version 4.1	    02/20/23 14:29:55	    Page 2
strfun.asm



1    58	0121  26: C7 07	0530				     mov es:[bx], 0530h	     ; put 0 to	videomem
1    59	0126  83 C3 02					     add bx, 2			     ; bx += 2
1    60	0129  EB 0C 90					     jmp @@Next
1    61
1    62	012C			     @@NewByte:
1    63	012C  8B C8					     mov cx, ax			     ; cx = ax
1    64	012E  23 CA					     and cx, dx			     ; cx && dx
1    65
1    66	0130  83 F9 00					     cmp cx, 0h			     ; if cx ==	0: print(0) else: print(1)
1    67	0133  74 EC					     je	 @@Print0
1    68	0135  EB DF					     jmp @@Print1
1    69
1    70	0137			     @@Next:
1    71	0137  83 FA 01					     cmp dx, 1h			     ; if dx ==	1: return
1    72	013A  74 04					     je	@@Exit
1    73
1    74	013C  D1 EA					     shr dx, 1			     ; dx >> 1
1    75	013E  EB EC					     jmp @@NewByte
1    76
1    77	0140  C3		     @@Exit:	     ret
1    78	0141						     endp
1    79
1    80				     ;-----------------------------------------------------------
1    81				     ; Print hex of value
1    82				     ;-----------------------------------------------------------
1    83				     ; Entry:	     SI	= value	to convert to
1    84				     ;		     BX	= coordinates to print in cmd
1    85				     ; Exit:	     None
1    86				     ; Expects:	     ES	-> videomem (b800h)
1    87				     ; Destroys:     AX, BX, CX, DX, DI, BP, SP
1    88				     ;----------------------------------------------------------
1    89	0141			     ToHex   proc
1    90
1    91	0141  BA 8000						     mov dx, 8000h	     ; first byte is 1 others are 0
1    92	0144  B9 0004						     mov cx, 0004h	     ; cx = 0
1    93	0147  BF 0000						     mov di, 0000h
1    94
1    95	014A			     @@ReadBytes:
1    96	014A  FE C5						     inc ch			     ; ch++ (byte counter in 4th)
1    97	014C  80 FD 05						     cmp ch, 05h		     ; if ch ==	5: exit	else:	    +
     98				     continue
1    99	014F  74 45						     je	@@Exit
1   100	0151  EB 01 90						     jmp @@Proceed4bit
1   101
1   102	0154			     @@Proceed4bit:
1   103	0154  8B C6						     mov ax, si			     ; ax = si (given value)
1   104	0156  23 C2						     and ax, dx			     ; ax && ax
1   105
1   106	0158  3D 0000						     cmp ax, 00h		     ; if ax ==	0: SkipMul()
1   107	015B  74 0E						     je	@@SkipMul
1   108
1   109	015D  B0 01						     mov al, 01h		     ; al = 1 (value to	add)
1   110	015F  B4 00						     mov ah, 00h		     ; ah = 0 (needed not to brake  +
    111				     ax)
1   112	0161  80 E9 01						     sub cl, 1			     ; cl-- (bit num)
1   113	0164  D2 E0						     shl al, cl			     ; al = 2^cl
1   114	0166  80 C1 01						     add cl, 1			     ; cl++
Turbo Assembler	 Version 4.1	    02/20/23 14:29:55	    Page 3
strfun.asm



1   115	0169  03 F8						     add di, ax			     ; di += ax	(di - result to	    +
    116				     print)
1   117
1   118	016B			     @@SkipMul:
1   119	016B  80 E9 01						     sub cl, 1			     ; cl--
1   120	016E  D1 EA						     shr dx, 1			     ; dx /= 2
1   121
1   122	0170  80 F9 00						     cmp cl, 00h
1   123	0173  74 02						     je	@@PrintSymbol
1   124	0175  EB DD						     jmp @@Proceed4bit	     ; if cl ==	0: Print else continue	    +
    125				     reading byte
1   126
1   127	0177			     @@PrintSymbol:
1   128	0177  8B C7						     mov ax, di			     ; ax = di
1   129	0179  B4 05						     mov ah, 05h		     ; ah = 05h	(COLOR)
1   130
1   131	017B  3C 0A						     cmp al, 10d		     ; if al >=	10: PrintAsLetter
1   132	017D  73 05						     jae @@LetterPrint
1   133
1   134	017F  04 30						     add al, 30h		     ; else: al	+= 30h -> print	as  +
    135				     ASCII
1   136	0181  EB 06 90						     jmp @@ContinuePrint
1   137
1   138	0184			     @@LetterPrint:
1   139	0184  04 37						     add al, 37h		     ; al += 37	-> add letter as    +
    140				     ASCII
1   141	0186  EB 01 90						     jmp @@ContinuePrint
1   142
1   143	0189			     @@ContinuePrint:
1   144	0189  26: 89 07						     mov es:[bx], ax	     ; put ax to videomem
1   145	018C  83 C3 02						     add bx, 2			     ; bx += 2
1   146	018F  BF 0000						     mov di, 00h		     ; di = 0
1   147	0192  B1 04						     mov cl, 04h		     ; cl = 4 (byte count)
1   148	0194  EB B4						     jmp @@ReadBytes
1   149
1   150	0196			     @@Exit:
1   151	0196  C3						     ret
1   152	0197							     endp
1   153
1   154
1   155				     ;-----------------------------------------------------------
1   156				     ; Print dec of value
1   157				     ;-----------------------------------------------------------
1   158				     ; Entry:	     SI	= value	to convert to
1   159				     ;		     BX	= coordinates to print on string
1   160				     ; Exit:	     None
1   161				     ; Expects:	     ES	-> videomem (b800h)
1   162				     ; Destroys:     AX, BX, CX, DX, DI
1   163				     ;-----------------------------------------------------------
1   164	0197			     ToDec	     proc
1   165
1   166	0197  8B C6					     mov ax, si			     ; ax = si
1   167	0199  BF 0006					     mov di, 06h		     ; amount of digits
1   168
1   169	019C			     @@PrintSymb:
1   170	019C  B9 000A					     mov cx, 000Ah	     ; cx = 10
1   171	019F  F7 F1					     div cx			     ; ax = ax / 10, dx	= ax % 10
Turbo Assembler	 Version 4.1	    02/20/23 14:29:55	    Page 4
strfun.asm



1   172
1   173	01A1  80 C2 30					     add dl, 30h		     ; dl += 30	(symb ascii)
1   174	01A4  B6 05					     mov dh, 05h		     ; dh = 5	(color)
1   175
1   176	01A6  26: 89 17					     mov es:[bx], dx
1   177	01A9  BA 0000					     mov dx, 0000h	     ; print on	screen
1   178
1   179	01AC  83 EB 02					     sub bx, 2			     ; bx -= 2
1   180	01AF  83 EF 01					     sub di, 1			     ; di --
1   181
1   182	01B2  83 FF 00					     cmp di, 0
1   183	01B5  74 02					     je	@@Exit
1   184
1   185	01B7  EB E3					     jmp @@PrintSymb
1   186
1   187	01B9  C3		     @@Exit:	     ret
1   188	01BA						     endp
1   189
1   190
1   191				     ;------------------------------------------------------------
1   192				     ; Reads dec number
1   193				     ;------------------------------------------------------------
1   194				     ; Entry:	     None
1   195				     ; Exit:	     DI	- dec value
1   196				     ; Expects:	     None
1   197				     ; Destroys:     AX, CX, DI, SI
1   198				     ;------------------------------------------------------------
1   199	01BA			     IntInput	     proc
1   200
1   201	01BA  BF 0000					     mov di, 0000h	     ; di = 0
1   202	01BD  B9 0005					     mov cx, 0005h	     ; cx = 5 (max amount of numbers)
1   203	01C0  EB 0B 90					     jmp @@Loop
1   204	01C3			     @@OnError:
1   205	01C3  BA 000Dr					     mov dx, offset ErrorMsg
1   206	01C6  B4 09					     mov ah, 09h
1   207	01C8  CD 21					     int 21h			     ; print Error message
1   208
1   209	01CA  EB 2E 90					     jmp @@Exit
1   210
1   211	01CD  B4 01		     @@Loop:	     mov ah, 01h
1   212	01CF  CD 21					     int 21h			     ; reading char -> al
1   213
1   214	01D1  3C 0D					     cmp al, 0Dh
1   215	01D3  74 25					     je	@@Exit
1   216
1   217	01D5  3C 13					     cmp al, 13h
1   218	01D7  74 21					     je	@@Exit			     ; if al ==	'\n' ||	'\r': retunr
1   219
1   220	01D9  3C 30					     cmp al, 30h
1   221	01DB  72 E6					     jb	@@OnError
1   222
1   223	01DD  3C 40					     cmp al, 40h
1   224	01DF  77 E2					     ja	@@OnError	     ; if !alnum(al): OnError()
1   225
1   226	01E1  2C 30					     sub al, 30h		     ; al -= 30	(ascii -> number)
1   227	01E3  B4 00					     mov ah, 00h
1   228
Turbo Assembler	 Version 4.1	    02/20/23 14:29:55	    Page 5
strfun.asm



1   229	01E5  8B F0					     mov si, ax
1   230	01E7  8B C7					     mov ax, di
1   231	01E9  8B FE					     mov di, si			     ; swap (ax, di)
1   232
1   233	01EB  BE 000A					     mov si, 10d
1   234	01EE  F7 E6					     mul si			     ; ax *= 10
1   235
1   236	01F0  03 C7					     add ax, di			     ; ax += di	(last number)
1   237
1   238	01F2  8B F0					     mov si, ax
1   239	01F4  8B C7					     mov ax, di
1   240	01F6  8B FE					     mov di, si			     ; swap (ax, di)
1   241
1   242	01F8  E2 D3					     loop @@Loop
1   243
1   244	01FA  C3		     @@Exit:	     ret
1   245	01FB						     endp
1   246
1   247
1   248				     ;-------------------------------------------------------------
1   249				     ; Draws rectangle on screen with given borders
1   250				     ;-------------------------------------------------------------
1   251				     ; Entry:	     AX	- horizontal border
1   252				     ;		     DX	- vertical   border
1   253				     ;		     BX	- left highest point
1   254				     ;		     CX	- horizontal size
1   255				     ;		     DI	- vertical   size
1   256				     ; Exit:	     None
1   257				     ; Expects:	     ES	-> videomem (0b800h)
1   258				     ; Destroys:     BP, SI
1   259				     ;-------------------------------------------------------------
1   260	01FB			     DrawRect		     proc
1   261
1   262	01FB  55						     push bp
1   263	01FC  8B EC						     mov bp, sp
1   264
1   265	01FE  8B 5E 1A						     mov bx, [bp + 26d]
1   266	0201  8B 7E 18						     mov di, [bp + 24d]
1   267	0204  8B 4E 16						     mov cx, [bp + 22d]
1   268
1   269	0207  83 E9 02						     sub cx, 2
1   270	020A  8B F7						     mov si, di				     ; i = di
1   271	020C  EB 0C 90						     jmp @@MainCycle
1   272
1   273	020F  83 EE 01		     @@IterateI:	     sub si, 1				     ; i--
1   274
1   275	0212  2B D9						     sub bx, cx				     ; start vertically
1   276	0214  2B D9						     sub bx, cx
1   277	0216  81 C3 00A0					     add bx, 160d		     ; new line
1   278
1   279	021A  8B C1		     @@MainCycle:    mov ax, cx				     ; j = cx
1   280
1   281	021C  83 EB 02						     sub bx, 2				     ; bx -= 2 (then i += 2 +
    282				     to	print)
1   283
1   284	021F  83 FE 00						     cmp si, 00h
1   285	0222  75 39						     jne @@DrawV
Turbo Assembler	 Version 4.1	    02/20/23 14:29:55	    Page 6
strfun.asm



1   286
1   287	0224  83 C3 02		     @@ContinueMain: add bx, 2				     ; bx += 2 (watch previous comment)
1   288	0227  83 FE 00						     cmp si, 00h
1   289	022A  74 79						     je	@@Exit				     ; if i == 0: exit(0)
1   290
1   291	022C  8B 56 04		     @@SecondCycle:  mov dx, [bp + 4]
1   292	022F  26: 89 17						     mov es:[bx], dx
1   293
1   294	0232  3D 0000						     cmp ax, 00h
1   295	0235  74 4A						     je	@@DrawRightV		     ; print left border (WORKS!)
1   296
1   297	0237  3B F7						     cmp si, di
1   298	0239  74 12						     je	@@DrawH				     ; draw highest border
1   299
1   300	023B  83 FE 01						     cmp si, 01h
1   301	023E  74 15						     je	@@DrawLower		     ; draw lowest border
1   302
1   303	0240			     @@ContinueSecond:
1   304	0240  3D 0000						     cmp ax, 00h
1   305	0243  74 CA						     je	@@IterateI		     ; if j == 0: i++
1   306
1   307	0245  2D 0001						     sub ax, 1				     ; else: j--
1   308	0248  83 C3 02						     add bx, 2				     ; bx += 2
1   309	024B  EB DF						     jmp @@SecondCycle
1   310
1   311	024D  8B 56 14		     @@DrawH:		     mov dx, [bp + 20d]
1   312	0250  26: 89 17						     mov es:[bx], dx
1   313	0253  EB EB						     jmp @@ContinueSecond
1   314
1   315	0255  8B 56 10		     @@DrawLower:    mov dx, [bp + 16d]
1   316	0258  26: 89 17						     mov es:[bx], dx
1   317	025B  EB E3						     jmp @@ContinueSecond
1   318
1   319	025D  83 FE 01		     @@DrawV:		     cmp si, 01h
1   320	0260  74 0F						     je	@@LowLeft
1   321	0262  3B F7						     cmp si, di
1   322	0264  74 03						     je	@@HighLeft
1   323	0266  EB 11 90						     jmp @@Left
1   324
1   325	0269  8B 56 0C		     @@HighLeft:	     mov dx, [bp + 12d]
1   326	026C  26: 89 17						     mov es:[bx], dx
1   327	026F  EB B3						     jmp @@ContinueMain
1   328
1   329	0271  8B 56 08		     @@LowLeft:		     mov dx, [bp + 8d]
1   330	0274  26: 89 17						     mov es:[bx], dx
1   331	0277  EB AB						     jmp @@ContinueMain
1   332
1   333	0279  8B 56 0E		     @@Left:		     mov dx, [bp + 14d]
1   334	027C  26: 89 17						     mov es:[bx], dx
1   335	027F  EB A3						     jmp @@ContinueMain
1   336
1   337	0281  83 FE 01		     @@DrawRightV:   cmp si, 01h
1   338	0284  74 07						     je	@@LowRight
1   339	0286  3B F7						     cmp si, di
1   340	0288  74 0B						     je	@@HighRight
1   341	028A  EB 11 90						     jmp @@Right
1   342
Turbo Assembler	 Version 4.1	    02/20/23 14:29:55	    Page 7
strfun.asm



1   343	028D  8B 56 06		     @@LowRight:	     mov dx, [bp + 6d]
1   344	0290  26: 89 17						     mov es:[bx], dx
1   345	0293  EB AB						     jmp @@ContinueSecond
1   346
1   347	0295  8B 56 0A		     @@HighRight:    mov dx, [bp + 10d]
1   348	0298  26: 89 17						     mov es:[bx], dx
1   349	029B  EB A3						     jmp @@ContinueSecond
1   350
1   351	029D  8B 56 12		     @@Right:		     mov dx, [bp + 18d]
1   352	02A0  26: 89 17						     mov es:[bx], dx
1   353	02A3  EB 9B						     jmp @@ContinueSecond
1   354
1   355	02A5  5D		     @@Exit:		     pop bp
1   356
1   357	02A6  C3						     ret
1   358	02A7							     endp
1   359
1   360
1   361				     ;-----------------------------------------------------------
1   362				     ; Put symbol with given ascii to videomem
1   363				     ;-----------------------------------------------------------
1   364				     ; Entry:	     BX	= coordinates where to print symbol
1   365				     ;		     CX	= symbol itself
1   366				     ; Exit:	     None
1   367				     ; Expects:	     ES	-> videomem (b800h)
1   368				     ; Destroys:     None
1   369				     ;-----------------------------------------------------------
1   370	02A7			     PutChar proc
1   371
1   372	02A7  26: 89 0F			     mov es:[bx], cx	     ; put symbol to videomem
1   373
1   374	02AA  C3			     ret
1   375	02AB				     endp
1   376
    377
    378				     ;------------------------------------------------------------
    379				     ; Gets length of string (string must end with '\0'	(0 ascii)
    380				     ;------------------------------------------------------------
    381				     ; Entry:	     DS:SI - pointer to	string
    382				     ; Expects:	     None
    383				     ; Exit:	     CX	- amount of symbols in string
    384				     ; Destroys:     CX, SI
    385				     ;------------------------------------------------------------
    386	02AB			     Strlen	     proc
    387	02AB  B9 0000					     mov cx, 00h
    388
    389	02AE  FC		     @@Repeat:	     cld
    390	02AF  AC					     lodsb		     ; DS:SI++ -> AL
    391
    392	02B0  3C 00					     cmp al, 00h	     ; ('\0')
    393	02B2  74 07					     je	 @@Exit
    394
    395	02B4  3C 24					     cmp al, 24h	     ; ('$')
    396	02B6  74 03					     je	@@Exit
    397
    398	02B8  41					     inc cx		     ; count++
    399	02B9  EB F3					     jmp @@Repeat    ; if al ==	0 || '$': exit() else: loop
Turbo Assembler	 Version 4.1	    02/20/23 14:29:55	    Page 8
strfun.asm



    400
    401	02BB  C3		     @@Exit:	     ret
    402	02BC						     endp
    403
    404				     ;------------------------------------------------------------
    405				     ; Copies bytes from one side of memory to another one
    406				     ;------------------------------------------------------------
    407				     ; Entry:	     ES:DI - destination pointer
    408				     ;		     DS:SI - from where	pointer
    409				     ;		     CX	   - amount of bytes to	copy
    410				     ; Expects:	     None
    411				     ; Exit:	     None
    412				     ; Destroys:     CX, DI, SI
    413				     ;------------------------------------------------------------
    414	02BC			     Memcpy	     proc
    415
    416	02BC  FC					     cld
    417	02BD  F3> A4					     rep movsb	     ; while (cx--) DS:SI -> ES:DI
    418
    419	02BF  C3					     ret
    420	02C0						     endp
    421
    422				     ;------------------------------------------------------------
    423				     ; Copies strings
    424				     ;------------------------------------------------------------
    425				     ; Entry:	     ES:DI - destination pointer
    426				     ;		     DS:SI - string to copy
    427				     ; Expects:	     None
    428				     ; Exit:	     None
    429				     ; Destroys:     AL, CX, DI, SI
    430				     ;------------------------------------------------------------
    431	02C0			     Strcpy	     proc
    432
    433	02C0  FC					     cld
    434
    435	02C1  56					     push si
    436	02C2  57					     push di
    437
    438	02C3  E8 FFE5					     call Strlen	     ; strlen(ds:si) ->	cx
    439
    440	02C6  5F					     pop di
    441	02C7  5E					     pop si
    442
    443	02C8  E8 FFF1					     call Memcpy
    444
    445	02CB  B0 24					     mov al, '$'
    446	02CD  AA					     stosb		     ; destStr[-1] = '$'
    447
    448	02CE  C3					     ret
    449	02CF						     endp
    450
    451
    452				     ;-------------------------------------------------------------
    453				     ; Fills first n bytes with	given symbol
    454				     ;-------------------------------------------------------------
    455				     ; Entry:	     ES:DI - pointer to	write bytes
    456				     ;		     AL	   - byte
Turbo Assembler	 Version 4.1	    02/20/23 14:29:55	    Page 9
strfun.asm



    457				     ;		     CX	   - count
    458				     ; Exit:	     None
    459				     ; Expects:	     None
    460				     ; Destroys:     CX, DI
    461				     ;-------------------------------------------------------------
    462	02CF			     Memset	     proc
    463
    464	02CF  FC					     cld
    465	02D0  F3> AA					     rep stosb
    466
    467	02D2  C3					     ret
    468	02D3						     endp
    469
    470				     ;--------------------------------------------------------------
    471				     ; Compares	first n	bytes in buffers
    472				     ;--------------------------------------------------------------
    473				     ; Entry:	     ES:DI - buf1
    474				     ;		     DS:SI - buf2
    475				     ;		     CX	   - byte count
    476				     ; Exit:	     DX	   - 0 if eq, <	0 if buf1 < buf2 && > 0	if buf1	> buf2
    477				     ; Expects:	     None
    478				     ; Destroys:     CX, DX, DI, SI
    479				     ;-------------------------------------------------------------
    480	02D3			     Memcmp	     proc
    481	02D3  FC					     cld
    482
    483	02D4  BA 0000					     mov dx, 00h
    484
    485	02D7  83 F9 00		     @@Loop:	     cmp cx, 00h
    486	02DA  74 0B					     je	@@Exit
    487	02DC  49					     dec cx
    488
    489	02DD  A6					     cmpsb		     ; rep cmpsb doesn't work???
    490	02DE  74 F7					     je	@@Loop		     ; if ZF ==	1: repeat
    491
    492	02E0  4F					     dec di		     ; else return di -	si
    493	02E1  4E					     dec si
    494
    495	02E2  26: 8B 15					     mov dx, es:[di]
    496	02E5  2B 14					     sub dx, ds:[si]
    497
    498	02E7  C3		     @@Exit:	     ret
    499	02E8						     endp
    500
    501
    502				     ;-----------------------------------------------------------------------
    503				     ; Compares	to string
    504				     ;-----------------------------------------------------------------------
    505				     ; Entry:	     ES:DI - buf1
    506				     ;		     DS:SI - buf2
    507				     ; Exit:	     DX	   - 0 if equ, < 0 if buf1 < buf2 && > 0 if buf1 > buf2
    508				     ; Expects:	     None
    509				     ; Destroys:     AX, DX, DI, SI
    510				     ;-----------------------------------------------------------------------
    511	02E8			     Strcmp		     proc
    512
    513	02E8  FC						     cld
Turbo Assembler	 Version 4.1	    02/20/23 14:29:55	    Page 10
strfun.asm



    514	02E9  BA 0000						     mov dx, 00h
    515
    516	02EC  26: 8A 05		     @@Loop:		     mov al, es:[di]
    517	02EF  8A 24						     mov ah, ds:[si]
    518
    519	02F1  80 FC 24						     cmp ah, '$'
    520	02F4  74 11						     je	@@CheckLenSI
    521
    522	02F6  3C 24						     cmp al, '$'
    523	02F8  74 17						     je	@@CheckLenDI	     ; if al ==	'$': cmp lens
    524
    525	02FA  A6						     cmpsb
    526	02FB  74 EF						     je	@@Loop			     ; if zf ==	1: repeat
    527
    528	02FD  4F						     dec di
    529	02FE  4E						     dec si
    530	02FF  26: 8B 15						     mov dx, es:[di]
    531	0302  2B 14						     sub dx, ds:[si]
    532	0304  EB 0E 90						     jmp @@Exit			     ; else return *di - *si
    533
    534	0307  3C 24		     @@CheckLenSI:   cmp al, '$'
    535	0309  74 09						     je	@@Exit			     ; if al ==	'$' return 0
    536
    537	030B  BA 0001						     mov dx, 01h		     ; dx = 1
    538	030E  EB 04 90						     jmp @@Exit
    539
    540	0311			     @@CheckLenDI:					     ; di ended	faster
    541	0311  BA FFFE						     mov dx, 0fffeh	     ; dx = -1
    542
    543	0314  C3		     @@Exit:		     ret
    544	0315							     endp
    545
    546				     end	     Start
Turbo Assembler	 Version 4.1	    02/20/23 14:29:55	    Page 11
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "02/20/23"
??FILENAME			  Text	 "strfun  "
??TIME				  Text	 "14:29:55"
??VERSION			  Number 040A
@32BIT				  Text	 0
@@CHECKLENDI			  Near	 DGROUP:0311
@@CHECKLENSI			  Near	 DGROUP:0307
@@CONTINUEMAIN			  Near	 DGROUP:0224
@@CONTINUEPRINT			  Near	 DGROUP:0189
@@CONTINUESECOND		  Near	 DGROUP:0240
@@DRAWH				  Near	 DGROUP:024D
@@DRAWLOWER			  Near	 DGROUP:0255
@@DRAWRIGHTV			  Near	 DGROUP:0281
@@DRAWV				  Near	 DGROUP:025D
@@EXIT				  Near	 DGROUP:0140
@@EXIT				  Near	 DGROUP:0196
@@EXIT				  Near	 DGROUP:01B9
@@EXIT				  Near	 DGROUP:01FA
@@EXIT				  Near	 DGROUP:02A5
@@EXIT				  Near	 DGROUP:02BB
@@EXIT				  Near	 DGROUP:02E7
@@EXIT				  Near	 DGROUP:0314
@@HIGHLEFT			  Near	 DGROUP:0269
@@HIGHRIGHT			  Near	 DGROUP:0295
@@ITERATEI			  Near	 DGROUP:020F
@@LEFT				  Near	 DGROUP:0279
@@LETTERPRINT			  Near	 DGROUP:0184
@@LOOP				  Near	 DGROUP:01CD
@@LOOP				  Near	 DGROUP:02D7
@@LOOP				  Near	 DGROUP:02EC
@@LOWLEFT			  Near	 DGROUP:0271
@@LOWRIGHT			  Near	 DGROUP:028D
@@MAINCYCLE			  Near	 DGROUP:021A
@@NEWBYTE			  Near	 DGROUP:012C
@@NEXT				  Near	 DGROUP:0137
@@ONERROR			  Near	 DGROUP:01C3
@@PRINT0			  Near	 DGROUP:0121
@@PRINT1			  Near	 DGROUP:0116
@@PRINTSYMB			  Near	 DGROUP:019C
@@PRINTSYMBOL			  Near	 DGROUP:0177
@@PROCEED4BIT			  Near	 DGROUP:0154
@@READBYTES			  Near	 DGROUP:014A
@@REPEAT			  Near	 DGROUP:02AE
@@RIGHT				  Near	 DGROUP:029D
@@SECONDCYCLE			  Near	 DGROUP:022C
@@SKIPMUL			  Near	 DGROUP:016B
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0101H
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 STRFUN
@INTERFACE			  Text	 000H
Turbo Assembler	 Version 4.1	    02/20/23 14:29:55	    Page 12
Symbol Table



@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
DRAWRECT			  Near	 DGROUP:01FB
ERRORMSG			  Near	 DGROUP:000D
HELLO				  Near	 DGROUP:0000
INTINPUT			  Near	 DGROUP:01BA
MEMCMP				  Near	 DGROUP:02D3
MEMCPY				  Near	 DGROUP:02BC
MEMSET				  Near	 DGROUP:02CF
PUTCHAR				  Near	 DGROUP:02A7
START				  Near	 DGROUP:0100
STRCMP				  Near	 DGROUP:02E8
STRCPY				  Near	 DGROUP:02C0
STRLEN				  Near	 DGROUP:02AB
TEST2				  Near	 DGROUP:0007
TOBIN				  Near	 DGROUP:0110
TODEC				  Near	 DGROUP:0197
TOHEX				  Near	 DGROUP:0141

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  002A Word	  Public  DATA
  _TEXT				  16  0315 Word	  Public  CODE
