Turbo Assembler	 Version 4.1	    02/24/23 18:04:02	    Page 1
ramka.asm



      1	0000			     .model tiny
      2
      3	0000			     .data
      4
      5	0000  09*(0000)			     arguments:	     dw	9 dup(0)
      6
      7	0012			     .code
      8
      9				     org 100h
     10
     11				     locals @@
     12
     13
     14	0100			     Start:
     15	0100  BB 0082						     mov bx, 0082h
     16	0103  E8 00A2						     call ReadNumber		     ; ax -> line
     17
     18	0106  BE 00A0						     mov si, 160d
     19	0109  F7 E6						     mul si				     ; ax *= 10
     20	010B  8B F8						     mov di, ax				     ; si = ax
     21
     22	010D  E8 0098						     call ReadNumber
     23	0110  03 C0						     add ax, ax
     24	0112  03 F8						     add di, ax
     25	0114  57						     push di				     ; coordinates ready
     26
     27	0115  E8 0090						     call ReadNumber
     28	0118  50						     push ax				     ; height
     29
     30	0119  E8 008C						     call ReadNumber
     31	011C  50						     push ax				     ; length
     32
     33	011D  E8 0088						     call ReadNumber		     ; type
     34
     35	0120  3D 0001						     cmp ax, 01h
     36	0123  74 0F						     je	@@Parse1
     37	0125  3D 0002						     cmp ax, 02h
     38	0128  74 2B						     je	@@Parse2
     39	012A  3D 0003						     cmp ax, 03h
     40	012D  74 41						     je	@@Parse3
     41	012F  3D 0004						     cmp ax, 04h
     42	0132  74 58						     je	@@Parse4
     43
     44				     ; MODE = 1	;
     45	0134			     @@Parse1:
     46	0134  B9 0008						     mov cx, 08h			     ; counter for loop
     47	0137  BF 0000r						     lea di, arguments
     48
     49								     ; READING ASCII ;
     50	013A  8A 07						     mov byte ptr al, [bx]   ; al = ascii code
     51	013C  FE C3						     inc bl
     52	013E  FE C3						     inc bl				     ; bl += 2
     53
     54	0140  B4 05						     mov ah, 05h
     55	0142  89 05						     mov [di], ax
     56	0144  47						     inc di
     57	0145  47						     inc di
Turbo Assembler	 Version 4.1	    02/24/23 18:04:02	    Page 2
ramka.asm



     58
     59	0146  89 05		     @@Loop1:		     mov [di], ax
     60	0148  47						     inc di
     61	0149  47						     inc di
     62	014A  E2 FA						     loop @@Loop1
     63
     64	014C  BF 0020						     mov di, 0020h			     ; inside =	space
     65	014F  BF 0000r						     lea di, arguments
     66
     67	0152  EB 46 90						     jmp @@Call
     68
     69				     ; MODE = 2	;
     70	0155			     @@Parse2:
     71	0155  B9 0008						     mov cx, 08h			     ; counter for loop
     72
     73								     ; READING ASCII ;
     74	0158  8A 07						     mov byte ptr al, [bx]   ; al = ascii code
     75	015A  FE C3						     inc bl
     76	015C  FE C3						     inc bl				     ; bl += 2
     77	015E  B4 05						     mov ah, 05h
     78
     79	0160  50		     @@Loop2:		     push ax
     80	0161  E2 E3						     loop @@Loop1
     81	0163  50 55 8B EC C7 46	02+				     push 0020h				     ; inside =	space
     82	      0020 5D
     83
     84	016D  EB 2B 90						     jmp @@Call
     85
     86				     ; MODE = 3	;
     87	0170  B9 0008		     @@Parse3:		     mov cx, 08h
     88	0173  50 55 8B EC C7 46	02+  @@Loop3:		     push 052ah
     89	      052A 5D
     90	017D  E2 F4						     loop @@Loop3
     91	017F  50 55 8B EC C7 46	02+				     push 0020h				     ; inside =	space
     92	      0020 5D
     93
     94	0189  EB 0F 90						     jmp @@Call
     95
     96				     ; MODE = 4	;
     97	018C  B9 0009		     @@Parse4:		     mov cx, 09h
     98
     99	018F  8A 07		     @@Loop4:		     mov byte ptr al, [bx]   ; al = ascii code
    100	0191  FE C3						     inc bl
    101	0193  FE C3						     inc bl				     ; bl += 2
    102	0195  B4 05						     mov ah, 05h
    103	0197  50						     push ax				     ; ax = ascii to draw   +
    104				     (color = 05h)
    105
    106	0198  E2 F5						     loop @@Loop4
    107
    108
    109	019A  59		     @@Call:		     pop cx
    110	019B  5A						     pop dx
    111
    112	019C  BB B800						     mov bx, 0b800h
    113	019F  8E C3						     mov es, bx				     ; es -> 0b800h
    114	01A1  5B						     pop bx
Turbo Assembler	 Version 4.1	    02/24/23 18:04:02	    Page 3
ramka.asm



    115
    116	01A2  E8 0110						     call DrawRect
    117	01A5  CD 20						     int 20h				     ; exit(0)
    118	01A7  C3						     ret
    119
    120				     ;-----------------------------------------------------------
    121				     ; Reads command line int arguments
    122				     ;-----------------------------------------------------------
    123				     ; Entry:		     BX	= position in command line (starting 80h)
    124				     ; Exit:		     AX	- read value
    125				     ; Expects:	     None
    126				     ; Destroys:     AX, BX, CL, DX, SI
    127				     ;-----------------------------------------------------------
    128	01A8			     ReadNumber		     proc
    129	01A8  B8 0000						     mov ax, 00h
    130	01AB  BA 0000						     mov dx, 00h				     ; dx:ax = 0
    131
    132	01AE  8A 0F		     @@Loop:		     mov byte ptr cl, [bx]	     ; cl = arg	symb
    133	01B0  80 F9 0D						     cmp cl, 0Dh
    134	01B3  74 12						     je	@@Exit
    135
    136	01B5  80 F9 20						     cmp cl, 20h
    137	01B8  74 0D						     je	@@Exit					     ; if cl ==	' ' +
    138				     or	0D: exit()
    139
    140	01BA  BE 000A						     mov si, 10d
    141	01BD  F7 E6						     mul si					     ; ax *= 10
    142
    143	01BF  02 C1						     add al, cl
    144	01C1  2C 30						     sub al, 30h				     ; ax += read   +
    145				     ascii.toChar()
    146
    147	01C3  FE C3						     inc bl					     ; bx++
    148	01C5  EB E7						     jmp @@Loop
    149
    150	01C7  FE C3		     @@Exit:		     inc bl					     ; bx++
    151	01C9  C3						     ret
    152	01CA							     endp
    153
    154
    155				     include ..\LIBA.ASM
1   156	01CA			     .data
1   157	0012  0A 54 68 69 73 20	73+	     ErrorMsg: db 0Ah, 'This symbol is not allowed!$'
    158	      79 6D 62 6F 6C 20	69+
    159	      73 20 6E 6F 74 20	61+
    160	      6C 6C 6F 77 65 64	21+
    161	      24
1   162
1   163	002F			     .code
1   164
1   165				     ;-----------------------------------------------------------
1   166				     ; Print binary of value
1   167				     ;-----------------------------------------------------------
1   168				     ; Entry:		     AX	= value	to convert to
1   169				     ;				     BX	= coordinates to print on string
1   170				     ; Exit:		     None
1   171				     ; Expects:	     ES	-> videomem (b800h)
Turbo Assembler	 Version 4.1	    02/24/23 18:04:02	    Page 4
ramka.asm



1   172				     ; Destroys:     BX, CX, DL
1   173				     ;-----------------------------------------------------------
1   174	01CA			     ToBin	     proc
1   175
1   176	01CA  BA 8000					     mov dx, 8000h	     ; dx = 2 ** 15
1   177	01CD  EB 17 90					     jmp @@NewByte
1   178
1   179	01D0			     @@Print1:
1   180	01D0  26: C7 07	0531				     mov es:[bx], 0531h	     ; put 0 to	videomem
1   181	01D5  83 C3 02					     add bx, 2			     ; bx += 2
1   182	01D8  EB 17 90					     jmp @@Next
1   183
1   184	01DB			     @@Print0:
1   185	01DB  26: C7 07	0530				     mov es:[bx], 0530h	     ; put 0 to	videomem
1   186	01E0  83 C3 02					     add bx, 2			     ; bx += 2
1   187	01E3  EB 0C 90					     jmp @@Next
1   188
1   189	01E6			     @@NewByte:
1   190	01E6  8B C8					     mov cx, ax			     ; cx = ax
1   191	01E8  23 CA					     and cx, dx			     ; cx && dx
1   192
1   193	01EA  83 F9 00					     cmp cx, 0h			     ; if cx ==	0: print(0) else: print(1)
1   194	01ED  74 EC					     je	 @@Print0
1   195	01EF  EB DF					     jmp @@Print1
1   196
1   197	01F1			     @@Next:
1   198	01F1  83 FA 01					     cmp dx, 1h			     ; if dx ==	1: return
1   199	01F4  74 04					     je	@@Exit
1   200
1   201	01F6  D1 EA					     shr dx, 1			     ; dx >> 1
1   202	01F8  EB EC					     jmp @@NewByte
1   203
1   204	01FA  C3		     @@Exit:	     ret
1   205	01FB						     endp
1   206
1   207				     ;-----------------------------------------------------------
1   208				     ; Print hex of value
1   209				     ;-----------------------------------------------------------
1   210				     ; Entry:	     SI	= value	to convert to
1   211				     ;			     BX	= coordinates to print in cmd
1   212				     ; Exit:	     None
1   213				     ; Expects:	     ES	-> videomem (b800h)
1   214				     ; Destroys:     AX, BX, CX, DX, DI, BP, SP
1   215				     ;----------------------------------------------------------
1   216	01FB			     ToHex   proc
1   217
1   218	01FB  BA 8000						     mov dx, 8000h	     ; first byte is 1 others are 0
1   219	01FE  B9 0004						     mov cx, 0004h	     ; cx = 0
1   220	0201  BF 0000						     mov di, 0000h
1   221
1   222	0204			     @@ReadBytes:
1   223	0204  FE C5						     inc ch			     ; ch++ (byte counter in 4th)
1   224	0206  80 FD 05						     cmp ch, 05h		     ; if ch ==	5: exit	else:	    +
    225				     continue
1   226	0209  74 45						     je	@@Exit
1   227	020B  EB 01 90						     jmp @@Proceed4bit
1   228
Turbo Assembler	 Version 4.1	    02/24/23 18:04:02	    Page 5
ramka.asm



1   229	020E			     @@Proceed4bit:
1   230	020E  8B C6						     mov ax, si			     ; ax = si (given value)
1   231	0210  23 C2						     and ax, dx			     ; ax && ax
1   232
1   233	0212  3D 0000						     cmp ax, 00h		     ; if ax ==	0: SkipMul()
1   234	0215  74 0E						     je	@@SkipMul
1   235
1   236	0217  B0 01						     mov al, 01h		     ; al = 1 (value to	add)
1   237	0219  B4 00						     mov ah, 00h		     ; ah = 0 (needed not to brake  +
    238				     ax)
1   239	021B  80 E9 01						     sub cl, 1			     ; cl-- (bit num)
1   240	021E  D2 E0						     shl al, cl			     ; al = 2^cl
1   241	0220  80 C1 01						     add cl, 1			     ; cl++
1   242	0223  03 F8						     add di, ax			     ; di += ax	(di - result to	    +
    243				     print)
1   244
1   245	0225			     @@SkipMul:
1   246	0225  80 E9 01						     sub cl, 1			     ; cl--
1   247	0228  D1 EA						     shr dx, 1			     ; dx /= 2
1   248
1   249	022A  80 F9 00						     cmp cl, 00h
1   250	022D  74 02						     je	@@PrintSymbol
1   251	022F  EB DD						     jmp @@Proceed4bit	     ; if cl ==	0: Print else continue	    +
    252				     reading byte
1   253
1   254	0231			     @@PrintSymbol:
1   255	0231  8B C7						     mov ax, di			     ; ax = di
1   256	0233  B4 05						     mov ah, 05h		     ; ah = 05h	(COLOR)
1   257
1   258	0235  3C 0A						     cmp al, 10d		     ; if al >=	10: PrintAsLetter
1   259	0237  73 05						     jae @@LetterPrint
1   260
1   261	0239  04 30						     add al, 30h		     ; else: al	+= 30h -> print	as  +
    262				     ASCII
1   263	023B  EB 06 90						     jmp @@ContinuePrint
1   264
1   265	023E			     @@LetterPrint:
1   266	023E  04 37						     add al, 37h		     ; al += 37	-> add letter as    +
    267				     ASCII
1   268	0240  EB 01 90						     jmp @@ContinuePrint
1   269
1   270	0243			     @@ContinuePrint:
1   271	0243  26: 89 07						     mov es:[bx], ax	     ; put ax to videomem
1   272	0246  83 C3 02						     add bx, 2			     ; bx += 2
1   273	0249  BF 0000						     mov di, 00h		     ; di = 0
1   274	024C  B1 04						     mov cl, 04h		     ; cl = 4 (byte count)
1   275	024E  EB B4						     jmp @@ReadBytes
1   276
1   277	0250			     @@Exit:
1   278	0250  C3						     ret
1   279	0251							     endp
1   280
1   281
1   282				     ;-----------------------------------------------------------
1   283				     ; Print dec of value
1   284				     ;-----------------------------------------------------------
1   285				     ; Entry:	     SI	= value	to convert to
Turbo Assembler	 Version 4.1	    02/24/23 18:04:02	    Page 6
ramka.asm



1   286				     ;		     BX	= coordinates to print on string
1   287				     ; Exit:	     None
1   288				     ; Expects:	     ES	-> videomem (b800h)
1   289				     ; Destroys:     AX, BX, CX, DX, DI
1   290				     ;-----------------------------------------------------------
1   291	0251			     ToDec	     proc
1   292
1   293	0251  8B C6					     mov ax, si			     ; ax = si
1   294	0253  BF 0006					     mov di, 06h		     ; amount of digits
1   295
1   296	0256			     @@PrintSymb:
1   297	0256  B9 000A					     mov cx, 000Ah	     ; cx = 10
1   298	0259  F7 F1					     div cx			     ; ax = ax / 10, dx	= ax % 10
1   299
1   300	025B  80 C2 30					     add dl, 30h		     ; dl += 30	(symb ascii)
1   301	025E  B6 05					     mov dh, 05h		     ; dh = 5	(color)
1   302
1   303	0260  26: 89 17					     mov es:[bx], dx
1   304	0263  BA 0000					     mov dx, 0000h	     ; print on	screen
1   305
1   306	0266  83 EB 02					     sub bx, 2			     ; bx -= 2
1   307	0269  83 EF 01					     sub di, 1			     ; di --
1   308
1   309	026C  83 FF 00					     cmp di, 0
1   310	026F  74 02					     je	@@Exit
1   311
1   312	0271  EB E3					     jmp @@PrintSymb
1   313
1   314	0273  C3		     @@Exit:	     ret
1   315	0274						     endp
1   316
1   317
1   318				     ;------------------------------------------------------------
1   319				     ; Reads dec number
1   320				     ;------------------------------------------------------------
1   321				     ; Entry:	     None
1   322				     ; Exit:	     DI	- dec value
1   323				     ; Expects:	     None
1   324				     ; Destroys:     AX, CX, DI, SI
1   325				     ;------------------------------------------------------------
1   326	0274			     IntInput	     proc
1   327
1   328	0274  BF 0000					     mov di, 0000h	     ; di = 0
1   329	0277  B9 0005					     mov cx, 0005h	     ; cx = 5 (max amount of numbers)
1   330	027A  EB 0B 90					     jmp @@Loop
1   331	027D			     @@OnError:
1   332	027D  BA 0012r					     mov dx, offset ErrorMsg
1   333	0280  B4 09					     mov ah, 09h
1   334	0282  CD 21					     int 21h			     ; print Error message
1   335
1   336	0284  EB 2E 90					     jmp @@Exit
1   337
1   338	0287  B4 01		     @@Loop:	     mov ah, 01h
1   339	0289  CD 21					     int 21h			     ; reading char -> al
1   340
1   341	028B  3C 0D					     cmp al, 0Dh
1   342	028D  74 25					     je	@@Exit
Turbo Assembler	 Version 4.1	    02/24/23 18:04:02	    Page 7
ramka.asm



1   343
1   344	028F  3C 13					     cmp al, 13h
1   345	0291  74 21					     je	@@Exit			     ; if al ==	'\n' ||	'\r': retunr
1   346
1   347	0293  3C 30					     cmp al, 30h
1   348	0295  72 E6					     jb	@@OnError
1   349
1   350	0297  3C 40					     cmp al, 40h
1   351	0299  77 E2					     ja	@@OnError	     ; if !alnum(al): OnError()
1   352
1   353	029B  2C 30					     sub al, 30h		     ; al -= 30	(ascii -> number)
1   354	029D  B4 00					     mov ah, 00h
1   355
1   356	029F  8B F0					     mov si, ax
1   357	02A1  8B C7					     mov ax, di
1   358	02A3  8B FE					     mov di, si			     ; swap (ax, di)
1   359
1   360	02A5  BE 000A					     mov si, 10d
1   361	02A8  F7 E6					     mul si			     ; ax *= 10
1   362
1   363	02AA  03 C7					     add ax, di			     ; ax += di	(last number)
1   364
1   365	02AC  8B F0					     mov si, ax
1   366	02AE  8B C7					     mov ax, di
1   367	02B0  8B FE					     mov di, si			     ; swap (ax, di)
1   368
1   369	02B2  E2 D3					     loop @@Loop
1   370
1   371	02B4  C3		     @@Exit:	     ret
1   372	02B5						     endp
1   373
1   374
1   375				     ;-------------------------------------------------------------
1   376				     ; Draws rectangle on screen with given borders
1   377				     ;-------------------------------------------------------------
1   378				     ; Entry:	     DI	- pointer to array with	symbols
1   379				     ;			     BX	- coordinates where to print
1   380				     ;			     CX	- horizontal size
1   381				     ;			     DX	- vertical size
1   382				     ; Exit:	     None
1   383				     ; Expects:	     ES	-> videomem (0b800h)
1   384				     ; Destroys:     AX, SI
1   385				     ;-------------------------------------------------------------
1   386	02B5			     DrawRect		     proc
1   387
1   388	02B5  83 E9 02						     sub cx, 2
1   389	02B8  8B F2						     mov si, dx				     ; i = dx
1   390	02BA  EB 0C 90						     jmp @@MainCycle
1   391
1   392	02BD  83 EE 01		     @@IterateI:	     sub si, 1				     ; i--
1   393
1   394	02C0  2B D9						     sub bx, cx				     ; start vertically
1   395	02C2  2B D9						     sub bx, cx
1   396	02C4  81 C3 00A0					     add bx, 160d		     ; new line
1   397
1   398	02C8  8B C1		     @@MainCycle:    mov ax, cx				     ; j = cx
1   399
Turbo Assembler	 Version 4.1	    02/24/23 18:04:02	    Page 8
ramka.asm



1   400	02CA  83 EB 02						     sub bx, 2				     ; bx -= 2 (then i += 2 +
    401				     to	print)
1   402
1   403	02CD  83 FE 00						     cmp si, 00h
1   404	02D0  75 38						     jne @@DrawV
1   405
1   406	02D2  83 C3 02		     @@ContinueMain: add bx, 2				     ; bx += 2 (watch previous comment)
1   407	02D5  83 FE 00						     cmp si, 00h
1   408	02D8  74 78						     je	@@Exit				     ; if i == 0: exit(0)
1   409
1   410	02DA  8B 15		     @@SecondCycle:  mov dx, [di]
1   411	02DC  26: 89 17						     mov es:[bx], dx
1   412
1   413	02DF  3D 0000						     cmp ax, 00h
1   414	02E2  74 4A						     je	@@DrawRightV		     ; print left border (WORKS!)
1   415
1   416	02E4  3B F2						     cmp si, dx
1   417	02E6  74 12						     je	@@DrawH				     ; draw highest border
1   418
1   419	02E8  83 FE 01						     cmp si, 01h
1   420	02EB  74 15						     je	@@DrawLower		     ; draw lowest border
1   421
1   422	02ED			     @@ContinueSecond:
1   423	02ED  3D 0000						     cmp ax, 00h
1   424	02F0  74 CB						     je	@@IterateI		     ; if j == 0: i++
1   425
1   426	02F2  2D 0001						     sub ax, 1				     ; else: j--
1   427	02F5  83 C3 02						     add bx, 2				     ; bx += 2
1   428	02F8  EB E0						     jmp @@SecondCycle
1   429
1   430	02FA  8B 55 02		     @@DrawH:		     mov dx, [di + 2]
1   431	02FD  26: 89 17						     mov es:[bx], dx
1   432	0300  EB EB						     jmp @@ContinueSecond
1   433
1   434	0302  8B 55 04		     @@DrawLower:    mov dx, [di + 4]
1   435	0305  26: 89 17						     mov es:[bx], dx
1   436	0308  EB E3						     jmp @@ContinueSecond
1   437
1   438	030A  83 FE 01		     @@DrawV:		     cmp si, 01h
1   439	030D  74 0F						     je	@@LowLeft
1   440	030F  3B F2						     cmp si, dx
1   441	0311  74 03						     je	@@HighLeft
1   442	0313  EB 11 90						     jmp @@Left				 ; TODO: all labels !!!!! ->+
    443				     functions
1   444
1   445	0316  8B 55 06		     @@HighLeft:	     mov dx, [di + 6]
1   446	0319  26: 89 17						     mov es:[bx], dx
1   447	031C  EB B4						     jmp @@ContinueMain
1   448
1   449	031E  8B 55 08		     @@LowLeft:		     mov dx, [di + 8]
1   450	0321  26: 89 17						     mov es:[bx], dx
1   451	0324  EB AC						     jmp @@ContinueMain
1   452
1   453	0326  8B 55 0A		     @@Left:		     mov dx, [di + 10d]
1   454	0329  26: 89 17						     mov es:[bx], dx
1   455	032C  EB A4						     jmp @@ContinueMain
1   456
Turbo Assembler	 Version 4.1	    02/24/23 18:04:02	    Page 9
ramka.asm



1   457	032E  83 FE 01		     @@DrawRightV:   cmp si, 01h
1   458	0331  74 07						     je	@@LowRight
1   459	0333  3B F2						     cmp si, dx
1   460	0335  74 0B						     je	@@HighRight
1   461	0337  EB 11 90						     jmp @@Right
1   462
1   463	033A  8B 55 0C		     @@LowRight:	     mov dx, [di + 12d]
1   464	033D  26: 89 17						     mov es:[bx], dx
1   465	0340  EB AB						     jmp @@ContinueSecond
1   466
1   467	0342  8B 55 0E		     @@HighRight:    mov dx, [di + 14d]
1   468	0345  26: 89 17						     mov es:[bx], dx
1   469	0348  EB A3						     jmp @@ContinueSecond
1   470
1   471	034A  8B 55 10		     @@Right:		     mov dx, [di + 16d]
1   472	034D  26: 89 17						     mov es:[bx], dx
1   473	0350  EB 9B						     jmp @@ContinueSecond
1   474
1   475	0352  C3		     @@Exit:		     ret
1   476	0353							     endp
1   477
1   478
1   479				     ;-----------------------------------------------------------
1   480				     ; Put symbol with given ascii to videomem
1   481				     ;-----------------------------------------------------------
1   482				     ; Entry:	     BX	= coordinates where to print symbol
1   483				     ;		     CX	= symbol itself
1   484				     ; Exit:	     None
1   485				     ; Expects:	     ES	-> videomem (b800h)
1   486				     ; Destroys:     None
1   487				     ;-----------------------------------------------------------
1   488	0353			     PutChar proc
1   489
1   490	0353  26: 89 0F			     mov es:[bx], cx	     ; put symbol to videomem
1   491
1   492	0356  C3			     ret
1   493	0357				     endp
1   494
    495
    496				     end     Start
Turbo Assembler	 Version 4.1	    02/24/23 18:04:02	    Page 10
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "02/24/23"
??FILENAME			  Text	 "ramka	  "
??TIME				  Text	 "18:04:02"
??VERSION			  Number 040A
@32BIT				  Text	 0
@@CALL				  Near	 DGROUP:019A
@@CONTINUEMAIN			  Near	 DGROUP:02D2
@@CONTINUEPRINT			  Near	 DGROUP:0243
@@CONTINUESECOND		  Near	 DGROUP:02ED
@@DRAWH				  Near	 DGROUP:02FA
@@DRAWLOWER			  Near	 DGROUP:0302
@@DRAWRIGHTV			  Near	 DGROUP:032E
@@DRAWV				  Near	 DGROUP:030A
@@EXIT				  Near	 DGROUP:01C7
@@EXIT				  Near	 DGROUP:01FA
@@EXIT				  Near	 DGROUP:0250
@@EXIT				  Near	 DGROUP:0273
@@EXIT				  Near	 DGROUP:02B4
@@EXIT				  Near	 DGROUP:0352
@@HIGHLEFT			  Near	 DGROUP:0316
@@HIGHRIGHT			  Near	 DGROUP:0342
@@ITERATEI			  Near	 DGROUP:02BD
@@LEFT				  Near	 DGROUP:0326
@@LETTERPRINT			  Near	 DGROUP:023E
@@LOOP				  Near	 DGROUP:01AE
@@LOOP				  Near	 DGROUP:0287
@@LOOP1				  Near	 DGROUP:0146
@@LOOP2				  Near	 DGROUP:0160
@@LOOP3				  Near	 DGROUP:0173
@@LOOP4				  Near	 DGROUP:018F
@@LOWLEFT			  Near	 DGROUP:031E
@@LOWRIGHT			  Near	 DGROUP:033A
@@MAINCYCLE			  Near	 DGROUP:02C8
@@NEWBYTE			  Near	 DGROUP:01E6
@@NEXT				  Near	 DGROUP:01F1
@@ONERROR			  Near	 DGROUP:027D
@@PARSE1			  Near	 DGROUP:0134
@@PARSE2			  Near	 DGROUP:0155
@@PARSE3			  Near	 DGROUP:0170
@@PARSE4			  Near	 DGROUP:018C
@@PRINT0			  Near	 DGROUP:01DB
@@PRINT1			  Near	 DGROUP:01D0
@@PRINTSYMB			  Near	 DGROUP:0256
@@PRINTSYMBOL			  Near	 DGROUP:0231
@@PROCEED4BIT			  Near	 DGROUP:020E
@@READBYTES			  Near	 DGROUP:0204
@@RIGHT				  Near	 DGROUP:034A
@@SECONDCYCLE			  Near	 DGROUP:02DA
@@SKIPMUL			  Near	 DGROUP:0225
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0101H
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
Turbo Assembler	 Version 4.1	    02/24/23 18:04:02	    Page 11
Symbol Table



@DATASIZE			  Text	 0
@FILENAME			  Text	 RAMKA
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
ARGUMENTS			  Near	 DGROUP:0000
DRAWRECT			  Near	 DGROUP:02B5
ERRORMSG			  Near	 DGROUP:0012
INTINPUT			  Near	 DGROUP:0274
PUTCHAR				  Near	 DGROUP:0353
READNUMBER			  Near	 DGROUP:01A8
START				  Near	 DGROUP:0100
TOBIN				  Near	 DGROUP:01CA
TODEC				  Near	 DGROUP:0251
TOHEX				  Near	 DGROUP:01FB

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  002F Word	  Public  DATA
  _TEXT				  16  0357 Word	  Public  CODE
