Turbo Assembler	 Version 4.1	    02/20/23 14:38:07	    Page 1
ramka.asm



      1	0000			     .model tiny
      2	0000			     .code
      3
      4				     org 100h
      5
      6				     locals @@
      7
      8	0100			     Start:
      9	0100  BB 0082						     mov bx, 0082h
     10	0103  E8 009B						     call ReadNumber		     ; ax -> line
     11
     12	0106  BE 00A0						     mov si, 160d
     13	0109  F7 E6						     mul si				     ; ax *= 10
     14	010B  8B F8						     mov di, ax				     ; si = ax
     15
     16	010D  E8 0091						     call ReadNumber
     17	0110  03 C0						     add ax, ax
     18	0112  03 F8						     add di, ax
     19	0114  57						     push di				     ; coordinates ready
     20
     21	0115  E8 0089						     call ReadNumber
     22	0118  50						     push ax				     ; height
     23
     24	0119  E8 0085						     call ReadNumber
     25	011C  50						     push ax				     ; length
     26
     27	011D  E8 0081						     call ReadNumber		     ; type
     28
     29	0120  3D 0001						     cmp ax, 01h
     30	0123  74 0F						     je	@@Parse1
     31	0125  3D 0002						     cmp ax, 02h
     32	0128  74 26						     je	@@Parse2
     33	012A  3D 0003						     cmp ax, 03h
     34	012D  74 3D						     je	@@Parse3
     35	012F  3D 0004						     cmp ax, 04h
     36	0132  74 54						     je	@@Parse4
     37
     38
     39	0134  B9 0008		     @@Parse1:		     mov cx, 08h
     40	0137  50 55 8B EC C7 46	02+  @@Loop1:		     push 0531h				     ; 1s
     41	      0531 5D
     42	0141  E2 F4						     loop @@Loop1
     43	0143  50 55 8B EC C7 46	02+				     push 0020h				     ; inside =	space
     44	      0020 5D
     45
     46	014D  EB 47 90						     jmp @@Call
     47
     48	0150  B9 0008		     @@Parse2:		     mov cx, 08h
     49	0153  50 55 8B EC C7 46	02+  @@Loop2:		     push 0532h
     50	      0532 5D
     51	015D  E2 F4						     loop @@Loop2
     52	015F  50 55 8B EC C7 46	02+				     push 0020h				     ; inside =	space
     53	      0020 5D
     54
     55	0169  EB 2B 90						     jmp @@Call
     56
     57
Turbo Assembler	 Version 4.1	    02/20/23 14:38:07	    Page 2
ramka.asm



     58	016C  B9 0008		     @@Parse3:		     mov cx, 08h
     59	016F  50 55 8B EC C7 46	02+  @@Loop3:		     push 052ah
     60	      052A 5D
     61	0179  E2 F4						     loop @@Loop3
     62	017B  50 55 8B EC C7 46	02+				     push 0020h				     ; inside =	space
     63	      0020 5D
     64
     65	0185  EB 0F 90						     jmp @@Call
     66
     67
     68	0188  B9 0009		     @@Parse4:		     mov cx, 09h
     69
     70	018B  8A 07		     @@Loop4:		     mov byte ptr al, [bx]   ; al = ascii code
     71	018D  FE C3						     inc bl
     72	018F  FE C3						     inc bl				     ; bl += 2
     73	0191  B4 05						     mov ah, 05h
     74	0193  50						     push ax				     ; ax = ascii to draw   +
     75				     (color = 05h)
     76
     77	0194  E2 F5						     loop @@Loop4
     78
     79
     80	0196  BB B800		     @@Call:		     mov bx, 0b800h
     81	0199  8E C3						     mov es, bx				     ; es -> 0b800h
     82
     83	019B  E8 0110						     call DrawRect
     84	019E  CD 20						     int 20h				     ; exit(0)
     85	01A0  C3						     ret
     86
     87				     ;-----------------------------------------------------------
     88				     ; Reads command line int arguments
     89				     ;-----------------------------------------------------------
     90				     ; Entry:		     BX	= position in command line (starting 80h)
     91				     ; Exit:		     AX	- read value
     92				     ; Expects:	     None
     93				     ; Destroys:     AX, BX, CL, DX, SI
     94				     ;-----------------------------------------------------------
     95	01A1			     ReadNumber		     proc
     96	01A1  B8 0000						     mov ax, 00h
     97	01A4  BA 0000						     mov dx, 00h				     ; dx:ax = 0
     98
     99	01A7  8A 0F		     @@Loop:		     mov byte ptr cl, [bx]	     ; cl = arg	symb
    100	01A9  80 F9 0D						     cmp cl, 0Dh
    101	01AC  74 12						     je	@@Exit
    102
    103	01AE  80 F9 20						     cmp cl, 20h
    104	01B1  74 0D						     je	@@Exit					     ; if cl ==	' ' +
    105				     or	0D: exit()
    106
    107	01B3  BE 000A						     mov si, 10d
    108	01B6  F7 E6						     mul si					     ; ax *= 10
    109
    110	01B8  02 C1						     add al, cl
    111	01BA  2C 30						     sub al, 30h				     ; ax += read   +
    112				     ascii.toChar()
    113
    114	01BC  FE C3						     inc bl					     ; bx++
Turbo Assembler	 Version 4.1	    02/20/23 14:38:07	    Page 3
ramka.asm



    115	01BE  EB E7						     jmp @@Loop
    116
    117	01C0  FE C3		     @@Exit:		     inc bl					     ; bx++
    118	01C2  C3						     ret
    119	01C3							     endp
    120
    121
    122				     include ..\LIBA.ASM
1   123	01C3			     .data
1   124	0000  0A 54 68 69 73 20	73+	     ErrorMsg: db 0Ah, 'This symbol is not allowed!$'
    125	      79 6D 62 6F 6C 20	69+
    126	      73 20 6E 6F 74 20	61+
    127	      6C 6C 6F 77 65 64	21+
    128	      24
1   129
1   130	001D			     .code
1   131
1   132				     ;-----------------------------------------------------------
1   133				     ; Print binary of value
1   134				     ;-----------------------------------------------------------
1   135				     ; Entry:	     AX	= value	to convert to
1   136				     ;		     BX	= coordinates to print on string
1   137				     ; Exit:	     None
1   138				     ; Expects:	     ES	-> videomem (b800h)
1   139				     ; Destroys:     BX, CX, DL
1   140				     ;-----------------------------------------------------------
1   141	01C3			     ToBin	     proc
1   142
1   143	01C3  BA 8000					     mov dx, 8000h	     ; dx = 2 ** 15
1   144	01C6  EB 17 90					     jmp @@NewByte
1   145
1   146	01C9			     @@Print1:
1   147	01C9  26: C7 07	0531				     mov es:[bx], 0531h	     ; put 0 to	videomem
1   148	01CE  83 C3 02					     add bx, 2			     ; bx += 2
1   149	01D1  EB 17 90					     jmp @@Next
1   150
1   151	01D4			     @@Print0:
1   152	01D4  26: C7 07	0530				     mov es:[bx], 0530h	     ; put 0 to	videomem
1   153	01D9  83 C3 02					     add bx, 2			     ; bx += 2
1   154	01DC  EB 0C 90					     jmp @@Next
1   155
1   156	01DF			     @@NewByte:
1   157	01DF  8B C8					     mov cx, ax			     ; cx = ax
1   158	01E1  23 CA					     and cx, dx			     ; cx && dx
1   159
1   160	01E3  83 F9 00					     cmp cx, 0h			     ; if cx ==	0: print(0) else: print(1)
1   161	01E6  74 EC					     je	 @@Print0
1   162	01E8  EB DF					     jmp @@Print1
1   163
1   164	01EA			     @@Next:
1   165	01EA  83 FA 01					     cmp dx, 1h			     ; if dx ==	1: return
1   166	01ED  74 04					     je	@@Exit
1   167
1   168	01EF  D1 EA					     shr dx, 1			     ; dx >> 1
1   169	01F1  EB EC					     jmp @@NewByte
1   170
1   171	01F3  C3		     @@Exit:	     ret
Turbo Assembler	 Version 4.1	    02/20/23 14:38:07	    Page 4
ramka.asm



1   172	01F4						     endp
1   173
1   174				     ;-----------------------------------------------------------
1   175				     ; Print hex of value
1   176				     ;-----------------------------------------------------------
1   177				     ; Entry:	     SI	= value	to convert to
1   178				     ;		     BX	= coordinates to print in cmd
1   179				     ; Exit:	     None
1   180				     ; Expects:	     ES	-> videomem (b800h)
1   181				     ; Destroys:     AX, BX, CX, DX, DI, BP, SP
1   182				     ;----------------------------------------------------------
1   183	01F4			     ToHex   proc
1   184
1   185	01F4  BA 8000						     mov dx, 8000h	     ; first byte is 1 others are 0
1   186	01F7  B9 0004						     mov cx, 0004h	     ; cx = 0
1   187	01FA  BF 0000						     mov di, 0000h
1   188
1   189	01FD			     @@ReadBytes:
1   190	01FD  FE C5						     inc ch			     ; ch++ (byte counter in 4th)
1   191	01FF  80 FD 05						     cmp ch, 05h		     ; if ch ==	5: exit	else:	    +
    192				     continue
1   193	0202  74 45						     je	@@Exit
1   194	0204  EB 01 90						     jmp @@Proceed4bit
1   195
1   196	0207			     @@Proceed4bit:
1   197	0207  8B C6						     mov ax, si			     ; ax = si (given value)
1   198	0209  23 C2						     and ax, dx			     ; ax && ax
1   199
1   200	020B  3D 0000						     cmp ax, 00h		     ; if ax ==	0: SkipMul()
1   201	020E  74 0E						     je	@@SkipMul
1   202
1   203	0210  B0 01						     mov al, 01h		     ; al = 1 (value to	add)
1   204	0212  B4 00						     mov ah, 00h		     ; ah = 0 (needed not to brake  +
    205				     ax)
1   206	0214  80 E9 01						     sub cl, 1			     ; cl-- (bit num)
1   207	0217  D2 E0						     shl al, cl			     ; al = 2^cl
1   208	0219  80 C1 01						     add cl, 1			     ; cl++
1   209	021C  03 F8						     add di, ax			     ; di += ax	(di - result to	    +
    210				     print)
1   211
1   212	021E			     @@SkipMul:
1   213	021E  80 E9 01						     sub cl, 1			     ; cl--
1   214	0221  D1 EA						     shr dx, 1			     ; dx /= 2
1   215
1   216	0223  80 F9 00						     cmp cl, 00h
1   217	0226  74 02						     je	@@PrintSymbol
1   218	0228  EB DD						     jmp @@Proceed4bit	     ; if cl ==	0: Print else continue	    +
    219				     reading byte
1   220
1   221	022A			     @@PrintSymbol:
1   222	022A  8B C7						     mov ax, di			     ; ax = di
1   223	022C  B4 05						     mov ah, 05h		     ; ah = 05h	(COLOR)
1   224
1   225	022E  3C 0A						     cmp al, 10d		     ; if al >=	10: PrintAsLetter
1   226	0230  73 05						     jae @@LetterPrint
1   227
1   228	0232  04 30						     add al, 30h		     ; else: al	+= 30h -> print	as  +
Turbo Assembler	 Version 4.1	    02/20/23 14:38:07	    Page 5
ramka.asm



    229				     ASCII
1   230	0234  EB 06 90						     jmp @@ContinuePrint
1   231
1   232	0237			     @@LetterPrint:
1   233	0237  04 37						     add al, 37h		     ; al += 37	-> add letter as    +
    234				     ASCII
1   235	0239  EB 01 90						     jmp @@ContinuePrint
1   236
1   237	023C			     @@ContinuePrint:
1   238	023C  26: 89 07						     mov es:[bx], ax	     ; put ax to videomem
1   239	023F  83 C3 02						     add bx, 2			     ; bx += 2
1   240	0242  BF 0000						     mov di, 00h		     ; di = 0
1   241	0245  B1 04						     mov cl, 04h		     ; cl = 4 (byte count)
1   242	0247  EB B4						     jmp @@ReadBytes
1   243
1   244	0249			     @@Exit:
1   245	0249  C3						     ret
1   246	024A							     endp
1   247
1   248
1   249				     ;-----------------------------------------------------------
1   250				     ; Print dec of value
1   251				     ;-----------------------------------------------------------
1   252				     ; Entry:	     SI	= value	to convert to
1   253				     ;		     BX	= coordinates to print on string
1   254				     ; Exit:	     None
1   255				     ; Expects:	     ES	-> videomem (b800h)
1   256				     ; Destroys:     AX, BX, CX, DX, DI
1   257				     ;-----------------------------------------------------------
1   258	024A			     ToDec	     proc
1   259
1   260	024A  8B C6					     mov ax, si			     ; ax = si
1   261	024C  BF 0006					     mov di, 06h		     ; amount of digits
1   262
1   263	024F			     @@PrintSymb:
1   264	024F  B9 000A					     mov cx, 000Ah	     ; cx = 10
1   265	0252  F7 F1					     div cx			     ; ax = ax / 10, dx	= ax % 10
1   266
1   267	0254  80 C2 30					     add dl, 30h		     ; dl += 30	(symb ascii)
1   268	0257  B6 05					     mov dh, 05h		     ; dh = 5	(color)
1   269
1   270	0259  26: 89 17					     mov es:[bx], dx
1   271	025C  BA 0000					     mov dx, 0000h	     ; print on	screen
1   272
1   273	025F  83 EB 02					     sub bx, 2			     ; bx -= 2
1   274	0262  83 EF 01					     sub di, 1			     ; di --
1   275
1   276	0265  83 FF 00					     cmp di, 0
1   277	0268  74 02					     je	@@Exit
1   278
1   279	026A  EB E3					     jmp @@PrintSymb
1   280
1   281	026C  C3		     @@Exit:	     ret
1   282	026D						     endp
1   283
1   284
1   285				     ;------------------------------------------------------------
Turbo Assembler	 Version 4.1	    02/20/23 14:38:07	    Page 6
ramka.asm



1   286				     ; Reads dec number
1   287				     ;------------------------------------------------------------
1   288				     ; Entry:	     None
1   289				     ; Exit:	     DI	- dec value
1   290				     ; Expects:	     None
1   291				     ; Destroys:     AX, CX, DI, SI
1   292				     ;------------------------------------------------------------
1   293	026D			     IntInput	     proc
1   294
1   295	026D  BF 0000					     mov di, 0000h	     ; di = 0
1   296	0270  B9 0005					     mov cx, 0005h	     ; cx = 5 (max amount of numbers)
1   297	0273  EB 0B 90					     jmp @@Loop
1   298	0276			     @@OnError:
1   299	0276  BA 0000r					     mov dx, offset ErrorMsg
1   300	0279  B4 09					     mov ah, 09h
1   301	027B  CD 21					     int 21h			     ; print Error message
1   302
1   303	027D  EB 2E 90					     jmp @@Exit
1   304
1   305	0280  B4 01		     @@Loop:	     mov ah, 01h
1   306	0282  CD 21					     int 21h			     ; reading char -> al
1   307
1   308	0284  3C 0D					     cmp al, 0Dh
1   309	0286  74 25					     je	@@Exit
1   310
1   311	0288  3C 13					     cmp al, 13h
1   312	028A  74 21					     je	@@Exit			     ; if al ==	'\n' ||	'\r': retunr
1   313
1   314	028C  3C 30					     cmp al, 30h
1   315	028E  72 E6					     jb	@@OnError
1   316
1   317	0290  3C 40					     cmp al, 40h
1   318	0292  77 E2					     ja	@@OnError	     ; if !alnum(al): OnError()
1   319
1   320	0294  2C 30					     sub al, 30h		     ; al -= 30	(ascii -> number)
1   321	0296  B4 00					     mov ah, 00h
1   322
1   323	0298  8B F0					     mov si, ax
1   324	029A  8B C7					     mov ax, di
1   325	029C  8B FE					     mov di, si			     ; swap (ax, di)
1   326
1   327	029E  BE 000A					     mov si, 10d
1   328	02A1  F7 E6					     mul si			     ; ax *= 10
1   329
1   330	02A3  03 C7					     add ax, di			     ; ax += di	(last number)
1   331
1   332	02A5  8B F0					     mov si, ax
1   333	02A7  8B C7					     mov ax, di
1   334	02A9  8B FE					     mov di, si			     ; swap (ax, di)
1   335
1   336	02AB  E2 D3					     loop @@Loop
1   337
1   338	02AD  C3		     @@Exit:	     ret
1   339	02AE						     endp
1   340
1   341
1   342				     ;-------------------------------------------------------------
Turbo Assembler	 Version 4.1	    02/20/23 14:38:07	    Page 7
ramka.asm



1   343				     ; Draws rectangle on screen with given borders
1   344				     ;-------------------------------------------------------------
1   345				     ; Entry:	     AX	- horizontal border
1   346				     ;		     DX	- vertical   border
1   347				     ;		     BX	- left highest point
1   348				     ;		     CX	- horizontal size
1   349				     ;		     DI	- vertical   size
1   350				     ; Exit:	     None
1   351				     ; Expects:	     ES	-> videomem (0b800h)
1   352				     ; Destroys:     BP, SI
1   353				     ;-------------------------------------------------------------
1   354	02AE			     DrawRect		     proc
1   355
1   356	02AE  55						     push bp
1   357	02AF  8B EC						     mov bp, sp
1   358
1   359	02B1  8B 5E 1A						     mov bx, [bp + 26d]
1   360	02B4  8B 7E 18						     mov di, [bp + 24d]
1   361	02B7  8B 4E 16						     mov cx, [bp + 22d]
1   362
1   363	02BA  83 E9 02						     sub cx, 2
1   364	02BD  8B F7						     mov si, di				     ; i = di
1   365	02BF  EB 0C 90						     jmp @@MainCycle
1   366
1   367	02C2  83 EE 01		     @@IterateI:	     sub si, 1				     ; i--
1   368
1   369	02C5  2B D9						     sub bx, cx				     ; start vertically
1   370	02C7  2B D9						     sub bx, cx
1   371	02C9  81 C3 00A0					     add bx, 160d		     ; new line
1   372
1   373	02CD  8B C1		     @@MainCycle:    mov ax, cx				     ; j = cx
1   374
1   375	02CF  83 EB 02						     sub bx, 2				     ; bx -= 2 (then i += 2 +
    376				     to	print)
1   377
1   378	02D2  83 FE 00						     cmp si, 00h
1   379	02D5  75 39						     jne @@DrawV
1   380
1   381	02D7  83 C3 02		     @@ContinueMain: add bx, 2				     ; bx += 2 (watch previous comment)
1   382	02DA  83 FE 00						     cmp si, 00h
1   383	02DD  74 79						     je	@@Exit				     ; if i == 0: exit(0)
1   384
1   385	02DF  8B 56 04		     @@SecondCycle:  mov dx, [bp + 4]
1   386	02E2  26: 89 17						     mov es:[bx], dx
1   387
1   388	02E5  3D 0000						     cmp ax, 00h
1   389	02E8  74 4A						     je	@@DrawRightV		     ; print left border (WORKS!)
1   390
1   391	02EA  3B F7						     cmp si, di
1   392	02EC  74 12						     je	@@DrawH				     ; draw highest border
1   393
1   394	02EE  83 FE 01						     cmp si, 01h
1   395	02F1  74 15						     je	@@DrawLower		     ; draw lowest border
1   396
1   397	02F3			     @@ContinueSecond:
1   398	02F3  3D 0000						     cmp ax, 00h
1   399	02F6  74 CA						     je	@@IterateI		     ; if j == 0: i++
Turbo Assembler	 Version 4.1	    02/20/23 14:38:07	    Page 8
ramka.asm



1   400
1   401	02F8  2D 0001						     sub ax, 1				     ; else: j--
1   402	02FB  83 C3 02						     add bx, 2				     ; bx += 2
1   403	02FE  EB DF						     jmp @@SecondCycle
1   404
1   405	0300  8B 56 14		     @@DrawH:		     mov dx, [bp + 20d]
1   406	0303  26: 89 17						     mov es:[bx], dx
1   407	0306  EB EB						     jmp @@ContinueSecond
1   408
1   409	0308  8B 56 10		     @@DrawLower:    mov dx, [bp + 16d]
1   410	030B  26: 89 17						     mov es:[bx], dx
1   411	030E  EB E3						     jmp @@ContinueSecond
1   412
1   413	0310  83 FE 01		     @@DrawV:		     cmp si, 01h
1   414	0313  74 0F						     je	@@LowLeft
1   415	0315  3B F7						     cmp si, di
1   416	0317  74 03						     je	@@HighLeft
1   417	0319  EB 11 90						     jmp @@Left
1   418
1   419	031C  8B 56 0C		     @@HighLeft:	     mov dx, [bp + 12d]
1   420	031F  26: 89 17						     mov es:[bx], dx
1   421	0322  EB B3						     jmp @@ContinueMain
1   422
1   423	0324  8B 56 08		     @@LowLeft:		     mov dx, [bp + 8d]
1   424	0327  26: 89 17						     mov es:[bx], dx
1   425	032A  EB AB						     jmp @@ContinueMain
1   426
1   427	032C  8B 56 0E		     @@Left:		     mov dx, [bp + 14d]
1   428	032F  26: 89 17						     mov es:[bx], dx
1   429	0332  EB A3						     jmp @@ContinueMain
1   430
1   431	0334  83 FE 01		     @@DrawRightV:   cmp si, 01h
1   432	0337  74 07						     je	@@LowRight
1   433	0339  3B F7						     cmp si, di
1   434	033B  74 0B						     je	@@HighRight
1   435	033D  EB 11 90						     jmp @@Right
1   436
1   437	0340  8B 56 06		     @@LowRight:	     mov dx, [bp + 6d]
1   438	0343  26: 89 17						     mov es:[bx], dx
1   439	0346  EB AB						     jmp @@ContinueSecond
1   440
1   441	0348  8B 56 0A		     @@HighRight:    mov dx, [bp + 10d]
1   442	034B  26: 89 17						     mov es:[bx], dx
1   443	034E  EB A3						     jmp @@ContinueSecond
1   444
1   445	0350  8B 56 12		     @@Right:		     mov dx, [bp + 18d]
1   446	0353  26: 89 17						     mov es:[bx], dx
1   447	0356  EB 9B						     jmp @@ContinueSecond
1   448
1   449	0358  5D		     @@Exit:		     pop bp
1   450
1   451	0359  C3						     ret
1   452	035A							     endp
1   453
1   454
1   455				     ;-----------------------------------------------------------
1   456				     ; Put symbol with given ascii to videomem
Turbo Assembler	 Version 4.1	    02/20/23 14:38:07	    Page 9
ramka.asm



1   457				     ;-----------------------------------------------------------
1   458				     ; Entry:	     BX	= coordinates where to print symbol
1   459				     ;		     CX	= symbol itself
1   460				     ; Exit:	     None
1   461				     ; Expects:	     ES	-> videomem (b800h)
1   462				     ; Destroys:     None
1   463				     ;-----------------------------------------------------------
1   464	035A			     PutChar proc
1   465
1   466	035A  26: 89 0F			     mov es:[bx], cx	     ; put symbol to videomem
1   467
1   468	035D  C3			     ret
1   469	035E				     endp
1   470
    471
    472				     end     Start
Turbo Assembler	 Version 4.1	    02/20/23 14:38:07	    Page 10
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "02/20/23"
??FILENAME			  Text	 "ramka	  "
??TIME				  Text	 "14:38:07"
??VERSION			  Number 040A
@32BIT				  Text	 0
@@CALL				  Near	 DGROUP:0196
@@CONTINUEMAIN			  Near	 DGROUP:02D7
@@CONTINUEPRINT			  Near	 DGROUP:023C
@@CONTINUESECOND		  Near	 DGROUP:02F3
@@DRAWH				  Near	 DGROUP:0300
@@DRAWLOWER			  Near	 DGROUP:0308
@@DRAWRIGHTV			  Near	 DGROUP:0334
@@DRAWV				  Near	 DGROUP:0310
@@EXIT				  Near	 DGROUP:01C0
@@EXIT				  Near	 DGROUP:01F3
@@EXIT				  Near	 DGROUP:0249
@@EXIT				  Near	 DGROUP:026C
@@EXIT				  Near	 DGROUP:02AD
@@EXIT				  Near	 DGROUP:0358
@@HIGHLEFT			  Near	 DGROUP:031C
@@HIGHRIGHT			  Near	 DGROUP:0348
@@ITERATEI			  Near	 DGROUP:02C2
@@LEFT				  Near	 DGROUP:032C
@@LETTERPRINT			  Near	 DGROUP:0237
@@LOOP				  Near	 DGROUP:01A7
@@LOOP				  Near	 DGROUP:0280
@@LOOP1				  Near	 DGROUP:0137
@@LOOP2				  Near	 DGROUP:0153
@@LOOP3				  Near	 DGROUP:016F
@@LOOP4				  Near	 DGROUP:018B
@@LOWLEFT			  Near	 DGROUP:0324
@@LOWRIGHT			  Near	 DGROUP:0340
@@MAINCYCLE			  Near	 DGROUP:02CD
@@NEWBYTE			  Near	 DGROUP:01DF
@@NEXT				  Near	 DGROUP:01EA
@@ONERROR			  Near	 DGROUP:0276
@@PARSE1			  Near	 DGROUP:0134
@@PARSE2			  Near	 DGROUP:0150
@@PARSE3			  Near	 DGROUP:016C
@@PARSE4			  Near	 DGROUP:0188
@@PRINT0			  Near	 DGROUP:01D4
@@PRINT1			  Near	 DGROUP:01C9
@@PRINTSYMB			  Near	 DGROUP:024F
@@PRINTSYMBOL			  Near	 DGROUP:022A
@@PROCEED4BIT			  Near	 DGROUP:0207
@@READBYTES			  Near	 DGROUP:01FD
@@RIGHT				  Near	 DGROUP:0350
@@SECONDCYCLE			  Near	 DGROUP:02DF
@@SKIPMUL			  Near	 DGROUP:021E
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0101H
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
Turbo Assembler	 Version 4.1	    02/20/23 14:38:07	    Page 11
Symbol Table



@DATASIZE			  Text	 0
@FILENAME			  Text	 RAMKA
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
DRAWRECT			  Near	 DGROUP:02AE
ERRORMSG			  Near	 DGROUP:0000
INTINPUT			  Near	 DGROUP:026D
PUTCHAR				  Near	 DGROUP:035A
READNUMBER			  Near	 DGROUP:01A1
START				  Near	 DGROUP:0100
TOBIN				  Near	 DGROUP:01C3
TODEC				  Near	 DGROUP:024A
TOHEX				  Near	 DGROUP:01F4

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  001D Word	  Public  DATA
  _TEXT				  16  035E Word	  Public  CODE
