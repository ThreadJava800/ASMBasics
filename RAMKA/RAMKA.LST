Turbo Assembler	 Version 4.1	    02/20/23 14:12:38	    Page 1
ramka.asm



      1	0000			     .model tiny
      2
      3	0000			     .data
      4	0000  45 6E 74 65 72 20	66+	     first:  db	'Enter frame line num (max: 25d): $'
      5	      72 61 6D 65 20 6C	69+
      6	      6E 65 20 6E 75 6D	20+
      7	      28 6D 61 78 3A 20	32+
      8	      35 64 29 3A 20 24
      9	0022  45 6E 74 65 72 20	66+	     second: db	'Enter frame col num (max: 80d): $'
     10	      72 61 6D 65 20 63	6F+
     11	      6C 20 6E 75 6D 20	28+
     12	      6D 61 78 3A 20 38	30+
     13	      64 29 3A 20 24
     14	0043  45 6E 74 65 72 20	66+	     third:  db	'Enter frame height (max: 25d):	$'
     15	      72 61 6D 65 20 68	65+
     16	      69 67 68 74 20 28	6D+
     17	      61 78 3A 20 32 35	64+
     18	      29 3A 20 24
     19	0063  45 6E 74 65 72 20	66+	     forth:  db	'Enter frame length (max: 80d):	$'
     20	      72 61 6D 65 20 6C	65+
     21	      6E 67 74 68 20 28	6D+
     22	      61 78 3A 20 38 30	64+
     23	      29 3A 20 24
     24	0083  45 6E 74 65 72 20	66+	     fifth:  db	'Enter frame type (1 - ones, 2 - twos, 3 - *, 4	- custom): $'
     25	      72 61 6D 65 20 74	79+
     26	      70 65 20 28 31 20	2D+
     27	      20 6F 6E 65 73 2C	20+
     28	      32 20 2D 20 74 77	6F+
     29	      73 2C 20 33 20 2D	20+
     30	      2A 2C 20 34 20 2D	20+
     31	      63 75 73 74 6F 6D	29+
     32	      3A 20 24
     33
     34	00BE  45 6E 74 65 72 20	75+	     ub:  db 'Enter upper bound	char: $'
     35	      70 70 65 72 20 62	6F+
     36	      75 6E 64 20 63 68	61+
     37	      72 3A 20 24
     38	00D7  0A 45 6E 74 65 72	20+	     rs:     db	0Ah, 'Enter right side border char: $'
     39	      72 69 67 68 74 20	73+
     40	      69 64 65 20 62 6F	72+
     41	      64 65 72 20 63 68	61+
     42	      72 3A 20 24
     43	00F7  0A 45 6E 74 65 72	20+	     lb:     db	0Ah, 'Enter lower bound	char: $'
     44	      6C 6F 77 65 72 20	62+
     45	      6F 75 6E 64 20 63	68+
     46	      61 72 3A 20 24
     47	0111  0A 45 6E 74 65 72	20+	     ls:     db	0Ah, 'Enter left side border char: $'
     48	      6C 65 66 74 20 73	69+
     49	      64 65 20 62 6F 72	64+
     50	      65 72 20 63 68 61	72+
     51	      3A 20 24
     52
     53	0130  0A 45 6E 74 65 72	20+	     lhc:    db	0Ah, 'Enter left higher	corner:	$'
     54	      6C 65 66 74 20 68	69+
     55	      67 68 65 72 20 63	6F+
     56	      72 6E 65 72 3A 20	24
     57	014C  0A 45 6E 74 65 72	20+	     rhc:    db	0Ah, 'Enter right higher corner: $'
Turbo Assembler	 Version 4.1	    02/20/23 14:12:38	    Page 2
ramka.asm



     58	      72 69 67 68 74 20	68+
     59	      69 67 68 65 72 20	63+
     60	      6F 72 6E 65 72 3A	20+
     61	      24
     62	0169  0A 45 6E 74 65 72	20+	     llc:    db	0Ah, 'Enter left lower corner: $'
     63	      6C 65 66 74 20 6C	6F+
     64	      77 65 72 20 63 6F	72+
     65	      6E 65 72 3A 20 24
     66	0184  0A 45 6E 74 65 72	20+	     rlc:    db	0Ah, 'Enter right lower	corner:	$'
     67	      72 69 67 68 74 20	6C+
     68	      6F 77 65 72 20 63	6F+
     69	      72 6E 65 72 3A 20	24
     70
     71	01A0  0A 45 6E 74 65 72	20+	     inside: db	0Ah, 'Enter inside char: $'
     72	      69 6E 73 69 64 65	20+
     73	      63 68 61 72 3A 20	24
     74
     75	01B5  59 6F 75 20 61 72	65+	     error_str:	 db 'You are mistaken! IDIOT. Aborting...$'
     76	      20 6D 69 73 74 61	6B+
     77	      65 6E 21 20 49 44	49+
     78	      4F 54 2E 20 41 62	6F+
     79	      72 74 69 6E 67 2E	2E+
     80	      2E 24
     81	01DA			     .code
     82
     83				     org 100h
     84
     85				     locals @@
     86
     87	0100			     Start:
     88	0100  BB 0082						     mov bx, 0082h
     89	0103  E8 009B						     call ReadNumber		     ; ax -> line
     90
     91	0106  BE 00A0						     mov si, 160d
     92	0109  F7 E6						     mul si				     ; ax *= 10
     93	010B  8B F8						     mov di, ax				     ; si = ax
     94
     95	010D  E8 0091						     call ReadNumber
     96	0110  03 C0						     add ax, ax
     97	0112  03 F8						     add di, ax
     98	0114  57						     push di				     ; coordinates ready
     99
    100	0115  E8 0089						     call ReadNumber
    101	0118  50						     push ax				     ; height
    102
    103	0119  E8 0085						     call ReadNumber
    104	011C  50						     push ax				     ; length
    105
    106	011D  E8 0081						     call ReadNumber		     ; type
    107
    108	0120  3D 0001						     cmp ax, 01h
    109	0123  74 0F						     je	@@Parse1
    110	0125  3D 0002						     cmp ax, 02h
    111	0128  74 26						     je	@@Parse2
    112	012A  3D 0003						     cmp ax, 03h
    113	012D  74 3D						     je	@@Parse3
    114	012F  3D 0004						     cmp ax, 04h
Turbo Assembler	 Version 4.1	    02/20/23 14:12:38	    Page 3
ramka.asm



    115	0132  74 54						     je	@@Parse4
    116
    117
    118	0134  B9 0008		     @@Parse1:		     mov cx, 08h
    119	0137  50 55 8B EC C7 46	02+  @@Loop1:		     push 0531h		     ; 1s
    120	      0531 5D
    121	0141  E2 F4						     loop @@Loop1
    122	0143  50 55 8B EC C7 46	02+				     push 0020h		     ; inside =	space
    123	      0020 5D
    124
    125	014D  EB 47 90						     jmp @@Call
    126
    127	0150  B9 0008		     @@Parse2:		     mov cx, 08h
    128	0153  50 55 8B EC C7 46	02+  @@Loop2:		     push 0532h
    129	      0532 5D
    130	015D  E2 F4						     loop @@Loop2
    131	015F  50 55 8B EC C7 46	02+				     push 0020h			     ; inside =	space
    132	      0020 5D
    133
    134	0169  EB 2B 90						     jmp @@Call
    135
    136
    137	016C  B9 0008		     @@Parse3:		     mov cx, 08h
    138	016F  50 55 8B EC C7 46	02+  @@Loop3:		     push 052ah
    139	      052A 5D
    140	0179  E2 F4						     loop @@Loop3
    141	017B  50 55 8B EC C7 46	02+				     push 0020h			     ; inside =	space
    142	      0020 5D
    143
    144	0185  EB 0F 90						     jmp @@Call
    145
    146
    147	0188  B9 0009		     @@Parse4:		     mov cx, 09h
    148
    149	018B  8A 07		     @@Loop4:		     mov byte ptr al, [bx]
    150	018D  FE C3						     inc bl
    151	018F  FE C3						     inc bl
    152	0191  B4 05						     mov ah, 05h
    153	0193  50						     push ax
    154
    155	0194  E2 F5						     loop @@Loop4
    156
    157
    158	0196  BB B800		     @@Call:		     mov bx, 0b800h
    159	0199  8E C3						     mov es, bx
    160
    161	019B  E8 0110						     call DrawRect
    162	019E  CD 20						     int 20h
    163	01A0  C3						     ret
    164
    165				     ; Destroys:	     ax, bx, cx, dx, si
    166	01A1			     ReadNumber		     proc
    167	01A1  B8 0000						     mov ax, 00h
    168	01A4  BA 0000						     mov dx, 00h
    169
    170	01A7  8A 0F		     @@Loop:		     mov byte ptr cl, [bx]
    171	01A9  80 F9 0D						     cmp cl, 0Dh
Turbo Assembler	 Version 4.1	    02/20/23 14:12:38	    Page 4
ramka.asm



    172	01AC  74 12						     je	@@Exit
    173
    174	01AE  80 F9 20						     cmp cl, 20h
    175	01B1  74 0D						     je	@@Exit
    176
    177	01B3  BE 000A						     mov si, 10d
    178	01B6  F7 E6						     mul si
    179
    180	01B8  02 C1						     add al, cl
    181	01BA  2C 30						     sub al, 30h
    182
    183	01BC  FE C3						     inc bl
    184	01BE  EB E7						     jmp @@Loop
    185
    186	01C0  FE C3		     @@Exit:		     inc bl
    187	01C2  C3						     ret
    188	01C3							     endp
    189
    190
    191				     include ..\LIBA.ASM
1   192	01C3			     .data
1   193	01DA  0A 54 68 69 73 20	73+	     ErrorMsg: db 0Ah, 'This symbol is not allowed!$'
    194	      79 6D 62 6F 6C 20	69+
    195	      73 20 6E 6F 74 20	61+
    196	      6C 6C 6F 77 65 64	21+
    197	      24
1   198
1   199	01F7			     .code
1   200
1   201				     ;-----------------------------------------------------------
1   202				     ; Print binary of value
1   203				     ;-----------------------------------------------------------
1   204				     ; Entry:	     AX	= value	to convert to
1   205				     ;		     BX	= coordinates to print on string
1   206				     ; Exit:	     None
1   207				     ; Expects:	     ES	-> videomem (b800h)
1   208				     ; Destroys:     BX, CX, DL
1   209				     ;-----------------------------------------------------------
1   210	01C3			     ToBin   proc
1   211
1   212	01C3  BA 8000			     mov dx, 8000h	     ; dx = 2 ** 15
1   213	01C6  EB 17 90			     jmp @@NewByte
1   214
1   215	01C9			     @@Print1:
1   216	01C9  26: C7 07	0531		     mov es:[bx], 0531h	     ; put 0 to	videomem
1   217	01CE  83 C3 02			     add bx, 2		     ; bx += 2
1   218	01D1  EB 17 90			     jmp @@Next
1   219
1   220	01D4			     @@Print0:
1   221	01D4  26: C7 07	0530		     mov es:[bx], 0530h	     ; put 0 to	videomem
1   222	01D9  83 C3 02			     add bx, 2		     ; bx += 2
1   223	01DC  EB 0C 90			     jmp @@Next
1   224
1   225	01DF			     @@NewByte:
1   226	01DF  8B C8			     mov cx, ax		     ; cx = ax
1   227	01E1  23 CA			     and cx, dx		     ; cx && dx
1   228
Turbo Assembler	 Version 4.1	    02/20/23 14:12:38	    Page 5
ramka.asm



1   229	01E3  83 F9 00			     cmp cx, 0h		     ; if cx ==	0: print(0) else: print(1)
1   230	01E6  74 EC			     je	 @@Print0
1   231	01E8  EB DF			     jmp @@Print1
1   232
1   233	01EA			     @@Next:
1   234	01EA  83 FA 01			     cmp dx, 1h		     ; if dx ==	1: return
1   235	01ED  74 04			     je	@@Exit
1   236
1   237	01EF  D1 EA			     shr dx, 1		     ; dx >> 1
1   238	01F1  EB EC			     jmp @@NewByte
1   239
1   240	01F3  C3		     @@Exit: ret
1   241	01F4				     endp
1   242
1   243				     ;-----------------------------------------------------------
1   244				     ; Print hex of value
1   245				     ;-----------------------------------------------------------
1   246				     ; Entry:	     SI	= value	to convert to
1   247				     ;		     BX	= coordinates to print in cmd
1   248				     ; Exit:	     None
1   249				     ; Expects:	     ES	-> videomem (b800h)
1   250				     ; Destroys:     AX, BX, CX, DX, DI, BP, SP
1   251				     ;----------------------------------------------------------
1   252	01F4			     ToHex   proc
1   253
1   254	01F4  BA 8000			     mov dx, 8000h	     ; first byte is 1 others are 0
1   255	01F7  B9 0004			     mov cx, 0004h	     ; cx = 0
1   256	01FA  BF 0000			     mov di, 0000h
1   257
1   258	01FD			     @@ReadBytes:
1   259	01FD  FE C5			     inc ch		     ; ch++ (byte counter in 4th)
1   260	01FF  80 FD 05			     cmp ch, 05h	     ; if ch ==	5: exit	else: continue
1   261	0202  74 45			     je	@@Exit
1   262	0204  EB 01 90			     jmp @@Proceed4bit
1   263
1   264	0207			     @@Proceed4bit:
1   265	0207  8B C6			     mov ax, si		     ; ax = si (given value)
1   266	0209  23 C2			     and ax, dx		     ; ax && ax
1   267
1   268	020B  3D 0000			     cmp ax, 00h	     ; if ax ==	0: SkipMul()
1   269	020E  74 0E			     je	@@SkipMul
1   270
1   271	0210  B0 01			     mov al, 01h	     ; al = 1 (value to	add)
1   272	0212  B4 00			     mov ah, 00h	     ; ah = 0 (needed not to brake ax)
1   273	0214  80 E9 01			     sub cl, 1		     ; cl-- (bit num)
1   274	0217  D2 E0			     shl al, cl		     ; al = 2^cl
1   275	0219  80 C1 01			     add cl, 1		     ; cl++
1   276	021C  03 F8			     add di, ax		     ; di += ax	(di - result to	print)
1   277
1   278	021E			     @@SkipMul:
1   279	021E  80 E9 01			     sub cl, 1		     ; cl--
1   280	0221  D1 EA			     shr dx, 1		     ; dx /= 2
1   281
1   282	0223  80 F9 00			     cmp cl, 00h
1   283	0226  74 02			     je	@@PrintSymbol
1   284	0228  EB DD			     jmp @@Proceed4bit	     ; if cl ==	0: Print else continue reading byte
1   285
Turbo Assembler	 Version 4.1	    02/20/23 14:12:38	    Page 6
ramka.asm



1   286	022A			     @@PrintSymbol:
1   287	022A  8B C7			     mov ax, di		     ; ax = di
1   288	022C  B4 05			     mov ah, 05h	     ; ah = 05h	(COLOR)
1   289
1   290	022E  3C 0A			     cmp al, 10d	     ; if al >=	10: PrintAsLetter
1   291	0230  73 05			     jae @@LetterPrint
1   292
1   293	0232  04 30			     add al, 30h	     ; else: al	+= 30h -> print	as ASCII
1   294	0234  EB 06 90			     jmp @@ContinuePrint
1   295
1   296	0237			     @@LetterPrint:
1   297	0237  04 37			     add al, 37h	     ; al += 37	-> add letter as ASCII
1   298	0239  EB 01 90			     jmp @@ContinuePrint
1   299
1   300	023C			     @@ContinuePrint:
1   301	023C  26: 89 07			     mov es:[bx], ax	     ; put ax to videomem
1   302	023F  83 C3 02			     add bx, 2		     ; bx += 2
1   303	0242  BF 0000			     mov di, 00h	     ; di = 0
1   304	0245  B1 04			     mov cl, 04h	     ; cl = 4 (byte count)
1   305	0247  EB B4			     jmp @@ReadBytes
1   306
1   307	0249			     @@Exit:
1   308	0249  C3			     ret
1   309	024A				     endp
1   310
1   311
1   312				     ;-----------------------------------------------------------
1   313				     ; Print dec of value
1   314				     ;-----------------------------------------------------------
1   315				     ; Entry:	     SI	= value	to convert to
1   316				     ;		     BX	= coordinates to print on string
1   317				     ; Exit:	     None
1   318				     ; Expects:	     ES	-> videomem (b800h)
1   319				     ; Destroys:     AX, BX, CX, DX, DI
1   320				     ;-----------------------------------------------------------
1   321	024A			     ToDec   proc
1   322
1   323	024A  8B C6			     mov ax, si		     ; ax = si
1   324	024C  BF 0006			     mov di, 06h	     ; amount of digits
1   325
1   326	024F			     @@PrintSymb:
1   327	024F  B9 000A			     mov cx, 000Ah	     ; cx = 10
1   328	0252  F7 F1			     div cx		     ; ax = ax / 10, dx	= ax % 10
1   329
1   330	0254  80 C2 30			     add dl, 30h	     ; dl += 30	(symb ascii)
1   331	0257  B6 05			     mov dh, 05h	     ; dh = 5	(color)
1   332
1   333	0259  26: 89 17			     mov es:[bx], dx
1   334	025C  BA 0000			     mov dx, 0000h	     ; print on	screen
1   335
1   336	025F  83 EB 02			     sub bx, 2		     ; bx -= 2
1   337	0262  83 EF 01			     sub di, 1		     ; di --
1   338
1   339	0265  83 FF 00			     cmp di, 0
1   340	0268  74 02			     je	@@Exit
1   341
1   342	026A  EB E3			     jmp @@PrintSymb
Turbo Assembler	 Version 4.1	    02/20/23 14:12:38	    Page 7
ramka.asm



1   343
1   344	026C  C3		     @@Exit: ret
1   345	026D				     endp
1   346
1   347
1   348				     ;------------------------------------------------------------
1   349				     ; Reads dec number
1   350				     ;------------------------------------------------------------
1   351				     ; Entry:	     None
1   352				     ; Exit:	     DI	- dec value
1   353				     ; Expects:	     None
1   354				     ; Destroys:     AX, CX, DI, SI
1   355				     ;------------------------------------------------------------
1   356	026D			     IntInput	     proc
1   357
1   358	026D  BF 0000				     mov di, 0000h	     ; di = 0
1   359	0270  B9 0005				     mov cx, 0005h	     ; cx = 5 (max amount of numbers)
1   360	0273  EB 0B 90				     jmp @@Loop
1   361	0276			     @@OnError:
1   362	0276  BA 01DAr				     mov dx, offset ErrorMsg
1   363	0279  B4 09				     mov ah, 09h
1   364	027B  CD 21				     int 21h		     ; print Error message
1   365
1   366	027D  EB 2E 90				     jmp @@Exit
1   367
1   368	0280  B4 01		     @@Loop:	     mov ah, 01h
1   369	0282  CD 21				     int 21h		     ; reading char -> al
1   370
1   371	0284  3C 0D				     cmp al, 0Dh
1   372	0286  74 25				     je	@@Exit
1   373
1   374	0288  3C 13				     cmp al, 13h
1   375	028A  74 21				     je	@@Exit		     ; if al ==	'\n' ||	'\r': retunr
1   376
1   377	028C  3C 30				     cmp al, 30h
1   378	028E  72 E6				     jb	@@OnError
1   379
1   380	0290  3C 40				     cmp al, 40h
1   381	0292  77 E2				     ja	@@OnError	     ; if !alnum(al): OnError()
1   382
1   383	0294  2C 30				     sub al, 30h	     ; al -= 30	(ascii -> number)
1   384	0296  B4 00				     mov ah, 00h
1   385
1   386	0298  8B F0				     mov si, ax
1   387	029A  8B C7				     mov ax, di
1   388	029C  8B FE				     mov di, si		     ; swap (ax, di)
1   389
1   390	029E  BE 000A				     mov si, 10d
1   391	02A1  F7 E6				     mul si		     ; ax *= 10
1   392
1   393	02A3  03 C7				     add ax, di		     ; ax += di	(last number)
1   394
1   395	02A5  8B F0				     mov si, ax
1   396	02A7  8B C7				     mov ax, di
1   397	02A9  8B FE				     mov di, si		     ; swap (ax, di)
1   398
1   399	02AB  E2 D3				     loop @@Loop
Turbo Assembler	 Version 4.1	    02/20/23 14:12:38	    Page 8
ramka.asm



1   400
1   401	02AD  C3		     @@Exit:	     ret
1   402	02AE					     endp
1   403
1   404
1   405				     ;-------------------------------------------------------------
1   406				     ; Draws rectangle on screen with given borders
1   407				     ;-------------------------------------------------------------
1   408				     ; Entry:	     AX	- horizontal border
1   409				     ;		     DX	- vertical   border
1   410				     ;		     BX	- left highest point
1   411				     ;		     CX	- horizontal size
1   412				     ;		     DI	- vertical   size
1   413				     ; Exit:	     None
1   414				     ; Expects:	     ES	-> videomem (0b800h)
1   415				     ; Destroys:     BP, SI
1   416				     ;-------------------------------------------------------------
1   417	02AE			     DrawRect	     proc
1   418
1   419	02AE  55				     push bp
1   420	02AF  8B EC				     mov bp, sp
1   421
1   422	02B1  8B 5E 1A				     mov bx, [bp + 26d]
1   423	02B4  8B 7E 18				     mov di, [bp + 24d]
1   424	02B7  8B 4E 16				     mov cx, [bp + 22d]
1   425
1   426	02BA  83 E9 02				     sub cx, 2
1   427	02BD  8B F7				     mov si, di		     ; i = di
1   428	02BF  EB 0C 90				     jmp @@MainCycle
1   429
1   430	02C2  83 EE 01		     @@IterateI:     sub si, 1		     ; i--
1   431
1   432	02C5  2B D9				     sub bx, cx		     ; start vertically
1   433	02C7  2B D9				     sub bx, cx
1   434	02C9  81 C3 00A0			     add bx, 160d	     ; new line
1   435
1   436	02CD  8B C1		     @@MainCycle:    mov ax, cx		     ; j = cx
1   437
1   438	02CF  83 EB 02				     sub bx, 2		     ; bx -= 2 (then i += 2 to print)
1   439
1   440	02D2  83 FE 00				     cmp si, 00h
1   441	02D5  75 39				     jne @@DrawV
1   442
1   443	02D7  83 C3 02		     @@ContinueMain: add bx, 2		     ; bx += 2 (watch previous comment)
1   444	02DA  83 FE 00				     cmp si, 00h
1   445	02DD  74 79				     je	@@Exit		     ; if i == 0: exit(0)
1   446
1   447	02DF  8B 56 04		     @@SecondCycle:  mov dx, [bp + 4]
1   448	02E2  26: 89 17				     mov es:[bx], dx
1   449
1   450	02E5  3D 0000				     cmp ax, 00h
1   451	02E8  74 4A				     je	@@DrawRightV	     ; print left border (WORKS!)
1   452
1   453	02EA  3B F7				     cmp si, di
1   454	02EC  74 12				     je	@@DrawH		     ; draw highest border
1   455
1   456	02EE  83 FE 01				     cmp si, 01h
Turbo Assembler	 Version 4.1	    02/20/23 14:12:38	    Page 9
ramka.asm



1   457	02F1  74 15				     je	@@DrawLower	     ; draw lowest border
1   458
1   459	02F3			     @@ContinueSecond:
1   460	02F3  3D 0000				     cmp ax, 00h
1   461	02F6  74 CA				     je	@@IterateI	     ; if j == 0: i++
1   462
1   463	02F8  2D 0001				     sub ax, 1		     ; else: j--
1   464	02FB  83 C3 02				     add bx, 2		     ; bx += 2
1   465	02FE  EB DF				     jmp @@SecondCycle
1   466
1   467	0300  8B 56 14		     @@DrawH:	     mov dx, [bp + 20d]
1   468	0303  26: 89 17				     mov es:[bx], dx
1   469	0306  EB EB				     jmp @@ContinueSecond
1   470
1   471	0308  8B 56 10		     @@DrawLower:    mov dx, [bp + 16d]
1   472	030B  26: 89 17				     mov es:[bx], dx
1   473	030E  EB E3				     jmp @@ContinueSecond
1   474
1   475	0310  83 FE 01		     @@DrawV:	     cmp si, 01h
1   476	0313  74 0F				     je	@@LowLeft
1   477	0315  3B F7				     cmp si, di
1   478	0317  74 03				     je	@@HighLeft
1   479	0319  EB 11 90				     jmp @@Left
1   480
1   481	031C  8B 56 0C		     @@HighLeft:     mov dx, [bp + 12d]
1   482	031F  26: 89 17				     mov es:[bx], dx
1   483	0322  EB B3				     jmp @@ContinueMain
1   484
1   485	0324  8B 56 08		     @@LowLeft:	     mov dx, [bp + 8d]
1   486	0327  26: 89 17				     mov es:[bx], dx
1   487	032A  EB AB				     jmp @@ContinueMain
1   488
1   489	032C  8B 56 0E		     @@Left:	     mov dx, [bp + 14d]
1   490	032F  26: 89 17				     mov es:[bx], dx
1   491	0332  EB A3				     jmp @@ContinueMain
1   492
1   493	0334  83 FE 01		     @@DrawRightV:   cmp si, 01h
1   494	0337  74 07				     je	@@LowRight
1   495	0339  3B F7				     cmp si, di
1   496	033B  74 0B				     je	@@HighRight
1   497	033D  EB 11 90				     jmp @@Right
1   498
1   499	0340  8B 56 06		     @@LowRight:     mov dx, [bp + 6d]
1   500	0343  26: 89 17				     mov es:[bx], dx
1   501	0346  EB AB				     jmp @@ContinueSecond
1   502
1   503	0348  8B 56 0A		     @@HighRight:    mov dx, [bp + 10d]
1   504	034B  26: 89 17				     mov es:[bx], dx
1   505	034E  EB A3				     jmp @@ContinueSecond
1   506
1   507	0350  8B 56 12		     @@Right:	     mov dx, [bp + 18d]
1   508	0353  26: 89 17				     mov es:[bx], dx
1   509	0356  EB 9B				     jmp @@ContinueSecond
1   510
1   511	0358  5D		     @@Exit:	     pop bp
1   512	0359  C3				     ret
1   513	035A					     endp
Turbo Assembler	 Version 4.1	    02/20/23 14:12:38	    Page 10
ramka.asm



1   514
1   515
1   516				     ;-----------------------------------------------------------
1   517				     ; Put symbol with given ascii to videomem
1   518				     ;-----------------------------------------------------------
1   519				     ; Entry:	     BX	= coordinates where to print symbol
1   520				     ;		     CX	= symbol itself
1   521				     ; Exit:	     None
1   522				     ; Expects:	     ES	-> videomem (b800h)
1   523				     ; Destroys:     None
1   524				     ;-----------------------------------------------------------
1   525	035A			     PutChar proc
1   526
1   527	035A  26: 89 0F			     mov es:[bx], cx	     ; put symbol to videomem
1   528
1   529	035D  C3			     ret
1   530	035E				     endp
1   531
    532
    533				     end     Start
Turbo Assembler	 Version 4.1	    02/20/23 14:12:38	    Page 11
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "02/20/23"
??FILENAME			  Text	 "ramka	  "
??TIME				  Text	 "14:12:38"
??VERSION			  Number 040A
@32BIT				  Text	 0
@@CALL				  Near	 DGROUP:0196
@@CONTINUEMAIN			  Near	 DGROUP:02D7
@@CONTINUEPRINT			  Near	 DGROUP:023C
@@CONTINUESECOND		  Near	 DGROUP:02F3
@@DRAWH				  Near	 DGROUP:0300
@@DRAWLOWER			  Near	 DGROUP:0308
@@DRAWRIGHTV			  Near	 DGROUP:0334
@@DRAWV				  Near	 DGROUP:0310
@@EXIT				  Near	 DGROUP:01C0
@@EXIT				  Near	 DGROUP:01F3
@@EXIT				  Near	 DGROUP:0249
@@EXIT				  Near	 DGROUP:026C
@@EXIT				  Near	 DGROUP:02AD
@@EXIT				  Near	 DGROUP:0358
@@HIGHLEFT			  Near	 DGROUP:031C
@@HIGHRIGHT			  Near	 DGROUP:0348
@@ITERATEI			  Near	 DGROUP:02C2
@@LEFT				  Near	 DGROUP:032C
@@LETTERPRINT			  Near	 DGROUP:0237
@@LOOP				  Near	 DGROUP:01A7
@@LOOP				  Near	 DGROUP:0280
@@LOOP1				  Near	 DGROUP:0137
@@LOOP2				  Near	 DGROUP:0153
@@LOOP3				  Near	 DGROUP:016F
@@LOOP4				  Near	 DGROUP:018B
@@LOWLEFT			  Near	 DGROUP:0324
@@LOWRIGHT			  Near	 DGROUP:0340
@@MAINCYCLE			  Near	 DGROUP:02CD
@@NEWBYTE			  Near	 DGROUP:01DF
@@NEXT				  Near	 DGROUP:01EA
@@ONERROR			  Near	 DGROUP:0276
@@PARSE1			  Near	 DGROUP:0134
@@PARSE2			  Near	 DGROUP:0150
@@PARSE3			  Near	 DGROUP:016C
@@PARSE4			  Near	 DGROUP:0188
@@PRINT0			  Near	 DGROUP:01D4
@@PRINT1			  Near	 DGROUP:01C9
@@PRINTSYMB			  Near	 DGROUP:024F
@@PRINTSYMBOL			  Near	 DGROUP:022A
@@PROCEED4BIT			  Near	 DGROUP:0207
@@READBYTES			  Near	 DGROUP:01FD
@@RIGHT				  Near	 DGROUP:0350
@@SECONDCYCLE			  Near	 DGROUP:02DF
@@SKIPMUL			  Near	 DGROUP:021E
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0101H
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
Turbo Assembler	 Version 4.1	    02/20/23 14:12:38	    Page 12
Symbol Table



@DATASIZE			  Text	 0
@FILENAME			  Text	 RAMKA
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
DRAWRECT			  Near	 DGROUP:02AE
ERRORMSG			  Near	 DGROUP:01DA
ERROR_STR			  Near	 DGROUP:01B5
FIFTH				  Near	 DGROUP:0083
FIRST				  Near	 DGROUP:0000
FORTH				  Near	 DGROUP:0063
INSIDE				  Near	 DGROUP:01A0
INTINPUT			  Near	 DGROUP:026D
LB				  Near	 DGROUP:00F7
LHC				  Near	 DGROUP:0130
LLC				  Near	 DGROUP:0169
LS				  Near	 DGROUP:0111
PUTCHAR				  Near	 DGROUP:035A
READNUMBER			  Near	 DGROUP:01A1
RHC				  Near	 DGROUP:014C
RLC				  Near	 DGROUP:0184
RS				  Near	 DGROUP:00D7
SECOND				  Near	 DGROUP:0022
START				  Near	 DGROUP:0100
THIRD				  Near	 DGROUP:0043
TOBIN				  Near	 DGROUP:01C3
TODEC				  Near	 DGROUP:024A
TOHEX				  Near	 DGROUP:01F4
UB				  Near	 DGROUP:00BE

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  01F7 Word	  Public  DATA
  _TEXT				  16  035E Word	  Public  CODE
