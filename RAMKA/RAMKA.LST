Turbo Assembler	 Version 4.1	    02/25/23 19:38:38	    Page 1
ramka.asm



      1	0000			     .model tiny
      2
      3	0000			     .data
      4	0000  A0*(24)			     printText:	     db	160d dup('$')
      5	00A0  09*(0000)			     arguments:	     dw	9 dup(0)
      6
      7	00B2			     .code
      8
      9				     org 100h
     10
     11				     locals @@
     12
     13
     14	0100			     Start:
     15	0100  BB 0082						     mov bx, 0082h
     16	0103  E8 00EB						     call ReadNumber		     ; ax -> line
     17
     18	0106  BE 00A0						     mov si, 160d
     19	0109  F7 E6						     mul si				     ; ax *= 10
     20	010B  8B F8						     mov di, ax				     ; si = ax
     21
     22	010D  E8 00E1						     call ReadNumber
     23	0110  03 C0						     add ax, ax
     24	0112  03 F8						     add di, ax
     25	0114  57						     push di				     ; coordinates ready
     26
     27	0115  E8 00D9						     call ReadNumber
     28	0118  50						     push ax				     ; height
     29
     30	0119  E8 00D5						     call ReadNumber
     31	011C  50						     push ax				     ; length
     32
     33	011D  E8 00D1						     call ReadNumber		     ; type
     34
     35	0120  3D 0001						     cmp ax, 01h
     36	0123  74 0F						     je	@@Parse1
     37	0125  3D 0002						     cmp ax, 02h
     38	0128  74 28						     je	@@Parse2
     39	012A  3D 0003						     cmp ax, 03h
     40	012D  74 65						     je	@@Parse3
     41	012F  3D 0004						     cmp ax, 04h
     42	0132  74 78						     je	@@Parse4
     43
     44				     ; MODE = 1	;
     45	0134			     @@Parse1:
     46	0134  B9 0008						     mov cx, 08h			     ; counter for loop
     47	0137  BF 00A0r						     lea di, arguments
     48
     49								     ; READING ASCII ;
     50	013A  8A 07						     mov byte ptr al, [bx]   ; al = ascii code
     51	013C  FE C3						     inc bl
     52	013E  FE C3						     inc bl				     ; bl += 2
     53
     54	0140  B4 05						     mov ah, 05h
     55
     56	0142  89 05		     @@Loop1:		     mov [di], ax
     57	0144  47						     inc di
Turbo Assembler	 Version 4.1	    02/25/23 19:38:38	    Page 2
ramka.asm



     58	0145  47						     inc di
     59	0146  E2 FA						     loop @@Loop1		     ; symb -> argument	x8
     60
     61	0148  C7 05 0020					     mov word ptr [di],	0020h			     ; inside =	space
     62	014C  BF 00A0r						     lea di, arguments
     63
     64	014F  EB 72 90						     jmp @@Call
     65
     66				     ; MODE = 2	;
     67	0152			     @@Parse2:
     68	0152  B9 0008						     mov cx, 08h			     ; counter for loop
     69	0155  BF 00A0r						     lea di, arguments
     70
     71								     ; READING ASCII ;
     72	0158  8A 07						     mov byte ptr al, [bx]   ; al = ascii code
     73	015A  FE C3						     inc bl
     74	015C  FE C3						     inc bl				     ; bl += 2
     75
     76	015E  B4 05						     mov ah, 05h
     77
     78	0160  89 05		     @@Loop2:		     mov [di], ax
     79	0162  47						     inc di
     80	0163  47						     inc di
     81	0164  E2 FA						     loop @@Loop2		     ; symb -> argument	x8
     82
     83	0166  C7 05 0020					     mov word ptr [di],	0020h ;	inside = space
     84	016A  BF 00A0r						     lea di, arguments
     85
     86	016D  59						     pop cx				     ; length
     87	016E  5A						     pop dx				     ; height
     88
     89	016F  8B F3						     mov si, bx				     ; address of argument  +
     90				     cmd
     91
     92	0171  BB B800						     mov bx, 0b800h
     93	0174  8E C3						     mov es, bx				     ; es -> 0b800h
     94	0176  5B						     pop bx				     ; coordinates
     95
     96	0177  51						     push cx				     ; save len
     97	0178  53						     push bx				     ; save coords
     98
     99	0179  41						     inc cx
    100	017A  41						     inc cx
    101	017B  42						     inc dx
    102	017C  42						     inc dx
    103	017D  81 EB 00A2					     sub bx, 162d
    104
    105	0181  56						     push si				     ; address of argument  +
    106				     cmd
    107	0182  E8 0191						     call DrawRect		     ; draw bigger frame
    108
    109	0185  5E						     pop si				     ; args
    110	0186  5B						     pop bx				     ; coords
    111	0187  59						     pop cx				     ; length
    112	0188  4A						     dec dx
    113	0189  4A						     dec dx
    114	018A  53						     push bx				     ; coords
Turbo Assembler	 Version 4.1	    02/25/23 19:38:38	    Page 3
ramka.asm



    115	018B  52						     push dx				     ; height
    116	018C  51						     push cx
    117	018D  8B DE						     mov bx, si
    118	018F  EB 32 90						     jmp @@Call
    119
    120	0192  CD 20						     int 20h				     ; exit(0)
    121
    122				     ; MODE = 3	;
    123	0194  B9 0008		     @@Parse3:		     mov cx, 08h
    124	0197  BF 00A0r						     lea di, arguments
    125
    126	019A  C7 05 052A	     @@Loop3:		     mov word ptr [di],	052ah
    127	019E  47						     inc di
    128	019F  47						     inc di
    129	01A0  E2 F8						     loop @@Loop3
    130
    131	01A2  C7 05 0020					     mov word ptr [di],	0020h			     ; inside =	    +
    132				     space
    133	01A6  BF 00A0r						     lea di, arguments
    134
    135	01A9  EB 18 90						     jmp @@Call
    136
    137				     ; MODE = 4	;
    138	01AC  B9 0009		     @@Parse4:		     mov cx, 09h
    139	01AF  BF 00A0r						     lea di, arguments
    140
    141	01B2  8A 07		     @@Loop4:		     mov byte ptr al, [bx]   ; al = ascii code
    142	01B4  FE C3						     inc bl				     ; bl++
    143	01B6  B4 05						     mov ah, 05h
    144
    145	01B8  89 05						     mov [di], ax
    146	01BA  47						     inc di
    147	01BB  47						     inc di
    148
    149	01BC  E2 F4						     loop @@Loop4
    150
    151	01BE  BF 00A0r						     lea di, arguments
    152	01C1  FE C3						     inc bl				     ; move to next symbol
    153
    154
    155	01C3  59		     @@Call:		     pop cx				     ; length
    156	01C4  5A						     pop dx				     ; height
    157
    158	01C5  8A 07						     mov byte ptr al, [bx]   ; al = ascii code
    159	01C7  FE C3						     inc bl
    160
    161	01C9  3C 60						     cmp al, 60h
    162	01CB  74 03						     je	@@StartRead
    163	01CD  EB 0A 90						     jmp @@Continue
    164
    165	01D0  53		     @@StartRead:    push bx
    166	01D1  51						     push cx
    167	01D2  57						     push di
    168	01D3  E8 003D						     call ReadText
    169	01D6  5F						     pop di
    170	01D7  59						     pop cx
    171	01D8  5B						     pop bx
Turbo Assembler	 Version 4.1	    02/25/23 19:38:38	    Page 4
ramka.asm



    172
    173	01D9  BB B800		     @@Continue:	     mov bx, 0b800h
    174	01DC  8E C3						     mov es, bx				     ; es -> 0b800h
    175	01DE  5B						     pop bx				     ; coordinates
    176
    177	01DF  53						     push bx				     ; save coords
    178	01E0  52						     push dx				     ; save height
    179	01E1  51						     push cx				     ; save length
    180
    181	01E2  E8 0131						     call DrawRect
    182
    183	01E5  59						     pop cx
    184	01E6  5A						     pop dx
    185	01E7  5B						     pop bx
    186	01E8  BE 0000r						     lea si, printText
    187	01EB  E8 01C8						     call RectText
    188
    189	01EE  CD 20						     int 20h				     ; exit(0)
    190	01F0  C3						     ret
    191
    192				     ;-----------------------------------------------------------
    193				     ; Reads command line int arguments
    194				     ;-----------------------------------------------------------
    195				     ; Entry:		     BX	= position in command line (starting 80h)
    196				     ; Exit:		     AX	- read value
    197				     ; Expects:	     None
    198				     ; Destroys:     AX, BX, CL, DX, SI
    199				     ;-----------------------------------------------------------
    200	01F1			     ReadNumber		     proc
    201	01F1  B8 0000						     mov ax, 00h
    202	01F4  BA 0000						     mov dx, 00h				     ; dx:ax = 0
    203
    204	01F7  8A 0F		     @@Loop:		     mov byte ptr cl, [bx]	     ; cl = arg	symb
    205	01F9  80 F9 0D						     cmp cl, 0Dh
    206	01FC  74 12						     je	@@Exit
    207
    208	01FE  80 F9 20						     cmp cl, 20h
    209	0201  74 0D						     je	@@Exit					     ; if cl ==	' ' +
    210				     or	0D: exit()
    211
    212	0203  BE 000A						     mov si, 10d
    213	0206  F7 E6						     mul si					     ; ax *= 10
    214
    215	0208  02 C1						     add al, cl
    216	020A  2C 30						     sub al, 30h				     ; ax += read   +
    217				     ascii.toChar()
    218
    219	020C  FE C3						     inc bl					     ; bx++
    220	020E  EB E7						     jmp @@Loop
    221
    222	0210  FE C3		     @@Exit:		     inc bl					     ; bx++
    223	0212  C3						     ret
    224	0213							     endp
    225
    226
    227				     ;-----------------------------------------------------------
    228				     ; Reads text from command line arguments
Turbo Assembler	 Version 4.1	    02/25/23 19:38:38	    Page 5
ramka.asm



    229				     ;-----------------------------------------------------------
    230				     ; Entry:		     BX	= position in command line (starting 80h)
    231				     ; Exit:		     printText
    232				     ; Expects:	     None
    233				     ; Destroys:     BX, CX, DI
    234				     ;-----------------------------------------------------------
    235	0213			     ReadText		     proc
    236	0213  BF 0000r						     lea di, printText
    237
    238	0216  8A 0F		     @@Loop:		     mov byte ptr cl, [bx]	     ; cl = arg	symb
    239
    240	0218  80 F9 60						     cmp cl, 60h
    241	021B  74 07						     je	@@Exit					     ; if al ==	':  +
    242				     exit()
    243
    244	021D  88 0D						     mov [di], cl
    245
    246	021F  47						     inc di					     ; di++
    247	0220  FE C3						     inc bl					     ; bx++
    248	0222  EB F2						     jmp @@Loop
    249
    250	0224  B0 24		     @@Exit:		     mov al, '$'
    251	0226  88 05						     mov [di], al
    252	0228  FE C3						     inc bl					     ; bx++
    253
    254	022A  C3						     ret
    255	022B							     endp
    256
    257
    258				     include ..\LIBA.ASM
1   259	022B			     .data
1   260	00B2  0A 54 68 69 73 20	73+	     ErrorMsg: db 0Ah, 'This symbol is not allowed!$'
    261	      79 6D 62 6F 6C 20	69+
    262	      73 20 6E 6F 74 20	61+
    263	      6C 6C 6F 77 65 64	21+
    264	      24
1   265
1   266	00CF			     .code
1   267
1   268				     ;-----------------------------------------------------------
1   269				     ; Print binary of value
1   270				     ;-----------------------------------------------------------
1   271				     ; Entry:		     AX	= value	to convert to
1   272				     ;				     BX	= coordinates to print on string
1   273				     ; Exit:		     None
1   274				     ; Expects:	     ES	-> videomem (b800h)
1   275				     ; Destroys:     BX, CX, DL
1   276				     ;-----------------------------------------------------------
1   277	022B			     ToBin	     proc
1   278
1   279	022B  BA 8000					     mov dx, 8000h	     ; dx = 2 ** 15
1   280	022E  EB 17 90					     jmp @@NewByte
1   281
1   282	0231			     @@Print1:
1   283	0231  26: C7 07	0531				     mov es:[bx], 0531h	     ; put 0 to	videomem
1   284	0236  83 C3 02					     add bx, 2			     ; bx += 2
1   285	0239  EB 17 90					     jmp @@Next
Turbo Assembler	 Version 4.1	    02/25/23 19:38:38	    Page 6
ramka.asm



1   286
1   287	023C			     @@Print0:
1   288	023C  26: C7 07	0530				     mov es:[bx], 0530h	     ; put 0 to	videomem
1   289	0241  83 C3 02					     add bx, 2			     ; bx += 2
1   290	0244  EB 0C 90					     jmp @@Next
1   291
1   292	0247			     @@NewByte:
1   293	0247  8B C8					     mov cx, ax			     ; cx = ax
1   294	0249  23 CA					     and cx, dx			     ; cx && dx
1   295
1   296	024B  83 F9 00					     cmp cx, 0h			     ; if cx ==	0: print(0) else: print(1)
1   297	024E  74 EC					     je	 @@Print0
1   298	0250  EB DF					     jmp @@Print1
1   299
1   300	0252			     @@Next:
1   301	0252  83 FA 01					     cmp dx, 1h			     ; if dx ==	1: return
1   302	0255  74 04					     je	@@Exit
1   303
1   304	0257  D1 EA					     shr dx, 1			     ; dx >> 1
1   305	0259  EB EC					     jmp @@NewByte
1   306
1   307	025B  C3		     @@Exit:	     ret
1   308	025C						     endp
1   309
1   310				     ;-----------------------------------------------------------
1   311				     ; Print hex of value
1   312				     ;-----------------------------------------------------------
1   313				     ; Entry:	     SI	= value	to convert to
1   314				     ;			     BX	= coordinates to print in cmd
1   315				     ; Exit:	     None
1   316				     ; Expects:	     ES	-> videomem (b800h)
1   317				     ; Destroys:     AX, BX, CX, DX, DI, BP, SP
1   318				     ;----------------------------------------------------------
1   319	025C			     ToHex   proc
1   320
1   321	025C  BA 8000						     mov dx, 8000h	     ; first byte is 1 others are 0
1   322	025F  B9 0004						     mov cx, 0004h	     ; cx = 0
1   323	0262  BF 0000						     mov di, 0000h
1   324
1   325	0265			     @@ReadBytes:
1   326	0265  FE C5						     inc ch			     ; ch++ (byte counter in 4th)
1   327	0267  80 FD 05						     cmp ch, 05h		     ; if ch ==	5: exit	else:	    +
    328				     continue
1   329	026A  74 45						     je	@@Exit
1   330	026C  EB 01 90						     jmp @@Proceed4bit
1   331
1   332	026F			     @@Proceed4bit:
1   333	026F  8B C6						     mov ax, si			     ; ax = si (given value)
1   334	0271  23 C2						     and ax, dx			     ; ax && ax
1   335
1   336	0273  3D 0000						     cmp ax, 00h		     ; if ax ==	0: SkipMul()
1   337	0276  74 0E						     je	@@SkipMul
1   338
1   339	0278  B0 01						     mov al, 01h		     ; al = 1 (value to	add)
1   340	027A  B4 00						     mov ah, 00h		     ; ah = 0 (needed not to brake  +
    341				     ax)
1   342	027C  80 E9 01						     sub cl, 1			     ; cl-- (bit num)
Turbo Assembler	 Version 4.1	    02/25/23 19:38:38	    Page 7
ramka.asm



1   343	027F  D2 E0						     shl al, cl			     ; al = 2^cl
1   344	0281  80 C1 01						     add cl, 1			     ; cl++
1   345	0284  03 F8						     add di, ax			     ; di += ax	(di - result to	    +
    346				     print)
1   347
1   348	0286			     @@SkipMul:
1   349	0286  80 E9 01						     sub cl, 1			     ; cl--
1   350	0289  D1 EA						     shr dx, 1			     ; dx /= 2
1   351
1   352	028B  80 F9 00						     cmp cl, 00h
1   353	028E  74 02						     je	@@PrintSymbol
1   354	0290  EB DD						     jmp @@Proceed4bit	     ; if cl ==	0: Print else continue	    +
    355				     reading byte
1   356
1   357	0292			     @@PrintSymbol:
1   358	0292  8B C7						     mov ax, di			     ; ax = di
1   359	0294  B4 05						     mov ah, 05h		     ; ah = 05h	(COLOR)
1   360
1   361	0296  3C 0A						     cmp al, 10d		     ; if al >=	10: PrintAsLetter
1   362	0298  73 05						     jae @@LetterPrint
1   363
1   364	029A  04 30						     add al, 30h		     ; else: al	+= 30h -> print	as  +
    365				     ASCII
1   366	029C  EB 06 90						     jmp @@ContinuePrint
1   367
1   368	029F			     @@LetterPrint:
1   369	029F  04 37						     add al, 37h		     ; al += 37	-> add letter as    +
    370				     ASCII
1   371	02A1  EB 01 90						     jmp @@ContinuePrint
1   372
1   373	02A4			     @@ContinuePrint:
1   374	02A4  26: 89 07						     mov es:[bx], ax	     ; put ax to videomem
1   375	02A7  83 C3 02						     add bx, 2			     ; bx += 2
1   376	02AA  BF 0000						     mov di, 00h		     ; di = 0
1   377	02AD  B1 04						     mov cl, 04h		     ; cl = 4 (byte count)
1   378	02AF  EB B4						     jmp @@ReadBytes
1   379
1   380	02B1			     @@Exit:
1   381	02B1  C3						     ret
1   382	02B2							     endp
1   383
1   384
1   385				     ;-----------------------------------------------------------
1   386				     ; Print dec of value
1   387				     ;-----------------------------------------------------------
1   388				     ; Entry:	     SI	= value	to convert to
1   389				     ;		     BX	= coordinates to print on string
1   390				     ; Exit:	     None
1   391				     ; Expects:	     ES	-> videomem (b800h)
1   392				     ; Destroys:     AX, BX, CX, DX, DI
1   393				     ;-----------------------------------------------------------
1   394	02B2			     ToDec	     proc
1   395
1   396	02B2  8B C6					     mov ax, si			     ; ax = si
1   397	02B4  BF 0006					     mov di, 06h		     ; amount of digits
1   398
1   399	02B7			     @@PrintSymb:
Turbo Assembler	 Version 4.1	    02/25/23 19:38:38	    Page 8
ramka.asm



1   400	02B7  B9 000A					     mov cx, 000Ah	     ; cx = 10
1   401	02BA  F7 F1					     div cx			     ; ax = ax / 10, dx	= ax % 10
1   402
1   403	02BC  80 C2 30					     add dl, 30h		     ; dl += 30	(symb ascii)
1   404	02BF  B6 05					     mov dh, 05h		     ; dh = 5	(color)
1   405
1   406	02C1  26: 89 17					     mov es:[bx], dx
1   407	02C4  BA 0000					     mov dx, 0000h	     ; print on	screen
1   408
1   409	02C7  83 EB 02					     sub bx, 2			     ; bx -= 2
1   410	02CA  83 EF 01					     sub di, 1			     ; di --
1   411
1   412	02CD  83 FF 00					     cmp di, 0
1   413	02D0  74 02					     je	@@Exit
1   414
1   415	02D2  EB E3					     jmp @@PrintSymb
1   416
1   417	02D4  C3		     @@Exit:	     ret
1   418	02D5						     endp
1   419
1   420
1   421				     ;------------------------------------------------------------
1   422				     ; Reads dec number
1   423				     ;------------------------------------------------------------
1   424				     ; Entry:	     None
1   425				     ; Exit:	     DI	- dec value
1   426				     ; Expects:	     None
1   427				     ; Destroys:     AX, CX, DI, SI
1   428				     ;------------------------------------------------------------
1   429	02D5			     IntInput	     proc
1   430
1   431	02D5  BF 0000					     mov di, 0000h	     ; di = 0
1   432	02D8  B9 0005					     mov cx, 0005h	     ; cx = 5 (max amount of numbers)
1   433	02DB  EB 0B 90					     jmp @@Loop
1   434	02DE			     @@OnError:
1   435	02DE  BA 00B2r					     mov dx, offset ErrorMsg
1   436	02E1  B4 09					     mov ah, 09h
1   437	02E3  CD 21					     int 21h			     ; print Error message
1   438
1   439	02E5  EB 2E 90					     jmp @@Exit
1   440
1   441	02E8  B4 01		     @@Loop:	     mov ah, 01h
1   442	02EA  CD 21					     int 21h			     ; reading char -> al
1   443
1   444	02EC  3C 0D					     cmp al, 0Dh
1   445	02EE  74 25					     je	@@Exit
1   446
1   447	02F0  3C 13					     cmp al, 13h
1   448	02F2  74 21					     je	@@Exit			     ; if al ==	'\n' ||	'\r': retunr
1   449
1   450	02F4  3C 30					     cmp al, 30h
1   451	02F6  72 E6					     jb	@@OnError
1   452
1   453	02F8  3C 40					     cmp al, 40h
1   454	02FA  77 E2					     ja	@@OnError	     ; if !alnum(al): OnError()
1   455
1   456	02FC  2C 30					     sub al, 30h		     ; al -= 30	(ascii -> number)
Turbo Assembler	 Version 4.1	    02/25/23 19:38:38	    Page 9
ramka.asm



1   457	02FE  B4 00					     mov ah, 00h
1   458
1   459	0300  8B F0					     mov si, ax
1   460	0302  8B C7					     mov ax, di
1   461	0304  8B FE					     mov di, si			     ; swap (ax, di)
1   462
1   463	0306  BE 000A					     mov si, 10d
1   464	0309  F7 E6					     mul si			     ; ax *= 10
1   465
1   466	030B  03 C7					     add ax, di			     ; ax += di	(last number)
1   467
1   468	030D  8B F0					     mov si, ax
1   469	030F  8B C7					     mov ax, di
1   470	0311  8B FE					     mov di, si			     ; swap (ax, di)
1   471
1   472	0313  E2 D3					     loop @@Loop
1   473
1   474	0315  C3		     @@Exit:	     ret
1   475	0316						     endp
1   476
1   477
1   478				     ;-------------------------------------------------------------
1   479				     ; Draws rectangle on screen with given borders
1   480				     ;-------------------------------------------------------------
1   481				     ; Entry:	     DI	- pointer to array with	symbols
1   482				     ;			     BX	- coordinates where to print
1   483				     ;			     CX	- horizontal size
1   484				     ;			     DX	- vertical size
1   485				     ; Exit:	     None
1   486				     ; Expects:	     ES	-> videomem (0b800h)
1   487				     ; Destroys:     AX, BX, CX, SI
1   488				     ;-------------------------------------------------------------
1   489	0316			     DrawRect		     proc
1   490	0316  55						     push bp
1   491
1   492	0317  83 E9 02						     sub cx, 2
1   493	031A  8B F2						     mov si, dx				     ; i = dx
1   494	031C  EB 0C 90						     jmp @@MainCycle
1   495
1   496	031F  83 EE 01		     @@IterateI:	     sub si, 1				     ; i--
1   497
1   498	0322  2B D9						     sub bx, cx				     ; start vertically
1   499	0324  2B D9						     sub bx, cx
1   500	0326  81 C3 00A0					     add bx, 160d		     ; new line
1   501
1   502	032A  8B C1		     @@MainCycle:    mov ax, cx				     ; j = cx
1   503
1   504	032C  83 EB 02						     sub bx, 2				     ; bx -= 2 (then i += 2 +
    505				     to	print)
1   506
1   507	032F  83 FE 00						     cmp si, 00h
1   508	0332  75 39						     jne @@DrawV
1   509
1   510	0334  83 C3 02		     @@ContinueMain: add bx, 2				     ; bx += 2 (watch previous comment)
1   511	0337  83 FE 00						     cmp si, 00h
1   512	033A  74 78						     je	@@Exit				     ; if i == 0: exit(0)
1   513
Turbo Assembler	 Version 4.1	    02/25/23 19:38:38	    Page 10
ramka.asm



1   514	033C  8B 6D 10		     @@SecondCycle:  mov bp, [di + 16d]
1   515	033F  26: 89 2F						     mov es:[bx], bp
1   516
1   517	0342  3D 0000						     cmp ax, 00h
1   518	0345  74 49						     je	@@DrawRightV		     ; print left border (WORKS!)
1   519
1   520	0347  3B F2						     cmp si, dx
1   521	0349  74 12						     je	@@DrawH				     ; draw highest border
1   522
1   523	034B  83 FE 01						     cmp si, 01h
1   524	034E  74 15						     je	@@DrawLower		     ; draw lowest border
1   525
1   526	0350			     @@ContinueSecond:
1   527	0350  3D 0000						     cmp ax, 00h
1   528	0353  74 CA						     je	@@IterateI		     ; if j == 0: i++
1   529
1   530	0355  2D 0001						     sub ax, 1				     ; else: j--
1   531	0358  83 C3 02						     add bx, 2				     ; bx += 2
1   532	035B  EB DF						     jmp @@SecondCycle
1   533
1   534	035D  8B 6D 02		     @@DrawH:		     mov bp, [di + 2d]
1   535	0360  26: 89 2F						     mov es:[bx], bp
1   536	0363  EB EB						     jmp @@ContinueSecond
1   537
1   538	0365  8B 6D 0A		     @@DrawLower:    mov bp, [di + 10d]
1   539	0368  26: 89 2F						     mov es:[bx], bp
1   540	036B  EB E3						     jmp @@ContinueSecond
1   541
1   542	036D  83 FE 01		     @@DrawV:		     cmp si, 01h
1   543	0370  74 0E						     je	@@LowLeft
1   544	0372  3B F2						     cmp si, dx
1   545	0374  74 03						     je	@@HighLeft
1   546	0376  EB 10 90						     jmp @@Left				 ; TODO: all labels !!!!! ->+
    547				     functions
1   548
1   549	0379  8B 2D		     @@HighLeft:	     mov bp, [di]
1   550	037B  26: 89 2F						     mov es:[bx], bp
1   551	037E  EB B4						     jmp @@ContinueMain
1   552
1   553	0380  8B 6D 0C		     @@LowLeft:		     mov bp, [di + 12d]
1   554	0383  26: 89 2F						     mov es:[bx], bp
1   555	0386  EB AC						     jmp @@ContinueMain
1   556
1   557	0388  8B 6D 0E		     @@Left:		     mov bp, [di + 14d]
1   558	038B  26: 89 2F						     mov es:[bx], bp
1   559	038E  EB A4						     jmp @@ContinueMain
1   560
1   561	0390  83 FE 01		     @@DrawRightV:   cmp si, 01h
1   562	0393  74 07						     je	@@LowRight
1   563	0395  3B F2						     cmp si, dx
1   564	0397  74 0B						     je	@@HighRight
1   565	0399  EB 11 90						     jmp @@Right
1   566
1   567	039C  8B 6D 08		     @@LowRight:	     mov bp, [di + 8d]
1   568	039F  26: 89 2F						     mov es:[bx], bp
1   569	03A2  EB AC						     jmp @@ContinueSecond
1   570
Turbo Assembler	 Version 4.1	    02/25/23 19:38:38	    Page 11
ramka.asm



1   571	03A4  8B 6D 04		     @@HighRight:    mov bp, [di + 4d]
1   572	03A7  26: 89 2F						     mov es:[bx], bp
1   573	03AA  EB A4						     jmp @@ContinueSecond
1   574
1   575	03AC  8B 6D 06		     @@Right:		     mov bp, [di + 6d]
1   576	03AF  26: 89 2F						     mov es:[bx], bp
1   577	03B2  EB 9C						     jmp @@ContinueSecond
1   578
1   579	03B4  5D		     @@Exit:		     pop bp
1   580	03B5  C3						     ret
1   581	03B6							     endp
1   582
1   583
1   584				     ;-----------------------------------------------------------
1   585				     ; Put symbol with given ascii to videomem
1   586				     ;-----------------------------------------------------------
1   587				     ; Entry:	     BX	= coordinates of left higher corner of frame
1   588				     ;			     DX	= height
1   589				     ;			     CX	= length
1   590				     ;			     SI	= pointer to text
1   591				     ; Exit:	     None
1   592				     ; Expects:	     ES	-> videomem (b800h)
1   593				     ; Destroys:     AX, DX, DI
1   594				     ;-----------------------------------------------------------
1   595	03B6			     RectText		     proc
1   596
1   597	03B6  8B FA						     mov di, dx			     ; moving for div
1   598
1   599	03B8  BA 0000						     mov dx, 0h
1   600	03BB  8B C3						     mov ax, bx
1   601	03BD  BB 00A0						     mov bx, 160d
1   602	03C0  F7 F3						     div bx			     ; ax = lines, dx =	columns
1   603
1   604	03C2  03 F8						     add di, ax			     ; bottom
1   605	03C4  03 F8						     add di, ax			     ; bottom +	top
1   606	03C6  D1 EF						     shr di, 1			     ; (bottom + top) /	2
1   607
1   608	03C8  52						     push dx
1   609
1   610	03C9  93						     xchg ax, bx		     ; swap (ax, bx)
1   611	03CA  F7 E7						     mul di			     ; ax = 160	* height (di)
1   612	03CC  93						     xchg ax, bx		     ; swap (ax, bx)
1   613
1   614	03CD  5A						     pop dx
1   615
1   616	03CE  8B F9						     mov di, cx			     ; moving for strlen (di =	    +
    617				     length)
1   618	03D0  56						     push si
1   619
1   620	03D1  E8 002E						     call Strlen		     ; len(string) -> cx
1   621
1   622	03D4  5E						     pop si
1   623
1   624	03D5  03 D7						     add dx, di			     ; right border
1   625	03D7  03 D2						     add dx, dx
1   626	03D9  D1 EA						     shr dx, 1			     ; (left + right) /	2
1   627
Turbo Assembler	 Version 4.1	    02/25/23 19:38:38	    Page 12
ramka.asm



1   628	03DB  2B D1						     sub dx, cx
1   629	03DD  4A						     dec dx
1   630	03DE  4A						     dec dx
1   631
1   632	03DF  B8 0001						     mov ax, 01h	     ; mask to check last byte
1   633	03E2  23 C2						     and ax, dx
1   634	03E4  3D 0001						     cmp ax, 01h
1   635	03E7  74 03						     je	@@DoInc
1   636	03E9  EB 02 90						     jmp @@Continue
1   637
1   638	03EC  42		     @@DoInc:		     inc dx
1   639
1   640	03ED  03 DA		     @@Continue:	     add bx, dx
1   641	03EF  8B FB						     mov di, bx
1   642
1   643	03F1  83 F9 00						     cmp cx, 00h
1   644	03F4  74 07						     je	@@Exit
1   645
1   646	03F6  FC						     cld
1   647
1   648								     ; PRINTING	STRING ;
1   649	03F7  AC		     @@Loop:		     lodsb			     ; ds:si ->	al
1   650	03F8  B4 05						     mov ah, 05h
1   651	03FA  AB						     stosw			     ; ax -> es:di
1   652	03FB  E2 FA						     loop @@Loop
1   653
1   654	03FD  C3		     @@Exit:		     ret
1   655	03FE							     endp
1   656
1   657
1   658				     ;-----------------------------------------------------------
1   659				     ; Put symbol with given ascii to videomem
1   660				     ;-----------------------------------------------------------
1   661				     ; Entry:	     BX	= coordinates where to print symbol
1   662				     ;			     CX	= symbol itself
1   663				     ; Exit:	     None
1   664				     ; Expects:	     ES	-> videomem (b800h)
1   665				     ; Destroys:     None
1   666				     ;-----------------------------------------------------------
1   667	03FE			     PutChar proc
1   668
1   669	03FE  26: 89 0F			     mov es:[bx], cx	     ; put symbol to videomem
1   670
1   671	0401  C3			     ret
1   672	0402				     endp
1   673
1   674
1   675
1   676				     ;----------------STRING FUNCTIONS-------------------;
1   677
1   678
1   679
1   680				     ;------------------------------------------------------------
1   681				     ; Gets length of string (string must end with '\0'	(0 ascii)
1   682				     ;------------------------------------------------------------
1   683				     ; Entry:	     DS:SI - pointer to	string
1   684				     ; Expects:	     None
Turbo Assembler	 Version 4.1	    02/25/23 19:38:38	    Page 13
ramka.asm



1   685				     ; Exit:	     CX	- amount of symbols in string
1   686				     ; Destroys:     CX, SI
1   687				     ;------------------------------------------------------------
1   688	0402			     Strlen	     proc
1   689	0402  B9 0000					     mov cx, 00h
1   690
1   691	0405  FC		     @@Repeat:	     cld
1   692	0406  AC					     lodsb		     ; DS:SI++ -> AL
1   693
1   694	0407  3C 00					     cmp al, 00h	     ; ('\0')
1   695	0409  74 07					     je	 @@Exit
1   696
1   697	040B  3C 24					     cmp al, 24h	     ; ('$')
1   698	040D  74 03					     je	@@Exit
1   699
1   700	040F  41					     inc cx		     ; count++
1   701	0410  EB F3					     jmp @@Repeat    ; if al ==	0 || '$': exit() else: loop
1   702
1   703	0412  C3		     @@Exit:	     ret
1   704	0413						     endp
1   705
1   706				     ;------------------------------------------------------------
1   707				     ; Copies bytes from one side of memory to another one
1   708				     ;------------------------------------------------------------
1   709				     ; Entry:	     ES:DI - destination pointer
1   710				     ;			     DS:SI - from where	pointer
1   711				     ;			     CX	   - amount of bytes to	copy
1   712				     ; Expects:	     None
1   713				     ; Exit:	     None
1   714				     ; Destroys:     CX, DI, SI
1   715				     ;------------------------------------------------------------
1   716	0413			     Memcpy	     proc
1   717
1   718	0413  FC					     cld
1   719	0414  F3> A4					     rep movsb	     ; while (cx--) DS:SI -> ES:DI
1   720
1   721	0416  C3					     ret
1   722	0417						     endp
1   723
1   724				     ;------------------------------------------------------------
1   725				     ; Copies strings
1   726				     ;------------------------------------------------------------
1   727				     ; Entry:	     ES:DI - destination pointer
1   728				     ;		     DS:SI - string to copy
1   729				     ; Expects:	     None
1   730				     ; Exit:	     None
1   731				     ; Destroys:     AL, CX, DI, SI
1   732				     ;------------------------------------------------------------
1   733	0417			     Strcpy	     proc
1   734
1   735	0417  FC					     cld
1   736
1   737	0418  56					     push si
1   738	0419  57					     push di
1   739
1   740	041A  E8 FFE5					     call Strlen	     ; strlen(ds:si) ->	cx
1   741
Turbo Assembler	 Version 4.1	    02/25/23 19:38:38	    Page 14
ramka.asm



1   742	041D  5F					     pop di
1   743	041E  5E					     pop si
1   744
1   745	041F  E8 FFF1					     call Memcpy
1   746
1   747	0422  B0 24					     mov al, '$'
1   748	0424  AA					     stosb		     ; destStr[-1] = '$'
1   749
1   750	0425  C3					     ret
1   751	0426						     endp
1   752
1   753
1   754				     ;-------------------------------------------------------------
1   755				     ; Fills first n bytes with	given symbol
1   756				     ;-------------------------------------------------------------
1   757				     ; Entry:	     ES:DI - pointer to	write bytes
1   758				     ;		     AL	   - byte
1   759				     ;		     CX	   - count
1   760				     ; Exit:	     None
1   761				     ; Expects:	     None
1   762				     ; Destroys:     CX, DI
1   763				     ;-------------------------------------------------------------
1   764	0426			     Memset	     proc
1   765
1   766	0426  FC					     cld
1   767	0427  F3> AA					     rep stosb
1   768
1   769	0429  C3					     ret
1   770	042A						     endp
1   771
1   772				     ;--------------------------------------------------------------
1   773				     ; Compares	first n	bytes in buffers
1   774				     ;--------------------------------------------------------------
1   775				     ; Entry:	     ES:DI - buf1
1   776				     ;			     DS:SI - buf2
1   777				     ;			     CX	   - byte count
1   778				     ; Exit:	     DX	   - 0 if eq, <	0 if buf1 < buf2 && > 0	if buf1	> buf2
1   779				     ; Expects:	     None
1   780				     ; Destroys:     CX, DX, DI, SI
1   781				     ;-------------------------------------------------------------
1   782	042A			     Memcmp	     proc
1   783	042A  FC					     cld
1   784
1   785	042B  BA 0000					     mov dx, 00h
1   786
1   787	042E  83 F9 00		     @@Loop:	     cmp cx, 00h
1   788	0431  74 0B					     je	@@Exit
1   789	0433  49					     dec cx
1   790
1   791	0434  A6					     cmpsb		     ; rep cmpsb doesn't work???
1   792	0435  74 F7					     je	@@Loop		     ; if ZF ==	1: repeat
1   793
1   794	0437  4F					     dec di		     ; else return di -	si
1   795	0438  4E					     dec si
1   796
1   797	0439  26: 8B 15					     mov dx, es:[di]
1   798	043C  2B 14					     sub dx, ds:[si]
Turbo Assembler	 Version 4.1	    02/25/23 19:38:38	    Page 15
ramka.asm



1   799
1   800	043E  C3		     @@Exit:	     ret
1   801	043F						     endp
1   802
1   803
1   804				     ;-----------------------------------------------------------------------
1   805				     ; Compares	to string
1   806				     ;-----------------------------------------------------------------------
1   807				     ; Entry:	     ES:DI - buf1
1   808				     ;		     DS:SI - buf2
1   809				     ; Exit:	     DX	   - 0 if equ, < 0 if buf1 < buf2 && > 0 if buf1 > buf2
1   810				     ; Expects:	     None
1   811				     ; Destroys:     AX, DX, DI, SI
1   812				     ;-----------------------------------------------------------------------
1   813	043F			     Strcmp		     proc
1   814
1   815	043F  FC						     cld
1   816	0440  BA 0000						     mov dx, 00h
1   817
1   818	0443  26: 8A 05		     @@Loop:		     mov al, es:[di]
1   819	0446  8A 24						     mov ah, ds:[si]
1   820
1   821	0448  80 FC 24						     cmp ah, '$'
1   822	044B  74 11						     je	@@CheckLenSI
1   823
1   824	044D  3C 24						     cmp al, '$'
1   825	044F  74 17						     je	@@CheckLenDI	     ; if al ==	'$': cmp lens
1   826
1   827	0451  A6						     cmpsb
1   828	0452  74 EF						     je	@@Loop			     ; if zf ==	1: repeat
1   829
1   830	0454  4F						     dec di
1   831	0455  4E						     dec si
1   832	0456  26: 8B 15						     mov dx, es:[di]
1   833	0459  2B 14						     sub dx, ds:[si]
1   834	045B  EB 0E 90						     jmp @@Exit			     ; else return *di - *si
1   835
1   836	045E  3C 24		     @@CheckLenSI:   cmp al, '$'
1   837	0460  74 09						     je	@@Exit			     ; if al ==	'$' return 0
1   838
1   839	0462  BA 0001						     mov dx, 01h		     ; dx = 1
1   840	0465  EB 04 90						     jmp @@Exit
1   841
1   842	0468			     @@CheckLenDI:					     ; di ended	faster
1   843	0468  BA FFFE						     mov dx, 0fffeh	     ; dx = -1
1   844
1   845	046B  C3		     @@Exit:		     ret
1   846	046C							     endp
1   847
    848
    849				     end     Start
Turbo Assembler	 Version 4.1	    02/25/23 19:38:38	    Page 16
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "02/25/23"
??FILENAME			  Text	 "ramka	  "
??TIME				  Text	 "19:38:38"
??VERSION			  Number 040A
@32BIT				  Text	 0
@@CALL				  Near	 DGROUP:01C3
@@CHECKLENDI			  Near	 DGROUP:0468
@@CHECKLENSI			  Near	 DGROUP:045E
@@CONTINUE			  Near	 DGROUP:01D9
@@CONTINUE			  Near	 DGROUP:03ED
@@CONTINUEMAIN			  Near	 DGROUP:0334
@@CONTINUEPRINT			  Near	 DGROUP:02A4
@@CONTINUESECOND		  Near	 DGROUP:0350
@@DOINC				  Near	 DGROUP:03EC
@@DRAWH				  Near	 DGROUP:035D
@@DRAWLOWER			  Near	 DGROUP:0365
@@DRAWRIGHTV			  Near	 DGROUP:0390
@@DRAWV				  Near	 DGROUP:036D
@@EXIT				  Near	 DGROUP:0210
@@EXIT				  Near	 DGROUP:0224
@@EXIT				  Near	 DGROUP:025B
@@EXIT				  Near	 DGROUP:02B1
@@EXIT				  Near	 DGROUP:02D4
@@EXIT				  Near	 DGROUP:0315
@@EXIT				  Near	 DGROUP:03B4
@@EXIT				  Near	 DGROUP:03FD
@@EXIT				  Near	 DGROUP:0412
@@EXIT				  Near	 DGROUP:043E
@@EXIT				  Near	 DGROUP:046B
@@HIGHLEFT			  Near	 DGROUP:0379
@@HIGHRIGHT			  Near	 DGROUP:03A4
@@ITERATEI			  Near	 DGROUP:031F
@@LEFT				  Near	 DGROUP:0388
@@LETTERPRINT			  Near	 DGROUP:029F
@@LOOP				  Near	 DGROUP:01F7
@@LOOP				  Near	 DGROUP:0216
@@LOOP				  Near	 DGROUP:02E8
@@LOOP				  Near	 DGROUP:03F7
@@LOOP				  Near	 DGROUP:042E
@@LOOP				  Near	 DGROUP:0443
@@LOOP1				  Near	 DGROUP:0142
@@LOOP2				  Near	 DGROUP:0160
@@LOOP3				  Near	 DGROUP:019A
@@LOOP4				  Near	 DGROUP:01B2
@@LOWLEFT			  Near	 DGROUP:0380
@@LOWRIGHT			  Near	 DGROUP:039C
@@MAINCYCLE			  Near	 DGROUP:032A
@@NEWBYTE			  Near	 DGROUP:0247
@@NEXT				  Near	 DGROUP:0252
@@ONERROR			  Near	 DGROUP:02DE
@@PARSE1			  Near	 DGROUP:0134
@@PARSE2			  Near	 DGROUP:0152
@@PARSE3			  Near	 DGROUP:0194
@@PARSE4			  Near	 DGROUP:01AC
Turbo Assembler	 Version 4.1	    02/25/23 19:38:38	    Page 17
Symbol Table



@@PRINT0			  Near	 DGROUP:023C
@@PRINT1			  Near	 DGROUP:0231
@@PRINTSYMB			  Near	 DGROUP:02B7
@@PRINTSYMBOL			  Near	 DGROUP:0292
@@PROCEED4BIT			  Near	 DGROUP:026F
@@READBYTES			  Near	 DGROUP:0265
@@REPEAT			  Near	 DGROUP:0405
@@RIGHT				  Near	 DGROUP:03AC
@@SECONDCYCLE			  Near	 DGROUP:033C
@@SKIPMUL			  Near	 DGROUP:0286
@@STARTREAD			  Near	 DGROUP:01D0
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0101H
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 RAMKA
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
ARGUMENTS			  Near	 DGROUP:00A0
DRAWRECT			  Near	 DGROUP:0316
ERRORMSG			  Near	 DGROUP:00B2
INTINPUT			  Near	 DGROUP:02D5
MEMCMP				  Near	 DGROUP:042A
MEMCPY				  Near	 DGROUP:0413
MEMSET				  Near	 DGROUP:0426
PRINTTEXT			  Near	 DGROUP:0000
PUTCHAR				  Near	 DGROUP:03FE
READNUMBER			  Near	 DGROUP:01F1
READTEXT			  Near	 DGROUP:0213
RECTTEXT			  Near	 DGROUP:03B6
START				  Near	 DGROUP:0100
STRCMP				  Near	 DGROUP:043F
STRCPY				  Near	 DGROUP:0417
STRLEN				  Near	 DGROUP:0402
TOBIN				  Near	 DGROUP:022B
TODEC				  Near	 DGROUP:02B2
TOHEX				  Near	 DGROUP:025C

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  00CF Word	  Public  DATA
  _TEXT				  16  046C Word	  Public  CODE
