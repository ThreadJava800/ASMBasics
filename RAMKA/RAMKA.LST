Turbo Assembler	 Version 4.1	    02/24/23 19:09:16	    Page 1
ramka.asm



      1	0000			     .model tiny
      2
      3	0000			     .data
      4
      5	0000  09*(0000)			     arguments:	     dw	9 dup(0)
      6
      7	0012			     .code
      8
      9				     org 100h
     10
     11				     locals @@
     12
     13
     14	0100			     Start:
     15	0100  BB 0082						     mov bx, 0082h
     16	0103  E8 00BF						     call ReadNumber		     ; ax -> line
     17
     18	0106  BE 00A0						     mov si, 160d
     19	0109  F7 E6						     mul si				     ; ax *= 10
     20	010B  8B F8						     mov di, ax				     ; si = ax
     21
     22	010D  E8 00B5						     call ReadNumber
     23	0110  03 C0						     add ax, ax
     24	0112  03 F8						     add di, ax
     25	0114  57						     push di				     ; coordinates ready
     26
     27	0115  E8 00AD						     call ReadNumber
     28	0118  50						     push ax				     ; height
     29
     30	0119  E8 00A9						     call ReadNumber
     31	011C  50						     push ax				     ; length
     32
     33	011D  E8 00A5						     call ReadNumber		     ; type
     34
     35	0120  3D 0001						     cmp ax, 01h
     36	0123  74 0F						     je	@@Parse1
     37	0125  3D 0002						     cmp ax, 02h
     38	0128  74 27						     je	@@Parse2
     39	012A  3D 0003						     cmp ax, 03h
     40	012D  74 5B						     je	@@Parse3
     41	012F  3D 0004						     cmp ax, 04h
     42	0132  74 6E						     je	@@Parse4
     43
     44				     ; MODE = 1	;
     45	0134			     @@Parse1:
     46	0134  B9 0008						     mov cx, 08h			     ; counter for loop
     47	0137  BF 0000r						     lea di, arguments
     48
     49								     ; READING ASCII ;
     50	013A  8A 07						     mov byte ptr al, [bx]   ; al = ascii code
     51	013C  FE C3						     inc bl
     52	013E  FE C3						     inc bl				     ; bl += 2
     53
     54	0140  B4 05						     mov ah, 05h
     55
     56	0142  89 05		     @@Loop1:		     mov [di], ax
     57	0144  47						     inc di
Turbo Assembler	 Version 4.1	    02/24/23 19:09:16	    Page 2
ramka.asm



     58	0145  47						     inc di
     59	0146  E2 FA						     loop @@Loop1		     ; symb -> argument	x8
     60
     61	0148  BF 0020						     mov di, 0020h		     ; inside =	space
     62	014B  BF 0000r						     lea di, arguments
     63
     64	014E  EB 67 90						     jmp @@Call
     65
     66				     ; MODE = 2	;
     67	0151			     @@Parse2:
     68	0151  B9 0008						     mov cx, 08h			     ; counter for loop
     69	0154  BF 0000r						     lea di, arguments
     70
     71								     ; READING ASCII ;
     72	0157  8A 07						     mov byte ptr al, [bx]   ; al = ascii code
     73	0159  FE C3						     inc bl
     74	015B  FE C3						     inc bl				     ; bl += 2
     75
     76	015D  B4 05						     mov ah, 05h
     77
     78	015F  89 05		     @@Loop2:		     mov [di], ax
     79	0161  47						     inc di
     80	0162  47						     inc di
     81	0163  E2 FA						     loop @@Loop2		     ; symb -> argument	x8
     82
     83	0165  C7 05 0020					     mov word ptr [di],	0020h ;	inside = space
     84	0169  BF 0000r						     lea di, arguments
     85
     86	016C  59						     pop cx				     ; length
     87	016D  5A						     pop dx				     ; height
     88
     89	016E  BB B800						     mov bx, 0b800h
     90	0171  8E C3						     mov es, bx				     ; es -> 0b800h
     91	0173  5B						     pop bx				     ; coordinates
     92
     93	0174  51						     push cx				     ; save len
     94	0175  53						     push bx				     ; save coords
     95
     96	0176  41						     inc cx
     97	0177  41						     inc cx
     98	0178  42						     inc dx
     99	0179  42						     inc dx
    100	017A  81 EB 00A2					     sub bx, 162d
    101	017E  E8 0151						     call DrawRect		     ; draw bigger frame
    102
    103	0181  5B						     pop bx
    104	0182  59						     pop cx
    105	0183  4A						     dec dx
    106	0184  4A						     dec dx
    107	0185  E8 014A						     call DrawRect
    108
    109	0188  CD 20						     int 20h				     ; exit(0)
    110
    111				     ; MODE = 3	;
    112	018A  B9 0008		     @@Parse3:		     mov cx, 08h
    113	018D  BF 0000r						     lea di, arguments
    114
Turbo Assembler	 Version 4.1	    02/24/23 19:09:16	    Page 3
ramka.asm



    115	0190  C7 05 052A	     @@Loop3:		     mov word ptr [di],	052ah
    116	0194  47						     inc di
    117	0195  47						     inc di
    118	0196  E2 F8						     loop @@Loop3
    119
    120	0198  C7 05 0020					     mov word ptr [di],	0020h			     ; inside =	    +
    121				     space
    122	019C  BF 0000r						     lea di, arguments
    123
    124	019F  EB 16 90						     jmp @@Call
    125
    126				     ; MODE = 4	;
    127	01A2  B9 0009		     @@Parse4:		     mov cx, 09h
    128	01A5  BF 0000r						     lea di, arguments
    129
    130	01A8  8A 07		     @@Loop4:		     mov byte ptr al, [bx]   ; al = ascii code
    131	01AA  FE C3						     inc bl				     ; bl++
    132	01AC  B4 05						     mov ah, 05h
    133
    134	01AE  89 05						     mov [di], ax
    135	01B0  47						     inc di
    136	01B1  47						     inc di
    137
    138	01B2  E2 F4						     loop @@Loop4
    139
    140	01B4  BF 0000r						     lea di, arguments
    141
    142
    143	01B7  59		     @@Call:		     pop cx				     ; length
    144	01B8  5A						     pop dx				     ; height
    145
    146	01B9  BB B800						     mov bx, 0b800h
    147	01BC  8E C3						     mov es, bx				     ; es -> 0b800h
    148	01BE  5B						     pop bx				     ; coordinates
    149
    150	01BF  E8 0110						     call DrawRect
    151	01C2  CD 20						     int 20h				     ; exit(0)
    152	01C4  C3						     ret
    153
    154				     ;-----------------------------------------------------------
    155				     ; Reads command line int arguments
    156				     ;-----------------------------------------------------------
    157				     ; Entry:		     BX	= position in command line (starting 80h)
    158				     ; Exit:		     AX	- read value
    159				     ; Expects:	     None
    160				     ; Destroys:     AX, BX, CL, DX, SI
    161				     ;-----------------------------------------------------------
    162	01C5			     ReadNumber		     proc
    163	01C5  B8 0000						     mov ax, 00h
    164	01C8  BA 0000						     mov dx, 00h				     ; dx:ax = 0
    165
    166	01CB  8A 0F		     @@Loop:		     mov byte ptr cl, [bx]	     ; cl = arg	symb
    167	01CD  80 F9 0D						     cmp cl, 0Dh
    168	01D0  74 12						     je	@@Exit
    169
    170	01D2  80 F9 20						     cmp cl, 20h
    171	01D5  74 0D						     je	@@Exit					     ; if cl ==	' ' +
Turbo Assembler	 Version 4.1	    02/24/23 19:09:16	    Page 4
ramka.asm



    172				     or	0D: exit()
    173
    174	01D7  BE 000A						     mov si, 10d
    175	01DA  F7 E6						     mul si					     ; ax *= 10
    176
    177	01DC  02 C1						     add al, cl
    178	01DE  2C 30						     sub al, 30h				     ; ax += read   +
    179				     ascii.toChar()
    180
    181	01E0  FE C3						     inc bl					     ; bx++
    182	01E2  EB E7						     jmp @@Loop
    183
    184	01E4  FE C3		     @@Exit:		     inc bl					     ; bx++
    185	01E6  C3						     ret
    186	01E7							     endp
    187
    188
    189				     include ..\LIBA.ASM
1   190	01E7			     .data
1   191	0012  0A 54 68 69 73 20	73+	     ErrorMsg: db 0Ah, 'This symbol is not allowed!$'
    192	      79 6D 62 6F 6C 20	69+
    193	      73 20 6E 6F 74 20	61+
    194	      6C 6C 6F 77 65 64	21+
    195	      24
1   196
1   197	002F			     .code
1   198
1   199				     ;-----------------------------------------------------------
1   200				     ; Print binary of value
1   201				     ;-----------------------------------------------------------
1   202				     ; Entry:		     AX	= value	to convert to
1   203				     ;				     BX	= coordinates to print on string
1   204				     ; Exit:		     None
1   205				     ; Expects:	     ES	-> videomem (b800h)
1   206				     ; Destroys:     BX, CX, DL
1   207				     ;-----------------------------------------------------------
1   208	01E7			     ToBin	     proc
1   209
1   210	01E7  BA 8000					     mov dx, 8000h	     ; dx = 2 ** 15
1   211	01EA  EB 17 90					     jmp @@NewByte
1   212
1   213	01ED			     @@Print1:
1   214	01ED  26: C7 07	0531				     mov es:[bx], 0531h	     ; put 0 to	videomem
1   215	01F2  83 C3 02					     add bx, 2			     ; bx += 2
1   216	01F5  EB 17 90					     jmp @@Next
1   217
1   218	01F8			     @@Print0:
1   219	01F8  26: C7 07	0530				     mov es:[bx], 0530h	     ; put 0 to	videomem
1   220	01FD  83 C3 02					     add bx, 2			     ; bx += 2
1   221	0200  EB 0C 90					     jmp @@Next
1   222
1   223	0203			     @@NewByte:
1   224	0203  8B C8					     mov cx, ax			     ; cx = ax
1   225	0205  23 CA					     and cx, dx			     ; cx && dx
1   226
1   227	0207  83 F9 00					     cmp cx, 0h			     ; if cx ==	0: print(0) else: print(1)
1   228	020A  74 EC					     je	 @@Print0
Turbo Assembler	 Version 4.1	    02/24/23 19:09:16	    Page 5
ramka.asm



1   229	020C  EB DF					     jmp @@Print1
1   230
1   231	020E			     @@Next:
1   232	020E  83 FA 01					     cmp dx, 1h			     ; if dx ==	1: return
1   233	0211  74 04					     je	@@Exit
1   234
1   235	0213  D1 EA					     shr dx, 1			     ; dx >> 1
1   236	0215  EB EC					     jmp @@NewByte
1   237
1   238	0217  C3		     @@Exit:	     ret
1   239	0218						     endp
1   240
1   241				     ;-----------------------------------------------------------
1   242				     ; Print hex of value
1   243				     ;-----------------------------------------------------------
1   244				     ; Entry:	     SI	= value	to convert to
1   245				     ;			     BX	= coordinates to print in cmd
1   246				     ; Exit:	     None
1   247				     ; Expects:	     ES	-> videomem (b800h)
1   248				     ; Destroys:     AX, BX, CX, DX, DI, BP, SP
1   249				     ;----------------------------------------------------------
1   250	0218			     ToHex   proc
1   251
1   252	0218  BA 8000						     mov dx, 8000h	     ; first byte is 1 others are 0
1   253	021B  B9 0004						     mov cx, 0004h	     ; cx = 0
1   254	021E  BF 0000						     mov di, 0000h
1   255
1   256	0221			     @@ReadBytes:
1   257	0221  FE C5						     inc ch			     ; ch++ (byte counter in 4th)
1   258	0223  80 FD 05						     cmp ch, 05h		     ; if ch ==	5: exit	else:	    +
    259				     continue
1   260	0226  74 45						     je	@@Exit
1   261	0228  EB 01 90						     jmp @@Proceed4bit
1   262
1   263	022B			     @@Proceed4bit:
1   264	022B  8B C6						     mov ax, si			     ; ax = si (given value)
1   265	022D  23 C2						     and ax, dx			     ; ax && ax
1   266
1   267	022F  3D 0000						     cmp ax, 00h		     ; if ax ==	0: SkipMul()
1   268	0232  74 0E						     je	@@SkipMul
1   269
1   270	0234  B0 01						     mov al, 01h		     ; al = 1 (value to	add)
1   271	0236  B4 00						     mov ah, 00h		     ; ah = 0 (needed not to brake  +
    272				     ax)
1   273	0238  80 E9 01						     sub cl, 1			     ; cl-- (bit num)
1   274	023B  D2 E0						     shl al, cl			     ; al = 2^cl
1   275	023D  80 C1 01						     add cl, 1			     ; cl++
1   276	0240  03 F8						     add di, ax			     ; di += ax	(di - result to	    +
    277				     print)
1   278
1   279	0242			     @@SkipMul:
1   280	0242  80 E9 01						     sub cl, 1			     ; cl--
1   281	0245  D1 EA						     shr dx, 1			     ; dx /= 2
1   282
1   283	0247  80 F9 00						     cmp cl, 00h
1   284	024A  74 02						     je	@@PrintSymbol
1   285	024C  EB DD						     jmp @@Proceed4bit	     ; if cl ==	0: Print else continue	    +
Turbo Assembler	 Version 4.1	    02/24/23 19:09:16	    Page 6
ramka.asm



    286				     reading byte
1   287
1   288	024E			     @@PrintSymbol:
1   289	024E  8B C7						     mov ax, di			     ; ax = di
1   290	0250  B4 05						     mov ah, 05h		     ; ah = 05h	(COLOR)
1   291
1   292	0252  3C 0A						     cmp al, 10d		     ; if al >=	10: PrintAsLetter
1   293	0254  73 05						     jae @@LetterPrint
1   294
1   295	0256  04 30						     add al, 30h		     ; else: al	+= 30h -> print	as  +
    296				     ASCII
1   297	0258  EB 06 90						     jmp @@ContinuePrint
1   298
1   299	025B			     @@LetterPrint:
1   300	025B  04 37						     add al, 37h		     ; al += 37	-> add letter as    +
    301				     ASCII
1   302	025D  EB 01 90						     jmp @@ContinuePrint
1   303
1   304	0260			     @@ContinuePrint:
1   305	0260  26: 89 07						     mov es:[bx], ax	     ; put ax to videomem
1   306	0263  83 C3 02						     add bx, 2			     ; bx += 2
1   307	0266  BF 0000						     mov di, 00h		     ; di = 0
1   308	0269  B1 04						     mov cl, 04h		     ; cl = 4 (byte count)
1   309	026B  EB B4						     jmp @@ReadBytes
1   310
1   311	026D			     @@Exit:
1   312	026D  C3						     ret
1   313	026E							     endp
1   314
1   315
1   316				     ;-----------------------------------------------------------
1   317				     ; Print dec of value
1   318				     ;-----------------------------------------------------------
1   319				     ; Entry:	     SI	= value	to convert to
1   320				     ;		     BX	= coordinates to print on string
1   321				     ; Exit:	     None
1   322				     ; Expects:	     ES	-> videomem (b800h)
1   323				     ; Destroys:     AX, BX, CX, DX, DI
1   324				     ;-----------------------------------------------------------
1   325	026E			     ToDec	     proc
1   326
1   327	026E  8B C6					     mov ax, si			     ; ax = si
1   328	0270  BF 0006					     mov di, 06h		     ; amount of digits
1   329
1   330	0273			     @@PrintSymb:
1   331	0273  B9 000A					     mov cx, 000Ah	     ; cx = 10
1   332	0276  F7 F1					     div cx			     ; ax = ax / 10, dx	= ax % 10
1   333
1   334	0278  80 C2 30					     add dl, 30h		     ; dl += 30	(symb ascii)
1   335	027B  B6 05					     mov dh, 05h		     ; dh = 5	(color)
1   336
1   337	027D  26: 89 17					     mov es:[bx], dx
1   338	0280  BA 0000					     mov dx, 0000h	     ; print on	screen
1   339
1   340	0283  83 EB 02					     sub bx, 2			     ; bx -= 2
1   341	0286  83 EF 01					     sub di, 1			     ; di --
1   342
Turbo Assembler	 Version 4.1	    02/24/23 19:09:16	    Page 7
ramka.asm



1   343	0289  83 FF 00					     cmp di, 0
1   344	028C  74 02					     je	@@Exit
1   345
1   346	028E  EB E3					     jmp @@PrintSymb
1   347
1   348	0290  C3		     @@Exit:	     ret
1   349	0291						     endp
1   350
1   351
1   352				     ;------------------------------------------------------------
1   353				     ; Reads dec number
1   354				     ;------------------------------------------------------------
1   355				     ; Entry:	     None
1   356				     ; Exit:	     DI	- dec value
1   357				     ; Expects:	     None
1   358				     ; Destroys:     AX, CX, DI, SI
1   359				     ;------------------------------------------------------------
1   360	0291			     IntInput	     proc
1   361
1   362	0291  BF 0000					     mov di, 0000h	     ; di = 0
1   363	0294  B9 0005					     mov cx, 0005h	     ; cx = 5 (max amount of numbers)
1   364	0297  EB 0B 90					     jmp @@Loop
1   365	029A			     @@OnError:
1   366	029A  BA 0012r					     mov dx, offset ErrorMsg
1   367	029D  B4 09					     mov ah, 09h
1   368	029F  CD 21					     int 21h			     ; print Error message
1   369
1   370	02A1  EB 2E 90					     jmp @@Exit
1   371
1   372	02A4  B4 01		     @@Loop:	     mov ah, 01h
1   373	02A6  CD 21					     int 21h			     ; reading char -> al
1   374
1   375	02A8  3C 0D					     cmp al, 0Dh
1   376	02AA  74 25					     je	@@Exit
1   377
1   378	02AC  3C 13					     cmp al, 13h
1   379	02AE  74 21					     je	@@Exit			     ; if al ==	'\n' ||	'\r': retunr
1   380
1   381	02B0  3C 30					     cmp al, 30h
1   382	02B2  72 E6					     jb	@@OnError
1   383
1   384	02B4  3C 40					     cmp al, 40h
1   385	02B6  77 E2					     ja	@@OnError	     ; if !alnum(al): OnError()
1   386
1   387	02B8  2C 30					     sub al, 30h		     ; al -= 30	(ascii -> number)
1   388	02BA  B4 00					     mov ah, 00h
1   389
1   390	02BC  8B F0					     mov si, ax
1   391	02BE  8B C7					     mov ax, di
1   392	02C0  8B FE					     mov di, si			     ; swap (ax, di)
1   393
1   394	02C2  BE 000A					     mov si, 10d
1   395	02C5  F7 E6					     mul si			     ; ax *= 10
1   396
1   397	02C7  03 C7					     add ax, di			     ; ax += di	(last number)
1   398
1   399	02C9  8B F0					     mov si, ax
Turbo Assembler	 Version 4.1	    02/24/23 19:09:16	    Page 8
ramka.asm



1   400	02CB  8B C7					     mov ax, di
1   401	02CD  8B FE					     mov di, si			     ; swap (ax, di)
1   402
1   403	02CF  E2 D3					     loop @@Loop
1   404
1   405	02D1  C3		     @@Exit:	     ret
1   406	02D2						     endp
1   407
1   408
1   409				     ;-------------------------------------------------------------
1   410				     ; Draws rectangle on screen with given borders
1   411				     ;-------------------------------------------------------------
1   412				     ; Entry:	     DI	- pointer to array with	symbols
1   413				     ;			     BX	- coordinates where to print
1   414				     ;			     CX	- horizontal size
1   415				     ;			     DX	- vertical size
1   416				     ; Exit:	     None
1   417				     ; Expects:	     ES	-> videomem (0b800h)
1   418				     ; Destroys:     AX, BX, CX, SI
1   419				     ;-------------------------------------------------------------
1   420	02D2			     DrawRect		     proc
1   421	02D2  55						     push bp
1   422
1   423	02D3  83 E9 02						     sub cx, 2
1   424	02D6  8B F2						     mov si, dx				     ; i = dx
1   425	02D8  EB 0C 90						     jmp @@MainCycle
1   426
1   427	02DB  83 EE 01		     @@IterateI:	     sub si, 1				     ; i--
1   428
1   429	02DE  2B D9						     sub bx, cx				     ; start vertically
1   430	02E0  2B D9						     sub bx, cx
1   431	02E2  81 C3 00A0					     add bx, 160d		     ; new line
1   432
1   433	02E6  8B C1		     @@MainCycle:    mov ax, cx				     ; j = cx
1   434
1   435	02E8  83 EB 02						     sub bx, 2				     ; bx -= 2 (then i += 2 +
    436				     to	print)
1   437
1   438	02EB  83 FE 00						     cmp si, 00h
1   439	02EE  75 39						     jne @@DrawV
1   440
1   441	02F0  83 C3 02		     @@ContinueMain: add bx, 2				     ; bx += 2 (watch previous comment)
1   442	02F3  83 FE 00						     cmp si, 00h
1   443	02F6  74 78						     je	@@Exit				     ; if i == 0: exit(0)
1   444
1   445	02F8  8B 6D 10		     @@SecondCycle:  mov bp, [di + 16d]
1   446	02FB  26: 89 2F						     mov es:[bx], bp
1   447
1   448	02FE  3D 0000						     cmp ax, 00h
1   449	0301  74 49						     je	@@DrawRightV		     ; print left border (WORKS!)
1   450
1   451	0303  3B F2						     cmp si, dx
1   452	0305  74 12						     je	@@DrawH				     ; draw highest border
1   453
1   454	0307  83 FE 01						     cmp si, 01h
1   455	030A  74 15						     je	@@DrawLower		     ; draw lowest border
1   456
Turbo Assembler	 Version 4.1	    02/24/23 19:09:16	    Page 9
ramka.asm



1   457	030C			     @@ContinueSecond:
1   458	030C  3D 0000						     cmp ax, 00h
1   459	030F  74 CA						     je	@@IterateI		     ; if j == 0: i++
1   460
1   461	0311  2D 0001						     sub ax, 1				     ; else: j--
1   462	0314  83 C3 02						     add bx, 2				     ; bx += 2
1   463	0317  EB DF						     jmp @@SecondCycle
1   464
1   465	0319  8B 6D 02		     @@DrawH:		     mov bp, [di + 2d]
1   466	031C  26: 89 2F						     mov es:[bx], bp
1   467	031F  EB EB						     jmp @@ContinueSecond
1   468
1   469	0321  8B 6D 0A		     @@DrawLower:    mov bp, [di + 10d]
1   470	0324  26: 89 2F						     mov es:[bx], bp
1   471	0327  EB E3						     jmp @@ContinueSecond
1   472
1   473	0329  83 FE 01		     @@DrawV:		     cmp si, 01h
1   474	032C  74 0E						     je	@@LowLeft
1   475	032E  3B F2						     cmp si, dx
1   476	0330  74 03						     je	@@HighLeft
1   477	0332  EB 10 90						     jmp @@Left				 ; TODO: all labels !!!!! ->+
    478				     functions
1   479
1   480	0335  8B 2D		     @@HighLeft:	     mov bp, [di]
1   481	0337  26: 89 2F						     mov es:[bx], bp
1   482	033A  EB B4						     jmp @@ContinueMain
1   483
1   484	033C  8B 6D 0C		     @@LowLeft:		     mov bp, [di + 12d]
1   485	033F  26: 89 2F						     mov es:[bx], bp
1   486	0342  EB AC						     jmp @@ContinueMain
1   487
1   488	0344  8B 6D 0E		     @@Left:		     mov bp, [di + 14d]
1   489	0347  26: 89 2F						     mov es:[bx], bp
1   490	034A  EB A4						     jmp @@ContinueMain
1   491
1   492	034C  83 FE 01		     @@DrawRightV:   cmp si, 01h
1   493	034F  74 07						     je	@@LowRight
1   494	0351  3B F2						     cmp si, dx
1   495	0353  74 0B						     je	@@HighRight
1   496	0355  EB 11 90						     jmp @@Right
1   497
1   498	0358  8B 6D 08		     @@LowRight:	     mov bp, [di + 8d]
1   499	035B  26: 89 2F						     mov es:[bx], bp
1   500	035E  EB AC						     jmp @@ContinueSecond
1   501
1   502	0360  8B 6D 04		     @@HighRight:    mov bp, [di + 4d]
1   503	0363  26: 89 2F						     mov es:[bx], bp
1   504	0366  EB A4						     jmp @@ContinueSecond
1   505
1   506	0368  8B 6D 06		     @@Right:		     mov bp, [di + 6d]
1   507	036B  26: 89 2F						     mov es:[bx], bp
1   508	036E  EB 9C						     jmp @@ContinueSecond
1   509
1   510	0370  5D		     @@Exit:		     pop bp
1   511	0371  C3						     ret
1   512	0372							     endp
1   513
Turbo Assembler	 Version 4.1	    02/24/23 19:09:16	    Page 10
ramka.asm



1   514
1   515				     ;-----------------------------------------------------------
1   516				     ; Put symbol with given ascii to videomem
1   517				     ;-----------------------------------------------------------
1   518				     ; Entry:	     BX	= coordinates where to print symbol
1   519				     ;		     CX	= symbol itself
1   520				     ; Exit:	     None
1   521				     ; Expects:	     ES	-> videomem (b800h)
1   522				     ; Destroys:     None
1   523				     ;-----------------------------------------------------------
1   524	0372			     PutChar proc
1   525
1   526	0372  26: 89 0F			     mov es:[bx], cx	     ; put symbol to videomem
1   527
1   528	0375  C3			     ret
1   529	0376				     endp
1   530
    531
    532				     end     Start
Turbo Assembler	 Version 4.1	    02/24/23 19:09:16	    Page 11
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "02/24/23"
??FILENAME			  Text	 "ramka	  "
??TIME				  Text	 "19:09:16"
??VERSION			  Number 040A
@32BIT				  Text	 0
@@CALL				  Near	 DGROUP:01B7
@@CONTINUEMAIN			  Near	 DGROUP:02F0
@@CONTINUEPRINT			  Near	 DGROUP:0260
@@CONTINUESECOND		  Near	 DGROUP:030C
@@DRAWH				  Near	 DGROUP:0319
@@DRAWLOWER			  Near	 DGROUP:0321
@@DRAWRIGHTV			  Near	 DGROUP:034C
@@DRAWV				  Near	 DGROUP:0329
@@EXIT				  Near	 DGROUP:01E4
@@EXIT				  Near	 DGROUP:0217
@@EXIT				  Near	 DGROUP:026D
@@EXIT				  Near	 DGROUP:0290
@@EXIT				  Near	 DGROUP:02D1
@@EXIT				  Near	 DGROUP:0370
@@HIGHLEFT			  Near	 DGROUP:0335
@@HIGHRIGHT			  Near	 DGROUP:0360
@@ITERATEI			  Near	 DGROUP:02DB
@@LEFT				  Near	 DGROUP:0344
@@LETTERPRINT			  Near	 DGROUP:025B
@@LOOP				  Near	 DGROUP:01CB
@@LOOP				  Near	 DGROUP:02A4
@@LOOP1				  Near	 DGROUP:0142
@@LOOP2				  Near	 DGROUP:015F
@@LOOP3				  Near	 DGROUP:0190
@@LOOP4				  Near	 DGROUP:01A8
@@LOWLEFT			  Near	 DGROUP:033C
@@LOWRIGHT			  Near	 DGROUP:0358
@@MAINCYCLE			  Near	 DGROUP:02E6
@@NEWBYTE			  Near	 DGROUP:0203
@@NEXT				  Near	 DGROUP:020E
@@ONERROR			  Near	 DGROUP:029A
@@PARSE1			  Near	 DGROUP:0134
@@PARSE2			  Near	 DGROUP:0151
@@PARSE3			  Near	 DGROUP:018A
@@PARSE4			  Near	 DGROUP:01A2
@@PRINT0			  Near	 DGROUP:01F8
@@PRINT1			  Near	 DGROUP:01ED
@@PRINTSYMB			  Near	 DGROUP:0273
@@PRINTSYMBOL			  Near	 DGROUP:024E
@@PROCEED4BIT			  Near	 DGROUP:022B
@@READBYTES			  Near	 DGROUP:0221
@@RIGHT				  Near	 DGROUP:0368
@@SECONDCYCLE			  Near	 DGROUP:02F8
@@SKIPMUL			  Near	 DGROUP:0242
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0101H
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
Turbo Assembler	 Version 4.1	    02/24/23 19:09:16	    Page 12
Symbol Table



@DATASIZE			  Text	 0
@FILENAME			  Text	 RAMKA
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
ARGUMENTS			  Near	 DGROUP:0000
DRAWRECT			  Near	 DGROUP:02D2
ERRORMSG			  Near	 DGROUP:0012
INTINPUT			  Near	 DGROUP:0291
PUTCHAR				  Near	 DGROUP:0372
READNUMBER			  Near	 DGROUP:01C5
START				  Near	 DGROUP:0100
TOBIN				  Near	 DGROUP:01E7
TODEC				  Near	 DGROUP:026E
TOHEX				  Near	 DGROUP:0218

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  002F Word	  Public  DATA
  _TEXT				  16  0376 Word	  Public  CODE
