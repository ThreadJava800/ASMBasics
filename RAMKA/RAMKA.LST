Turbo Assembler	 Version 4.1	    02/20/23 12:39:11	    Page 1
ramka.asm



      1	0000			     .model tiny
      2
      3	0000			     .data
      4	0000  45 6E 74 65 72 20	66+	     first:  db	'Enter frame line num (max: 25d): $'
      5	      72 61 6D 65 20 6C	69+
      6	      6E 65 20 6E 75 6D	20+
      7	      28 6D 61 78 3A 20	32+
      8	      35 64 29 3A 20 24
      9	0022  45 6E 74 65 72 20	66+	     second: db	'Enter frame col num (max: 80d): $'
     10	      72 61 6D 65 20 63	6F+
     11	      6C 20 6E 75 6D 20	28+
     12	      6D 61 78 3A 20 38	30+
     13	      64 29 3A 20 24
     14	0043  45 6E 74 65 72 20	66+	     third:  db	'Enter frame height (max: 25d):	$'
     15	      72 61 6D 65 20 68	65+
     16	      69 67 68 74 20 28	6D+
     17	      61 78 3A 20 32 35	64+
     18	      29 3A 20 24
     19	0063  45 6E 74 65 72 20	66+	     forth:  db	'Enter frame length (max: 80d):	$'
     20	      72 61 6D 65 20 6C	65+
     21	      6E 67 74 68 20 28	6D+
     22	      61 78 3A 20 38 30	64+
     23	      29 3A 20 24
     24	0083  45 6E 74 65 72 20	66+	     fifth:  db	'Enter frame type (1 - ones, 2 - twos, 3 - *, 4	- custom): $'
     25	      72 61 6D 65 20 74	79+
     26	      70 65 20 28 31 20	2D+
     27	      20 6F 6E 65 73 2C	20+
     28	      32 20 2D 20 74 77	6F+
     29	      73 2C 20 33 20 2D	20+
     30	      2A 2C 20 34 20 2D	20+
     31	      63 75 73 74 6F 6D	29+
     32	      3A 20 24
     33
     34	00BE  45 6E 74 65 72 20	75+	     ub:  db 'Enter upper bound	char: $'
     35	      70 70 65 72 20 62	6F+
     36	      75 6E 64 20 63 68	61+
     37	      72 3A 20 24
     38	00D7  0A 45 6E 74 65 72	20+	     rs:     db	0Ah, 'Enter right side border char: $'
     39	      72 69 67 68 74 20	73+
     40	      69 64 65 20 62 6F	72+
     41	      64 65 72 20 63 68	61+
     42	      72 3A 20 24
     43	00F7  0A 45 6E 74 65 72	20+	     lb:     db	0Ah, 'Enter lower bound	char: $'
     44	      6C 6F 77 65 72 20	62+
     45	      6F 75 6E 64 20 63	68+
     46	      61 72 3A 20 24
     47	0111  0A 45 6E 74 65 72	20+	     ls:     db	0Ah, 'Enter left side border char: $'
     48	      6C 65 66 74 20 73	69+
     49	      64 65 20 62 6F 72	64+
     50	      65 72 20 63 68 61	72+
     51	      3A 20 24
     52
     53	0130  0A 45 6E 74 65 72	20+	     lhc:    db	0Ah, 'Enter left higher	corner:	$'
     54	      6C 65 66 74 20 68	69+
     55	      67 68 65 72 20 63	6F+
     56	      72 6E 65 72 3A 20	24
     57	014C  0A 45 6E 74 65 72	20+	     rhc:    db	0Ah, 'Enter right higher corner: $'
Turbo Assembler	 Version 4.1	    02/20/23 12:39:11	    Page 2
ramka.asm



     58	      72 69 67 68 74 20	68+
     59	      69 67 68 65 72 20	63+
     60	      6F 72 6E 65 72 3A	20+
     61	      24
     62	0169  0A 45 6E 74 65 72	20+	     llc:    db	0Ah, 'Enter left lower corner: $'
     63	      6C 65 66 74 20 6C	6F+
     64	      77 65 72 20 63 6F	72+
     65	      6E 65 72 3A 20 24
     66	0184  0A 45 6E 74 65 72	20+	     rlc:    db	0Ah, 'Enter right lower	corner:	$'
     67	      72 69 67 68 74 20	6C+
     68	      6F 77 65 72 20 63	6F+
     69	      72 6E 65 72 3A 20	24
     70
     71	01A0  0A 45 6E 74 65 72	20+	     inside: db	0Ah, 'Enter inside char: $'
     72	      69 6E 73 69 64 65	20+
     73	      63 68 61 72 3A 20	24
     74
     75	01B5  59 6F 75 20 61 72	65+	     error_str:	 db 'You are mistaken! IDIOT. Aborting...$'
     76	      20 6D 69 73 74 61	6B+
     77	      65 6E 21 20 49 44	49+
     78	      4F 54 2E 20 41 62	6F+
     79	      72 74 69 6E 67 2E	2E+
     80	      2E 24
     81	01DA			     .code
     82
     83				     org 100h
     84
     85				     locals @@
     86
     87				     ask_input	     macro
     88
     89							     mov ah, 09h
     90							     mov dx, bx
     91							     int 21h
     92
     93							     call IntInput
     94							     call CheckValue
     95							     push si
     96
     97							     endm
     98
     99
    100				     char_input	     macro
    101
    102							     mov ah, 09h
    103							     int 21h
    104
    105							     mov ah, 01h
    106							     int 21h
    107
    108							     mov ah, 05h
    109							     push ax
    110
    111							     endm
    112
    113	0100  B9 0080		     Start:  mov cx, 80h
    114
Turbo Assembler	 Version 4.1	    02/20/23 12:39:11	    Page 3
ramka.asm



    115
    116	0103  BB B800				     mov bx, 0b800h
    117	0106  8E C3				     mov es, bx
    118	0108  BB 0000				     mov bx, 00h
    119
    120						     ; LINE NUMBER ;
    121	010B  B4 09				     mov ah, 09h
    122	010D  BA 0000r				     mov dx, offset first
    123	0110  CD 21				     int 21h
    124
    125	0112  E8 0208				     call IntInput
    126	0115  BF 0019				     mov di, 25d
    127	0118  E8 0147				     call CheckValue
    128	011B  8B C6				     mov ax, si
    129	011D  B9 00A0				     mov cx, 160d
    130	0120  F7 E1				     mul cx
    131	0122  8B D8				     mov bx, ax				     ; bx = line * 160
    132
    133						     ; STRING ID NUM ;
    134	0124  B4 09				     mov ah, 09h
    135	0126  BA 0022r				     mov dx, offset second
    136	0129  CD 21				     int 21h
    137
    138	012B  E8 01EF				     call IntInput
    139	012E  BF 0050				     mov di, 80d
    140	0131  E8 012E				     call CheckValue
    141	0134  03 F6				     add si, si
    142	0136  03 DE				     add bx, si				     ; bx += strintId
    143
    144	0138  53				     push bx				     ; position	ready
    145
    146						     ; FRAME HEIGHT ;
    147	0139  BB 0043r				     mov bx, offset third
    148	013C  BF 0019				     mov di, 25d
    149						     ask_input				     ; di = height
1   150
1   151	013F  B4 09					     mov ah, 09h
1   152	0141  8B D3					     mov dx, bx
1   153	0143  CD 21					     int 21h
1   154
1   155	0145  E8 01D5					     call IntInput
1   156	0148  E8 0117					     call CheckValue
1   157	014B  56					     push si
1   158
    159
    160						     ; FRAME LENGTH ;
    161	014C  BB 0063r				     mov bx, offset forth
    162	014F  BF 0050				     mov di, 80d
    163						     ask_input				     ; cx = length
1   164
1   165	0152  B4 09					     mov ah, 09h
1   166	0154  8B D3					     mov dx, bx
1   167	0156  CD 21					     int 21h
1   168
1   169	0158  E8 01C2					     call IntInput
1   170	015B  E8 0104					     call CheckValue
1   171	015E  56					     push si
Turbo Assembler	 Version 4.1	    02/20/23 12:39:11	    Page 4
ramka.asm



1   172
    173												     ; sizes ready
    174
    175						     ; TYPE NUMBER ;
    176	015F  BB 0083r				     mov bx, offset fifth
    177	0162  BF 0004				     mov di, 04h
    178						     ask_input
1   179
1   180	0165  B4 09					     mov ah, 09h
1   181	0167  8B D3					     mov dx, bx
1   182	0169  CD 21					     int 21h
1   183
1   184	016B  E8 01AF					     call IntInput
1   185	016E  E8 00F1					     call CheckValue
1   186	0171  56					     push si
1   187
    188	0172  5E				     pop si				     ; si = type
    189
    190	0173  83 FE 01				     cmp si, 01h
    191	0176  74 0F				     je	@@Parse1
    192	0178  83 FE 02				     cmp si, 02h
    193	017B  74 26				     je	@@Parse2
    194	017D  83 FE 03				     cmp si, 03h
    195	0180  74 3D				     je	@@Parse3
    196	0182  83 FE 04				     cmp si, 04h
    197	0185  74 54				     je	@@Parse4
    198
    199	0187  B9 0008		     @@Parse1:	     mov cx, 08h
    200	018A  50 55 8B EC C7 46	02+  @@Loop1:	     push 0531h			     ; 1s
    201	      0531 5D
    202	0194  E2 F4					     loop @@Loop1
    203	0196  50 55 8B EC C7 46	02+			     push 0020h			     ; inside =	space
    204	      0020 5D
    205
    206	01A0  E9 00B6					     jmp @@Call
    207
    208	01A3  B9 0008		     @@Parse2:	     mov cx, 08h
    209	01A6  50 55 8B EC C7 46	02+  @@Loop2:	     push 0532h
    210	      0532 5D
    211	01B0  E2 F4					     loop @@Loop2
    212	01B2  50 55 8B EC C7 46	02+			     push 0020h				     ; inside =	space
    213	      0020 5D
    214
    215	01BC  E9 009A					     jmp @@Call
    216
    217	01BF  B9 0008		     @@Parse3:	     mov cx, 08h
    218	01C2  50 55 8B EC C7 46	02+  @@Loop3:	     push 052ah
    219	      052A 5D
    220	01CC  E2 F4					     loop @@Loop3
    221	01CE  50 55 8B EC C7 46	02+			     push 0020h				     ; inside =	space
    222	      0020 5D
    223
    224	01D8  EB 7F 90					     jmp @@Call
    225
    226	01DB  BA 00BEr		     @@Parse4:	     mov dx, offset ub
    227							     char_input				     ; read upper bound
1   228
Turbo Assembler	 Version 4.1	    02/20/23 12:39:11	    Page 5
ramka.asm



1   229	01DE  B4 09					     mov ah, 09h
1   230	01E0  CD 21					     int 21h
1   231
1   232	01E2  B4 01					     mov ah, 01h
1   233	01E4  CD 21					     int 21h
1   234
1   235	01E6  B4 05					     mov ah, 05h
1   236	01E8  50					     push ax
1   237
    238
    239	01E9  BA 00D7r					     mov dx, offset rs		     ; read right side
    240							     char_input
1   241
1   242	01EC  B4 09					     mov ah, 09h
1   243	01EE  CD 21					     int 21h
1   244
1   245	01F0  B4 01					     mov ah, 01h
1   246	01F2  CD 21					     int 21h
1   247
1   248	01F4  B4 05					     mov ah, 05h
1   249	01F6  50					     push ax
1   250
    251
    252	01F7  BA 00F7r					     mov dx, offset lb
    253							     char_input				     ; lower bound
1   254
1   255	01FA  B4 09					     mov ah, 09h
1   256	01FC  CD 21					     int 21h
1   257
1   258	01FE  B4 01					     mov ah, 01h
1   259	0200  CD 21					     int 21h
1   260
1   261	0202  B4 05					     mov ah, 05h
1   262	0204  50					     push ax
1   263
    264
    265
    266	0205  BA 0111r					     mov dx, offset ls
    267							     char_input				     ; left side border
1   268
1   269	0208  B4 09					     mov ah, 09h
1   270	020A  CD 21					     int 21h
1   271
1   272	020C  B4 01					     mov ah, 01h
1   273	020E  CD 21					     int 21h
1   274
1   275	0210  B4 05					     mov ah, 05h
1   276	0212  50					     push ax
1   277
    278
    279
    280	0213  BA 0130r					     mov dx, offset lhc
    281							     char_input				     ; left higher corner
1   282
1   283	0216  B4 09					     mov ah, 09h
1   284	0218  CD 21					     int 21h
1   285
Turbo Assembler	 Version 4.1	    02/20/23 12:39:11	    Page 6
ramka.asm



1   286	021A  B4 01					     mov ah, 01h
1   287	021C  CD 21					     int 21h
1   288
1   289	021E  B4 05					     mov ah, 05h
1   290	0220  50					     push ax
1   291
    292
    293	0221  BA 014Cr					     mov dx, offset rhc
    294							     char_input				     ; right higher corner
1   295
1   296	0224  B4 09					     mov ah, 09h
1   297	0226  CD 21					     int 21h
1   298
1   299	0228  B4 01					     mov ah, 01h
1   300	022A  CD 21					     int 21h
1   301
1   302	022C  B4 05					     mov ah, 05h
1   303	022E  50					     push ax
1   304
    305
    306	022F  BA 0169r					     mov dx, offset llc
    307							     char_input				     ; left lower corner
1   308
1   309	0232  B4 09					     mov ah, 09h
1   310	0234  CD 21					     int 21h
1   311
1   312	0236  B4 01					     mov ah, 01h
1   313	0238  CD 21					     int 21h
1   314
1   315	023A  B4 05					     mov ah, 05h
1   316	023C  50					     push ax
1   317
    318
    319	023D  BA 0184r					     mov dx, offset rlc
    320							     char_input				     ; right lower corner
1   321
1   322	0240  B4 09					     mov ah, 09h
1   323	0242  CD 21					     int 21h
1   324
1   325	0244  B4 01					     mov ah, 01h
1   326	0246  CD 21					     int 21h
1   327
1   328	0248  B4 05					     mov ah, 05h
1   329	024A  50					     push ax
1   330
    331
    332	024B  BA 01A0r					     mov dx, offset inside
    333							     char_input				     ; inside char
1   334
1   335	024E  B4 09					     mov ah, 09h
1   336	0250  CD 21					     int 21h
1   337
1   338	0252  B4 01					     mov ah, 01h
1   339	0254  CD 21					     int 21h
1   340
1   341	0256  B4 05					     mov ah, 05h
1   342	0258  50					     push ax
Turbo Assembler	 Version 4.1	    02/20/23 12:39:11	    Page 7
ramka.asm



1   343
    344
    345
    346
    347	0259  E8 0102		     @@Call:	     call DrawRect
    348	025C  83 C4 1A				     add sp, 26
    349	025F  CD 20				     int 20h
    350	0261  C3		     @@Exit:	     ret
    351
    352
    353	0262			     CheckValue	     proc			     ; compares	if si <= di
    354
    355	0262  3B F7				     cmp si, di
    356	0264  77 03				     ja	@@Error
    357	0266  EB 0A 90				     jmp @@Exit
    358
    359	0269  B4 09		     @@Error:	     mov ah, 09h
    360	026B  BA 01B5r				     mov dx, offset error_str
    361	026E  CD 21				     int 21h
    362	0270  CD 20				     int 20h
    363
    364	0272  C3		     @@Exit:	     ret
    365	0273					     endp
    366
    367				     include ..\LIBA.ASM
1   368	0273			     .data
1   369	01DA  0A 54 68 69 73 20	73+	     ErrorMsg: db 0Ah, 'This symbol is not allowed!$'
    370	      79 6D 62 6F 6C 20	69+
    371	      73 20 6E 6F 74 20	61+
    372	      6C 6C 6F 77 65 64	21+
    373	      24
1   374
1   375	01F7			     .code
1   376
1   377				     ;-----------------------------------------------------------
1   378				     ; Print binary of value
1   379				     ;-----------------------------------------------------------
1   380				     ; Entry:	     AX	= value	to convert to
1   381				     ;		     BX	= coordinates to print on string
1   382				     ; Exit:	     None
1   383				     ; Expects:	     ES	-> videomem (b800h)
1   384				     ; Destroys:     BX, CX, DL
1   385				     ;-----------------------------------------------------------
1   386	0273			     ToBin   proc
1   387
1   388	0273  BA 8000			     mov dx, 8000h	     ; dx = 2 ** 15
1   389	0276  EB 17 90			     jmp @@NewByte
1   390
1   391	0279			     @@Print1:
1   392	0279  26: C7 07	0531		     mov es:[bx], 0531h	     ; put 0 to	videomem
1   393	027E  83 C3 02			     add bx, 2		     ; bx += 2
1   394	0281  EB 17 90			     jmp @@Next
1   395
1   396	0284			     @@Print0:
1   397	0284  26: C7 07	0530		     mov es:[bx], 0530h	     ; put 0 to	videomem
1   398	0289  83 C3 02			     add bx, 2		     ; bx += 2
1   399	028C  EB 0C 90			     jmp @@Next
Turbo Assembler	 Version 4.1	    02/20/23 12:39:11	    Page 8
ramka.asm



1   400
1   401	028F			     @@NewByte:
1   402	028F  8B C8			     mov cx, ax		     ; cx = ax
1   403	0291  23 CA			     and cx, dx		     ; cx && dx
1   404
1   405	0293  83 F9 00			     cmp cx, 0h		     ; if cx ==	0: print(0) else: print(1)
1   406	0296  74 EC			     je	 @@Print0
1   407	0298  EB DF			     jmp @@Print1
1   408
1   409	029A			     @@Next:
1   410	029A  83 FA 01			     cmp dx, 1h		     ; if dx ==	1: return
1   411	029D  74 04			     je	@@Exit
1   412
1   413	029F  D1 EA			     shr dx, 1		     ; dx >> 1
1   414	02A1  EB EC			     jmp @@NewByte
1   415
1   416	02A3  C3		     @@Exit: ret
1   417	02A4				     endp
1   418
1   419				     ;-----------------------------------------------------------
1   420				     ; Print hex of value
1   421				     ;-----------------------------------------------------------
1   422				     ; Entry:	     SI	= value	to convert to
1   423				     ;		     BX	= coordinates to print in cmd
1   424				     ; Exit:	     None
1   425				     ; Expects:	     ES	-> videomem (b800h)
1   426				     ; Destroys:     AX, BX, CX, DX, DI, BP, SP
1   427				     ;----------------------------------------------------------
1   428	02A4			     ToHex   proc
1   429
1   430	02A4  BA 8000			     mov dx, 8000h	     ; first byte is 1 others are 0
1   431	02A7  B9 0004			     mov cx, 0004h	     ; cx = 0
1   432	02AA  BF 0000			     mov di, 0000h
1   433
1   434	02AD			     @@ReadBytes:
1   435	02AD  FE C5			     inc ch		     ; ch++ (byte counter in 4th)
1   436	02AF  80 FD 05			     cmp ch, 05h	     ; if ch ==	5: exit	else: continue
1   437	02B2  74 45			     je	@@Exit
1   438	02B4  EB 01 90			     jmp @@Proceed4bit
1   439
1   440	02B7			     @@Proceed4bit:
1   441	02B7  8B C6			     mov ax, si		     ; ax = si (given value)
1   442	02B9  23 C2			     and ax, dx		     ; ax && ax
1   443
1   444	02BB  3D 0000			     cmp ax, 00h	     ; if ax ==	0: SkipMul()
1   445	02BE  74 0E			     je	@@SkipMul
1   446
1   447	02C0  B0 01			     mov al, 01h	     ; al = 1 (value to	add)
1   448	02C2  B4 00			     mov ah, 00h	     ; ah = 0 (needed not to brake ax)
1   449	02C4  80 E9 01			     sub cl, 1		     ; cl-- (bit num)
1   450	02C7  D2 E0			     shl al, cl		     ; al = 2^cl
1   451	02C9  80 C1 01			     add cl, 1		     ; cl++
1   452	02CC  03 F8			     add di, ax		     ; di += ax	(di - result to	print)
1   453
1   454	02CE			     @@SkipMul:
1   455	02CE  80 E9 01			     sub cl, 1		     ; cl--
1   456	02D1  D1 EA			     shr dx, 1		     ; dx /= 2
Turbo Assembler	 Version 4.1	    02/20/23 12:39:11	    Page 9
ramka.asm



1   457
1   458	02D3  80 F9 00			     cmp cl, 00h
1   459	02D6  74 02			     je	@@PrintSymbol
1   460	02D8  EB DD			     jmp @@Proceed4bit	     ; if cl ==	0: Print else continue reading byte
1   461
1   462	02DA			     @@PrintSymbol:
1   463	02DA  8B C7			     mov ax, di		     ; ax = di
1   464	02DC  B4 05			     mov ah, 05h	     ; ah = 05h	(COLOR)
1   465
1   466	02DE  3C 0A			     cmp al, 10d	     ; if al >=	10: PrintAsLetter
1   467	02E0  73 05			     jae @@LetterPrint
1   468
1   469	02E2  04 30			     add al, 30h	     ; else: al	+= 30h -> print	as ASCII
1   470	02E4  EB 06 90			     jmp @@ContinuePrint
1   471
1   472	02E7			     @@LetterPrint:
1   473	02E7  04 37			     add al, 37h	     ; al += 37	-> add letter as ASCII
1   474	02E9  EB 01 90			     jmp @@ContinuePrint
1   475
1   476	02EC			     @@ContinuePrint:
1   477	02EC  26: 89 07			     mov es:[bx], ax	     ; put ax to videomem
1   478	02EF  83 C3 02			     add bx, 2		     ; bx += 2
1   479	02F2  BF 0000			     mov di, 00h	     ; di = 0
1   480	02F5  B1 04			     mov cl, 04h	     ; cl = 4 (byte count)
1   481	02F7  EB B4			     jmp @@ReadBytes
1   482
1   483	02F9			     @@Exit:
1   484	02F9  C3			     ret
1   485	02FA				     endp
1   486
1   487
1   488				     ;-----------------------------------------------------------
1   489				     ; Print dec of value
1   490				     ;-----------------------------------------------------------
1   491				     ; Entry:	     SI	= value	to convert to
1   492				     ;		     BX	= coordinates to print on string
1   493				     ; Exit:	     None
1   494				     ; Expects:	     ES	-> videomem (b800h)
1   495				     ; Destroys:     AX, BX, CX, DX, DI
1   496				     ;-----------------------------------------------------------
1   497	02FA			     ToDec   proc
1   498
1   499	02FA  8B C6			     mov ax, si		     ; ax = si
1   500	02FC  BF 0006			     mov di, 06h	     ; amount of digits
1   501
1   502	02FF			     @@PrintSymb:
1   503	02FF  B9 000A			     mov cx, 000Ah	     ; cx = 10
1   504	0302  F7 F1			     div cx		     ; ax = ax / 10, dx	= ax % 10
1   505
1   506	0304  80 C2 30			     add dl, 30h	     ; dl += 30	(symb ascii)
1   507	0307  B6 05			     mov dh, 05h	     ; dh = 5	(color)
1   508
1   509	0309  26: 89 17			     mov es:[bx], dx
1   510	030C  BA 0000			     mov dx, 0000h	     ; print on	screen
1   511
1   512	030F  83 EB 02			     sub bx, 2		     ; bx -= 2
1   513	0312  83 EF 01			     sub di, 1		     ; di --
Turbo Assembler	 Version 4.1	    02/20/23 12:39:11	    Page 10
ramka.asm



1   514
1   515	0315  83 FF 00			     cmp di, 0
1   516	0318  74 02			     je	@@Exit
1   517
1   518	031A  EB E3			     jmp @@PrintSymb
1   519
1   520	031C  C3		     @@Exit: ret
1   521	031D				     endp
1   522
1   523
1   524				     ;------------------------------------------------------------
1   525				     ; Reads dec number
1   526				     ;------------------------------------------------------------
1   527				     ; Entry:	     None
1   528				     ; Exit:	     DI	- dec value
1   529				     ; Expects:	     None
1   530				     ; Destroys:     AX, CX, DI, SI
1   531				     ;------------------------------------------------------------
1   532	031D			     IntInput	     proc
1   533
1   534	031D  BF 0000				     mov di, 0000h	     ; di = 0
1   535	0320  B9 0005				     mov cx, 0005h	     ; cx = 5 (max amount of numbers)
1   536	0323  EB 0B 90				     jmp @@Loop
1   537	0326			     @@OnError:
1   538	0326  BA 01DAr				     mov dx, offset ErrorMsg
1   539	0329  B4 09				     mov ah, 09h
1   540	032B  CD 21				     int 21h		     ; print Error message
1   541
1   542	032D  EB 2E 90				     jmp @@Exit
1   543
1   544	0330  B4 01		     @@Loop:	     mov ah, 01h
1   545	0332  CD 21				     int 21h		     ; reading char -> al
1   546
1   547	0334  3C 0D				     cmp al, 0Dh
1   548	0336  74 25				     je	@@Exit
1   549
1   550	0338  3C 13				     cmp al, 13h
1   551	033A  74 21				     je	@@Exit		     ; if al ==	'\n' ||	'\r': retunr
1   552
1   553	033C  3C 30				     cmp al, 30h
1   554	033E  72 E6				     jb	@@OnError
1   555
1   556	0340  3C 40				     cmp al, 40h
1   557	0342  77 E2				     ja	@@OnError	     ; if !alnum(al): OnError()
1   558
1   559	0344  2C 30				     sub al, 30h	     ; al -= 30	(ascii -> number)
1   560	0346  B4 00				     mov ah, 00h
1   561
1   562	0348  8B F0				     mov si, ax
1   563	034A  8B C7				     mov ax, di
1   564	034C  8B FE				     mov di, si		     ; swap (ax, di)
1   565
1   566	034E  BE 000A				     mov si, 10d
1   567	0351  F7 E6				     mul si		     ; ax *= 10
1   568
1   569	0353  03 C7				     add ax, di		     ; ax += di	(last number)
1   570
Turbo Assembler	 Version 4.1	    02/20/23 12:39:11	    Page 11
ramka.asm



1   571	0355  8B F0				     mov si, ax
1   572	0357  8B C7				     mov ax, di
1   573	0359  8B FE				     mov di, si		     ; swap (ax, di)
1   574
1   575	035B  E2 D3				     loop @@Loop
1   576
1   577	035D  C3		     @@Exit:	     ret
1   578	035E					     endp
1   579
1   580
1   581				     ;-------------------------------------------------------------
1   582				     ; Draws rectangle on screen with given borders
1   583				     ;-------------------------------------------------------------
1   584				     ; Entry:	     AX	- horizontal border
1   585				     ;		     DX	- vertical   border
1   586				     ;		     BX	- left highest point
1   587				     ;		     CX	- horizontal size
1   588				     ;		     DI	- vertical   size
1   589				     ; Exit:	     None
1   590				     ; Expects:	     ES	-> videomem (0b800h)
1   591				     ; Destroys:     BP, SI
1   592				     ;-------------------------------------------------------------
1   593	035E			     DrawRect	     proc
1   594
1   595	035E  55				     push bp
1   596	035F  8B EC				     mov bp, sp
1   597
1   598	0361  8B 5E 1A				     mov bx, [bp + 26d]
1   599	0364  8B 7E 18				     mov di, [bp + 24d]
1   600	0367  8B 4E 16				     mov cx, [bp + 22d]
1   601
1   602	036A  83 E9 02				     sub cx, 2
1   603	036D  8B F7				     mov si, di		     ; i = di
1   604	036F  EB 0C 90				     jmp @@MainCycle
1   605
1   606	0372  83 EE 01		     @@IterateI:     sub si, 1		     ; i--
1   607
1   608	0375  2B D9				     sub bx, cx		     ; start vertically
1   609	0377  2B D9				     sub bx, cx
1   610	0379  81 C3 00A0			     add bx, 160d	     ; new line
1   611
1   612	037D  8B C1		     @@MainCycle:    mov ax, cx		     ; j = cx
1   613
1   614	037F  83 EB 02				     sub bx, 2		     ; bx -= 2 (then i += 2 to print)
1   615
1   616	0382  83 FE 00				     cmp si, 00h
1   617	0385  75 39				     jne @@DrawV
1   618
1   619	0387  83 C3 02		     @@ContinueMain: add bx, 2		     ; bx += 2 (watch previous comment)
1   620	038A  83 FE 00				     cmp si, 00h
1   621	038D  74 79				     je	@@Exit		     ; if i == 0: exit(0)
1   622
1   623	038F  8B 56 04		     @@SecondCycle:  mov dx, [bp + 4]
1   624	0392  26: 89 17				     mov es:[bx], dx
1   625
1   626	0395  3D 0000				     cmp ax, 00h
1   627	0398  74 4A				     je	@@DrawRightV	     ; print left border (WORKS!)
Turbo Assembler	 Version 4.1	    02/20/23 12:39:11	    Page 12
ramka.asm



1   628
1   629	039A  3B F7				     cmp si, di
1   630	039C  74 12				     je	@@DrawH		     ; draw highest border
1   631
1   632	039E  83 FE 01				     cmp si, 01h
1   633	03A1  74 15				     je	@@DrawLower	     ; draw lowest border
1   634
1   635	03A3			     @@ContinueSecond:
1   636	03A3  3D 0000				     cmp ax, 00h
1   637	03A6  74 CA				     je	@@IterateI	     ; if j == 0: i++
1   638
1   639	03A8  2D 0001				     sub ax, 1		     ; else: j--
1   640	03AB  83 C3 02				     add bx, 2		     ; bx += 2
1   641	03AE  EB DF				     jmp @@SecondCycle
1   642
1   643	03B0  8B 56 14		     @@DrawH:	     mov dx, [bp + 20d]
1   644	03B3  26: 89 17				     mov es:[bx], dx
1   645	03B6  EB EB				     jmp @@ContinueSecond
1   646
1   647	03B8  8B 56 10		     @@DrawLower:    mov dx, [bp + 16d]
1   648	03BB  26: 89 17				     mov es:[bx], dx
1   649	03BE  EB E3				     jmp @@ContinueSecond
1   650
1   651	03C0  83 FE 01		     @@DrawV:	     cmp si, 01h
1   652	03C3  74 0F				     je	@@LowLeft
1   653	03C5  3B F7				     cmp si, di
1   654	03C7  74 03				     je	@@HighLeft
1   655	03C9  EB 11 90				     jmp @@Left
1   656
1   657	03CC  8B 56 0C		     @@HighLeft:     mov dx, [bp + 12d]
1   658	03CF  26: 89 17				     mov es:[bx], dx
1   659	03D2  EB B3				     jmp @@ContinueMain
1   660
1   661	03D4  8B 56 08		     @@LowLeft:	     mov dx, [bp + 8d]
1   662	03D7  26: 89 17				     mov es:[bx], dx
1   663	03DA  EB AB				     jmp @@ContinueMain
1   664
1   665	03DC  8B 56 0E		     @@Left:	     mov dx, [bp + 14d]
1   666	03DF  26: 89 17				     mov es:[bx], dx
1   667	03E2  EB A3				     jmp @@ContinueMain
1   668
1   669	03E4  83 FE 01		     @@DrawRightV:   cmp si, 01h
1   670	03E7  74 07				     je	@@LowRight
1   671	03E9  3B F7				     cmp si, di
1   672	03EB  74 0B				     je	@@HighRight
1   673	03ED  EB 11 90				     jmp @@Right
1   674
1   675	03F0  8B 56 06		     @@LowRight:     mov dx, [bp + 6d]
1   676	03F3  26: 89 17				     mov es:[bx], dx
1   677	03F6  EB AB				     jmp @@ContinueSecond
1   678
1   679	03F8  8B 56 0A		     @@HighRight:    mov dx, [bp + 10d]
1   680	03FB  26: 89 17				     mov es:[bx], dx
1   681	03FE  EB A3				     jmp @@ContinueSecond
1   682
1   683	0400  8B 56 12		     @@Right:	     mov dx, [bp + 18d]
1   684	0403  26: 89 17				     mov es:[bx], dx
Turbo Assembler	 Version 4.1	    02/20/23 12:39:11	    Page 13
ramka.asm



1   685	0406  EB 9B				     jmp @@ContinueSecond
1   686
1   687	0408  5D		     @@Exit:	     pop bp
1   688	0409  C3				     ret
1   689	040A					     endp
1   690
1   691
1   692				     ;-----------------------------------------------------------
1   693				     ; Put symbol with given ascii to videomem
1   694				     ;-----------------------------------------------------------
1   695				     ; Entry:	     BX	= coordinates where to print symbol
1   696				     ;		     CX	= symbol itself
1   697				     ; Exit:	     None
1   698				     ; Expects:	     ES	-> videomem (b800h)
1   699				     ; Destroys:     None
1   700				     ;-----------------------------------------------------------
1   701	040A			     PutChar proc
1   702
1   703	040A  26: 89 0F			     mov es:[bx], cx	     ; put symbol to videomem
1   704
1   705	040D  C3			     ret
1   706	040E				     endp
1   707
    708
    709				     end     Start
Turbo Assembler	 Version 4.1	    02/20/23 12:39:11	    Page 14
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "02/20/23"
??FILENAME			  Text	 "ramka	  "
??TIME				  Text	 "12:39:11"
??VERSION			  Number 040A
@32BIT				  Text	 0
@@CALL				  Near	 DGROUP:0259
@@CONTINUEMAIN			  Near	 DGROUP:0387
@@CONTINUEPRINT			  Near	 DGROUP:02EC
@@CONTINUESECOND		  Near	 DGROUP:03A3
@@DRAWH				  Near	 DGROUP:03B0
@@DRAWLOWER			  Near	 DGROUP:03B8
@@DRAWRIGHTV			  Near	 DGROUP:03E4
@@DRAWV				  Near	 DGROUP:03C0
@@ERROR				  Near	 DGROUP:0269
@@EXIT				  Near	 DGROUP:0261
@@EXIT				  Near	 DGROUP:0272
@@EXIT				  Near	 DGROUP:02A3
@@EXIT				  Near	 DGROUP:02F9
@@EXIT				  Near	 DGROUP:031C
@@EXIT				  Near	 DGROUP:035D
@@EXIT				  Near	 DGROUP:0408
@@HIGHLEFT			  Near	 DGROUP:03CC
@@HIGHRIGHT			  Near	 DGROUP:03F8
@@ITERATEI			  Near	 DGROUP:0372
@@LEFT				  Near	 DGROUP:03DC
@@LETTERPRINT			  Near	 DGROUP:02E7
@@LOOP				  Near	 DGROUP:0330
@@LOOP1				  Near	 DGROUP:018A
@@LOOP2				  Near	 DGROUP:01A6
@@LOOP3				  Near	 DGROUP:01C2
@@LOWLEFT			  Near	 DGROUP:03D4
@@LOWRIGHT			  Near	 DGROUP:03F0
@@MAINCYCLE			  Near	 DGROUP:037D
@@NEWBYTE			  Near	 DGROUP:028F
@@NEXT				  Near	 DGROUP:029A
@@ONERROR			  Near	 DGROUP:0326
@@PARSE1			  Near	 DGROUP:0187
@@PARSE2			  Near	 DGROUP:01A3
@@PARSE3			  Near	 DGROUP:01BF
@@PARSE4			  Near	 DGROUP:01DB
@@PRINT0			  Near	 DGROUP:0284
@@PRINT1			  Near	 DGROUP:0279
@@PRINTSYMB			  Near	 DGROUP:02FF
@@PRINTSYMBOL			  Near	 DGROUP:02DA
@@PROCEED4BIT			  Near	 DGROUP:02B7
@@READBYTES			  Near	 DGROUP:02AD
@@RIGHT				  Near	 DGROUP:0400
@@SECONDCYCLE			  Near	 DGROUP:038F
@@SKIPMUL			  Near	 DGROUP:02CE
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0101H
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
Turbo Assembler	 Version 4.1	    02/20/23 12:39:11	    Page 15
Symbol Table



@DATASIZE			  Text	 0
@FILENAME			  Text	 RAMKA
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
CHECKVALUE			  Near	 DGROUP:0262
DRAWRECT			  Near	 DGROUP:035E
ERRORMSG			  Near	 DGROUP:01DA
ERROR_STR			  Near	 DGROUP:01B5
FIFTH				  Near	 DGROUP:0083
FIRST				  Near	 DGROUP:0000
FORTH				  Near	 DGROUP:0063
INSIDE				  Near	 DGROUP:01A0
INTINPUT			  Near	 DGROUP:031D
LB				  Near	 DGROUP:00F7
LHC				  Near	 DGROUP:0130
LLC				  Near	 DGROUP:0169
LS				  Near	 DGROUP:0111
PUTCHAR				  Near	 DGROUP:040A
RHC				  Near	 DGROUP:014C
RLC				  Near	 DGROUP:0184
RS				  Near	 DGROUP:00D7
SECOND				  Near	 DGROUP:0022
START				  Near	 DGROUP:0100
THIRD				  Near	 DGROUP:0043
TOBIN				  Near	 DGROUP:0273
TODEC				  Near	 DGROUP:02FA
TOHEX				  Near	 DGROUP:02A4
UB				  Near	 DGROUP:00BE

Macro Name

ASK_INPUT
CHAR_INPUT

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  01F7 Word	  Public  DATA
  _TEXT				  16  040E Word	  Public  CODE
