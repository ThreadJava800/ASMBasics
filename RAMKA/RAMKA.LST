Turbo Assembler	 Version 4.1	    02/20/23 13:34:22	    Page 1
ramka.asm



      1	0000			     .model tiny
      2
      3	0000			     .data
      4	0000  45 6E 74 65 72 20	66+	     first:  db	'Enter frame line num (max: 25d): $'
      5	      72 61 6D 65 20 6C	69+
      6	      6E 65 20 6E 75 6D	20+
      7	      28 6D 61 78 3A 20	32+
      8	      35 64 29 3A 20 24
      9	0022  45 6E 74 65 72 20	66+	     second: db	'Enter frame col num (max: 80d): $'
     10	      72 61 6D 65 20 63	6F+
     11	      6C 20 6E 75 6D 20	28+
     12	      6D 61 78 3A 20 38	30+
     13	      64 29 3A 20 24
     14	0043  45 6E 74 65 72 20	66+	     third:  db	'Enter frame height (max: 25d):	$'
     15	      72 61 6D 65 20 68	65+
     16	      69 67 68 74 20 28	6D+
     17	      61 78 3A 20 32 35	64+
     18	      29 3A 20 24
     19	0063  45 6E 74 65 72 20	66+	     forth:  db	'Enter frame length (max: 80d):	$'
     20	      72 61 6D 65 20 6C	65+
     21	      6E 67 74 68 20 28	6D+
     22	      61 78 3A 20 38 30	64+
     23	      29 3A 20 24
     24	0083  45 6E 74 65 72 20	66+	     fifth:  db	'Enter frame type (1 - ones, 2 - twos, 3 - *, 4	- custom): $'
     25	      72 61 6D 65 20 74	79+
     26	      70 65 20 28 31 20	2D+
     27	      20 6F 6E 65 73 2C	20+
     28	      32 20 2D 20 74 77	6F+
     29	      73 2C 20 33 20 2D	20+
     30	      2A 2C 20 34 20 2D	20+
     31	      63 75 73 74 6F 6D	29+
     32	      3A 20 24
     33
     34	00BE  45 6E 74 65 72 20	75+	     ub:  db 'Enter upper bound	char: $'
     35	      70 70 65 72 20 62	6F+
     36	      75 6E 64 20 63 68	61+
     37	      72 3A 20 24
     38	00D7  0A 45 6E 74 65 72	20+	     rs:     db	0Ah, 'Enter right side border char: $'
     39	      72 69 67 68 74 20	73+
     40	      69 64 65 20 62 6F	72+
     41	      64 65 72 20 63 68	61+
     42	      72 3A 20 24
     43	00F7  0A 45 6E 74 65 72	20+	     lb:     db	0Ah, 'Enter lower bound	char: $'
     44	      6C 6F 77 65 72 20	62+
     45	      6F 75 6E 64 20 63	68+
     46	      61 72 3A 20 24
     47	0111  0A 45 6E 74 65 72	20+	     ls:     db	0Ah, 'Enter left side border char: $'
     48	      6C 65 66 74 20 73	69+
     49	      64 65 20 62 6F 72	64+
     50	      65 72 20 63 68 61	72+
     51	      3A 20 24
     52
     53	0130  0A 45 6E 74 65 72	20+	     lhc:    db	0Ah, 'Enter left higher	corner:	$'
     54	      6C 65 66 74 20 68	69+
     55	      67 68 65 72 20 63	6F+
     56	      72 6E 65 72 3A 20	24
     57	014C  0A 45 6E 74 65 72	20+	     rhc:    db	0Ah, 'Enter right higher corner: $'
Turbo Assembler	 Version 4.1	    02/20/23 13:34:22	    Page 2
ramka.asm



     58	      72 69 67 68 74 20	68+
     59	      69 67 68 65 72 20	63+
     60	      6F 72 6E 65 72 3A	20+
     61	      24
     62	0169  0A 45 6E 74 65 72	20+	     llc:    db	0Ah, 'Enter left lower corner: $'
     63	      6C 65 66 74 20 6C	6F+
     64	      77 65 72 20 63 6F	72+
     65	      6E 65 72 3A 20 24
     66	0184  0A 45 6E 74 65 72	20+	     rlc:    db	0Ah, 'Enter right lower	corner:	$'
     67	      72 69 67 68 74 20	6C+
     68	      6F 77 65 72 20 63	6F+
     69	      72 6E 65 72 3A 20	24
     70
     71	01A0  0A 45 6E 74 65 72	20+	     inside: db	0Ah, 'Enter inside char: $'
     72	      69 6E 73 69 64 65	20+
     73	      63 68 61 72 3A 20	24
     74
     75	01B5  59 6F 75 20 61 72	65+	     error_str:	 db 'You are mistaken! IDIOT. Aborting...$'
     76	      20 6D 69 73 74 61	6B+
     77	      65 6E 21 20 49 44	49+
     78	      4F 54 2E 20 41 62	6F+
     79	      72 74 69 6E 67 2E	2E+
     80	      2E 24
     81	01DA			     .code
     82
     83				     org 100h
     84
     85				     locals @@
     86
     87	0100			     Start:
     88	0100  BB 0082				     mov bx, 0082h
     89	0103  E8 000E				     call ReadNumber
     90
     91	0106  8B F0				     mov si, ax
     92	0108  BB B800				     mov bx, 0b800h
     93	010B  8E C3				     mov es, bx
     94	010D  BB 0348				     mov bx, 160d * 5d + 40d
     95	0110  E8 00AC				     call ToDec
     96
     97	0113  C3		     @@Exit:	     ret
     98
     99
    100	0114			     ReadNumber		     proc
    101	0114  B8 0000						     mov ax, 00h
    102	0117  BA 0000						     mov dx, 00h
    103
    104	011A  8A 0F		     @@Loop:		     mov byte ptr cl, [bx]
    105	011C  80 F9 0D						     cmp cl, 0Dh
    106	011F  74 13						     je	@@Exit
    107
    108	0121  80 F9 20						     cmp cl, 20h
    109	0124  74 0E						     je	@@Exit
    110
    111	0126  BE 000A						     mov si, 10d
    112	0129  F7 E6						     mul si
    113
    114	012B  02 C1						     add al, cl
Turbo Assembler	 Version 4.1	    02/20/23 13:34:22	    Page 3
ramka.asm



    115	012D  2C 30						     sub al, 30h
    116
    117	012F  80 C3 01						     add bl, 1
    118	0132  EB E6						     jmp @@Loop
    119
    120	0134  80 C3 01		     @@Exit:		     add bl, 1
    121	0137  C3						     ret
    122	0138							     endp
    123
    124
    125				     include ..\LIBA.ASM
1   126	0138			     .data
1   127	01DA  0A 54 68 69 73 20	73+	     ErrorMsg: db 0Ah, 'This symbol is not allowed!$'
    128	      79 6D 62 6F 6C 20	69+
    129	      73 20 6E 6F 74 20	61+
    130	      6C 6C 6F 77 65 64	21+
    131	      24
1   132
1   133	01F7			     .code
1   134
1   135				     ;-----------------------------------------------------------
1   136				     ; Print binary of value
1   137				     ;-----------------------------------------------------------
1   138				     ; Entry:	     AX	= value	to convert to
1   139				     ;		     BX	= coordinates to print on string
1   140				     ; Exit:	     None
1   141				     ; Expects:	     ES	-> videomem (b800h)
1   142				     ; Destroys:     BX, CX, DL
1   143				     ;-----------------------------------------------------------
1   144	0138			     ToBin   proc
1   145
1   146	0138  BA 8000			     mov dx, 8000h	     ; dx = 2 ** 15
1   147	013B  EB 17 90			     jmp @@NewByte
1   148
1   149	013E			     @@Print1:
1   150	013E  26: C7 07	0531		     mov es:[bx], 0531h	     ; put 0 to	videomem
1   151	0143  83 C3 02			     add bx, 2		     ; bx += 2
1   152	0146  EB 17 90			     jmp @@Next
1   153
1   154	0149			     @@Print0:
1   155	0149  26: C7 07	0530		     mov es:[bx], 0530h	     ; put 0 to	videomem
1   156	014E  83 C3 02			     add bx, 2		     ; bx += 2
1   157	0151  EB 0C 90			     jmp @@Next
1   158
1   159	0154			     @@NewByte:
1   160	0154  8B C8			     mov cx, ax		     ; cx = ax
1   161	0156  23 CA			     and cx, dx		     ; cx && dx
1   162
1   163	0158  83 F9 00			     cmp cx, 0h		     ; if cx ==	0: print(0) else: print(1)
1   164	015B  74 EC			     je	 @@Print0
1   165	015D  EB DF			     jmp @@Print1
1   166
1   167	015F			     @@Next:
1   168	015F  83 FA 01			     cmp dx, 1h		     ; if dx ==	1: return
1   169	0162  74 04			     je	@@Exit
1   170
1   171	0164  D1 EA			     shr dx, 1		     ; dx >> 1
Turbo Assembler	 Version 4.1	    02/20/23 13:34:22	    Page 4
ramka.asm



1   172	0166  EB EC			     jmp @@NewByte
1   173
1   174	0168  C3		     @@Exit: ret
1   175	0169				     endp
1   176
1   177				     ;-----------------------------------------------------------
1   178				     ; Print hex of value
1   179				     ;-----------------------------------------------------------
1   180				     ; Entry:	     SI	= value	to convert to
1   181				     ;		     BX	= coordinates to print in cmd
1   182				     ; Exit:	     None
1   183				     ; Expects:	     ES	-> videomem (b800h)
1   184				     ; Destroys:     AX, BX, CX, DX, DI, BP, SP
1   185				     ;----------------------------------------------------------
1   186	0169			     ToHex   proc
1   187
1   188	0169  BA 8000			     mov dx, 8000h	     ; first byte is 1 others are 0
1   189	016C  B9 0004			     mov cx, 0004h	     ; cx = 0
1   190	016F  BF 0000			     mov di, 0000h
1   191
1   192	0172			     @@ReadBytes:
1   193	0172  FE C5			     inc ch		     ; ch++ (byte counter in 4th)
1   194	0174  80 FD 05			     cmp ch, 05h	     ; if ch ==	5: exit	else: continue
1   195	0177  74 45			     je	@@Exit
1   196	0179  EB 01 90			     jmp @@Proceed4bit
1   197
1   198	017C			     @@Proceed4bit:
1   199	017C  8B C6			     mov ax, si		     ; ax = si (given value)
1   200	017E  23 C2			     and ax, dx		     ; ax && ax
1   201
1   202	0180  3D 0000			     cmp ax, 00h	     ; if ax ==	0: SkipMul()
1   203	0183  74 0E			     je	@@SkipMul
1   204
1   205	0185  B0 01			     mov al, 01h	     ; al = 1 (value to	add)
1   206	0187  B4 00			     mov ah, 00h	     ; ah = 0 (needed not to brake ax)
1   207	0189  80 E9 01			     sub cl, 1		     ; cl-- (bit num)
1   208	018C  D2 E0			     shl al, cl		     ; al = 2^cl
1   209	018E  80 C1 01			     add cl, 1		     ; cl++
1   210	0191  03 F8			     add di, ax		     ; di += ax	(di - result to	print)
1   211
1   212	0193			     @@SkipMul:
1   213	0193  80 E9 01			     sub cl, 1		     ; cl--
1   214	0196  D1 EA			     shr dx, 1		     ; dx /= 2
1   215
1   216	0198  80 F9 00			     cmp cl, 00h
1   217	019B  74 02			     je	@@PrintSymbol
1   218	019D  EB DD			     jmp @@Proceed4bit	     ; if cl ==	0: Print else continue reading byte
1   219
1   220	019F			     @@PrintSymbol:
1   221	019F  8B C7			     mov ax, di		     ; ax = di
1   222	01A1  B4 05			     mov ah, 05h	     ; ah = 05h	(COLOR)
1   223
1   224	01A3  3C 0A			     cmp al, 10d	     ; if al >=	10: PrintAsLetter
1   225	01A5  73 05			     jae @@LetterPrint
1   226
1   227	01A7  04 30			     add al, 30h	     ; else: al	+= 30h -> print	as ASCII
1   228	01A9  EB 06 90			     jmp @@ContinuePrint
Turbo Assembler	 Version 4.1	    02/20/23 13:34:22	    Page 5
ramka.asm



1   229
1   230	01AC			     @@LetterPrint:
1   231	01AC  04 37			     add al, 37h	     ; al += 37	-> add letter as ASCII
1   232	01AE  EB 01 90			     jmp @@ContinuePrint
1   233
1   234	01B1			     @@ContinuePrint:
1   235	01B1  26: 89 07			     mov es:[bx], ax	     ; put ax to videomem
1   236	01B4  83 C3 02			     add bx, 2		     ; bx += 2
1   237	01B7  BF 0000			     mov di, 00h	     ; di = 0
1   238	01BA  B1 04			     mov cl, 04h	     ; cl = 4 (byte count)
1   239	01BC  EB B4			     jmp @@ReadBytes
1   240
1   241	01BE			     @@Exit:
1   242	01BE  C3			     ret
1   243	01BF				     endp
1   244
1   245
1   246				     ;-----------------------------------------------------------
1   247				     ; Print dec of value
1   248				     ;-----------------------------------------------------------
1   249				     ; Entry:	     SI	= value	to convert to
1   250				     ;		     BX	= coordinates to print on string
1   251				     ; Exit:	     None
1   252				     ; Expects:	     ES	-> videomem (b800h)
1   253				     ; Destroys:     AX, BX, CX, DX, DI
1   254				     ;-----------------------------------------------------------
1   255	01BF			     ToDec   proc
1   256
1   257	01BF  8B C6			     mov ax, si		     ; ax = si
1   258	01C1  BF 0006			     mov di, 06h	     ; amount of digits
1   259
1   260	01C4			     @@PrintSymb:
1   261	01C4  B9 000A			     mov cx, 000Ah	     ; cx = 10
1   262	01C7  F7 F1			     div cx		     ; ax = ax / 10, dx	= ax % 10
1   263
1   264	01C9  80 C2 30			     add dl, 30h	     ; dl += 30	(symb ascii)
1   265	01CC  B6 05			     mov dh, 05h	     ; dh = 5	(color)
1   266
1   267	01CE  26: 89 17			     mov es:[bx], dx
1   268	01D1  BA 0000			     mov dx, 0000h	     ; print on	screen
1   269
1   270	01D4  83 EB 02			     sub bx, 2		     ; bx -= 2
1   271	01D7  83 EF 01			     sub di, 1		     ; di --
1   272
1   273	01DA  83 FF 00			     cmp di, 0
1   274	01DD  74 02			     je	@@Exit
1   275
1   276	01DF  EB E3			     jmp @@PrintSymb
1   277
1   278	01E1  C3		     @@Exit: ret
1   279	01E2				     endp
1   280
1   281
1   282				     ;------------------------------------------------------------
1   283				     ; Reads dec number
1   284				     ;------------------------------------------------------------
1   285				     ; Entry:	     None
Turbo Assembler	 Version 4.1	    02/20/23 13:34:22	    Page 6
ramka.asm



1   286				     ; Exit:	     DI	- dec value
1   287				     ; Expects:	     None
1   288				     ; Destroys:     AX, CX, DI, SI
1   289				     ;------------------------------------------------------------
1   290	01E2			     IntInput	     proc
1   291
1   292	01E2  BF 0000				     mov di, 0000h	     ; di = 0
1   293	01E5  B9 0005				     mov cx, 0005h	     ; cx = 5 (max amount of numbers)
1   294	01E8  EB 0B 90				     jmp @@Loop
1   295	01EB			     @@OnError:
1   296	01EB  BA 01DAr				     mov dx, offset ErrorMsg
1   297	01EE  B4 09				     mov ah, 09h
1   298	01F0  CD 21				     int 21h		     ; print Error message
1   299
1   300	01F2  EB 2E 90				     jmp @@Exit
1   301
1   302	01F5  B4 01		     @@Loop:	     mov ah, 01h
1   303	01F7  CD 21				     int 21h		     ; reading char -> al
1   304
1   305	01F9  3C 0D				     cmp al, 0Dh
1   306	01FB  74 25				     je	@@Exit
1   307
1   308	01FD  3C 13				     cmp al, 13h
1   309	01FF  74 21				     je	@@Exit		     ; if al ==	'\n' ||	'\r': retunr
1   310
1   311	0201  3C 30				     cmp al, 30h
1   312	0203  72 E6				     jb	@@OnError
1   313
1   314	0205  3C 40				     cmp al, 40h
1   315	0207  77 E2				     ja	@@OnError	     ; if !alnum(al): OnError()
1   316
1   317	0209  2C 30				     sub al, 30h	     ; al -= 30	(ascii -> number)
1   318	020B  B4 00				     mov ah, 00h
1   319
1   320	020D  8B F0				     mov si, ax
1   321	020F  8B C7				     mov ax, di
1   322	0211  8B FE				     mov di, si		     ; swap (ax, di)
1   323
1   324	0213  BE 000A				     mov si, 10d
1   325	0216  F7 E6				     mul si		     ; ax *= 10
1   326
1   327	0218  03 C7				     add ax, di		     ; ax += di	(last number)
1   328
1   329	021A  8B F0				     mov si, ax
1   330	021C  8B C7				     mov ax, di
1   331	021E  8B FE				     mov di, si		     ; swap (ax, di)
1   332
1   333	0220  E2 D3				     loop @@Loop
1   334
1   335	0222  C3		     @@Exit:	     ret
1   336	0223					     endp
1   337
1   338
1   339				     ;-------------------------------------------------------------
1   340				     ; Draws rectangle on screen with given borders
1   341				     ;-------------------------------------------------------------
1   342				     ; Entry:	     AX	- horizontal border
Turbo Assembler	 Version 4.1	    02/20/23 13:34:22	    Page 7
ramka.asm



1   343				     ;		     DX	- vertical   border
1   344				     ;		     BX	- left highest point
1   345				     ;		     CX	- horizontal size
1   346				     ;		     DI	- vertical   size
1   347				     ; Exit:	     None
1   348				     ; Expects:	     ES	-> videomem (0b800h)
1   349				     ; Destroys:     BP, SI
1   350				     ;-------------------------------------------------------------
1   351	0223			     DrawRect	     proc
1   352
1   353	0223  55				     push bp
1   354	0224  8B EC				     mov bp, sp
1   355
1   356	0226  8B 5E 1A				     mov bx, [bp + 26d]
1   357	0229  8B 7E 18				     mov di, [bp + 24d]
1   358	022C  8B 4E 16				     mov cx, [bp + 22d]
1   359
1   360	022F  83 E9 02				     sub cx, 2
1   361	0232  8B F7				     mov si, di		     ; i = di
1   362	0234  EB 0C 90				     jmp @@MainCycle
1   363
1   364	0237  83 EE 01		     @@IterateI:     sub si, 1		     ; i--
1   365
1   366	023A  2B D9				     sub bx, cx		     ; start vertically
1   367	023C  2B D9				     sub bx, cx
1   368	023E  81 C3 00A0			     add bx, 160d	     ; new line
1   369
1   370	0242  8B C1		     @@MainCycle:    mov ax, cx		     ; j = cx
1   371
1   372	0244  83 EB 02				     sub bx, 2		     ; bx -= 2 (then i += 2 to print)
1   373
1   374	0247  83 FE 00				     cmp si, 00h
1   375	024A  75 39				     jne @@DrawV
1   376
1   377	024C  83 C3 02		     @@ContinueMain: add bx, 2		     ; bx += 2 (watch previous comment)
1   378	024F  83 FE 00				     cmp si, 00h
1   379	0252  74 79				     je	@@Exit		     ; if i == 0: exit(0)
1   380
1   381	0254  8B 56 04		     @@SecondCycle:  mov dx, [bp + 4]
1   382	0257  26: 89 17				     mov es:[bx], dx
1   383
1   384	025A  3D 0000				     cmp ax, 00h
1   385	025D  74 4A				     je	@@DrawRightV	     ; print left border (WORKS!)
1   386
1   387	025F  3B F7				     cmp si, di
1   388	0261  74 12				     je	@@DrawH		     ; draw highest border
1   389
1   390	0263  83 FE 01				     cmp si, 01h
1   391	0266  74 15				     je	@@DrawLower	     ; draw lowest border
1   392
1   393	0268			     @@ContinueSecond:
1   394	0268  3D 0000				     cmp ax, 00h
1   395	026B  74 CA				     je	@@IterateI	     ; if j == 0: i++
1   396
1   397	026D  2D 0001				     sub ax, 1		     ; else: j--
1   398	0270  83 C3 02				     add bx, 2		     ; bx += 2
1   399	0273  EB DF				     jmp @@SecondCycle
Turbo Assembler	 Version 4.1	    02/20/23 13:34:22	    Page 8
ramka.asm



1   400
1   401	0275  8B 56 14		     @@DrawH:	     mov dx, [bp + 20d]
1   402	0278  26: 89 17				     mov es:[bx], dx
1   403	027B  EB EB				     jmp @@ContinueSecond
1   404
1   405	027D  8B 56 10		     @@DrawLower:    mov dx, [bp + 16d]
1   406	0280  26: 89 17				     mov es:[bx], dx
1   407	0283  EB E3				     jmp @@ContinueSecond
1   408
1   409	0285  83 FE 01		     @@DrawV:	     cmp si, 01h
1   410	0288  74 0F				     je	@@LowLeft
1   411	028A  3B F7				     cmp si, di
1   412	028C  74 03				     je	@@HighLeft
1   413	028E  EB 11 90				     jmp @@Left
1   414
1   415	0291  8B 56 0C		     @@HighLeft:     mov dx, [bp + 12d]
1   416	0294  26: 89 17				     mov es:[bx], dx
1   417	0297  EB B3				     jmp @@ContinueMain
1   418
1   419	0299  8B 56 08		     @@LowLeft:	     mov dx, [bp + 8d]
1   420	029C  26: 89 17				     mov es:[bx], dx
1   421	029F  EB AB				     jmp @@ContinueMain
1   422
1   423	02A1  8B 56 0E		     @@Left:	     mov dx, [bp + 14d]
1   424	02A4  26: 89 17				     mov es:[bx], dx
1   425	02A7  EB A3				     jmp @@ContinueMain
1   426
1   427	02A9  83 FE 01		     @@DrawRightV:   cmp si, 01h
1   428	02AC  74 07				     je	@@LowRight
1   429	02AE  3B F7				     cmp si, di
1   430	02B0  74 0B				     je	@@HighRight
1   431	02B2  EB 11 90				     jmp @@Right
1   432
1   433	02B5  8B 56 06		     @@LowRight:     mov dx, [bp + 6d]
1   434	02B8  26: 89 17				     mov es:[bx], dx
1   435	02BB  EB AB				     jmp @@ContinueSecond
1   436
1   437	02BD  8B 56 0A		     @@HighRight:    mov dx, [bp + 10d]
1   438	02C0  26: 89 17				     mov es:[bx], dx
1   439	02C3  EB A3				     jmp @@ContinueSecond
1   440
1   441	02C5  8B 56 12		     @@Right:	     mov dx, [bp + 18d]
1   442	02C8  26: 89 17				     mov es:[bx], dx
1   443	02CB  EB 9B				     jmp @@ContinueSecond
1   444
1   445	02CD  5D		     @@Exit:	     pop bp
1   446	02CE  C3				     ret
1   447	02CF					     endp
1   448
1   449
1   450				     ;-----------------------------------------------------------
1   451				     ; Put symbol with given ascii to videomem
1   452				     ;-----------------------------------------------------------
1   453				     ; Entry:	     BX	= coordinates where to print symbol
1   454				     ;		     CX	= symbol itself
1   455				     ; Exit:	     None
1   456				     ; Expects:	     ES	-> videomem (b800h)
Turbo Assembler	 Version 4.1	    02/20/23 13:34:22	    Page 9
ramka.asm



1   457				     ; Destroys:     None
1   458				     ;-----------------------------------------------------------
1   459	02CF			     PutChar proc
1   460
1   461	02CF  26: 89 0F			     mov es:[bx], cx	     ; put symbol to videomem
1   462
1   463	02D2  C3			     ret
1   464	02D3				     endp
1   465
    466
    467				     end     Start
Turbo Assembler	 Version 4.1	    02/20/23 13:34:22	    Page 10
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "02/20/23"
??FILENAME			  Text	 "ramka	  "
??TIME				  Text	 "13:34:22"
??VERSION			  Number 040A
@32BIT				  Text	 0
@@CONTINUEMAIN			  Near	 DGROUP:024C
@@CONTINUEPRINT			  Near	 DGROUP:01B1
@@CONTINUESECOND		  Near	 DGROUP:0268
@@DRAWH				  Near	 DGROUP:0275
@@DRAWLOWER			  Near	 DGROUP:027D
@@DRAWRIGHTV			  Near	 DGROUP:02A9
@@DRAWV				  Near	 DGROUP:0285
@@EXIT				  Near	 DGROUP:0113
@@EXIT				  Near	 DGROUP:0134
@@EXIT				  Near	 DGROUP:0168
@@EXIT				  Near	 DGROUP:01BE
@@EXIT				  Near	 DGROUP:01E1
@@EXIT				  Near	 DGROUP:0222
@@EXIT				  Near	 DGROUP:02CD
@@HIGHLEFT			  Near	 DGROUP:0291
@@HIGHRIGHT			  Near	 DGROUP:02BD
@@ITERATEI			  Near	 DGROUP:0237
@@LEFT				  Near	 DGROUP:02A1
@@LETTERPRINT			  Near	 DGROUP:01AC
@@LOOP				  Near	 DGROUP:011A
@@LOOP				  Near	 DGROUP:01F5
@@LOWLEFT			  Near	 DGROUP:0299
@@LOWRIGHT			  Near	 DGROUP:02B5
@@MAINCYCLE			  Near	 DGROUP:0242
@@NEWBYTE			  Near	 DGROUP:0154
@@NEXT				  Near	 DGROUP:015F
@@ONERROR			  Near	 DGROUP:01EB
@@PRINT0			  Near	 DGROUP:0149
@@PRINT1			  Near	 DGROUP:013E
@@PRINTSYMB			  Near	 DGROUP:01C4
@@PRINTSYMBOL			  Near	 DGROUP:019F
@@PROCEED4BIT			  Near	 DGROUP:017C
@@READBYTES			  Near	 DGROUP:0172
@@RIGHT				  Near	 DGROUP:02C5
@@SECONDCYCLE			  Near	 DGROUP:0254
@@SKIPMUL			  Near	 DGROUP:0193
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0101H
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 RAMKA
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
DRAWRECT			  Near	 DGROUP:0223
ERRORMSG			  Near	 DGROUP:01DA
Turbo Assembler	 Version 4.1	    02/20/23 13:34:22	    Page 11
Symbol Table



ERROR_STR			  Near	 DGROUP:01B5
FIFTH				  Near	 DGROUP:0083
FIRST				  Near	 DGROUP:0000
FORTH				  Near	 DGROUP:0063
INSIDE				  Near	 DGROUP:01A0
INTINPUT			  Near	 DGROUP:01E2
LB				  Near	 DGROUP:00F7
LHC				  Near	 DGROUP:0130
LLC				  Near	 DGROUP:0169
LS				  Near	 DGROUP:0111
PUTCHAR				  Near	 DGROUP:02CF
READNUMBER			  Near	 DGROUP:0114
RHC				  Near	 DGROUP:014C
RLC				  Near	 DGROUP:0184
RS				  Near	 DGROUP:00D7
SECOND				  Near	 DGROUP:0022
START				  Near	 DGROUP:0100
THIRD				  Near	 DGROUP:0043
TOBIN				  Near	 DGROUP:0138
TODEC				  Near	 DGROUP:01BF
TOHEX				  Near	 DGROUP:0169
UB				  Near	 DGROUP:00BE

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  01F7 Word	  Public  DATA
  _TEXT				  16  02D3 Word	  Public  CODE
