Turbo Assembler	 Version 4.1	    02/20/23 00:43:12	    Page 1
ramka.asm



      1	0000			     .model tiny
      2
      3	0000			     .data
      4	0000  45 6E 74 65 72 20	66+	     first:  db	'Enter frame line num (max: 25d): $'
      5	      72 61 6D 65 20 6C	69+
      6	      6E 65 20 6E 75 6D	20+
      7	      28 6D 61 78 3A 20	32+
      8	      35 64 29 3A 20 24
      9	0022  45 6E 74 65 72 20	66+	     second: db	'Enter frame col num (max: 80d): $'
     10	      72 61 6D 65 20 63	6F+
     11	      6C 20 6E 75 6D 20	28+
     12	      6D 61 78 3A 20 38	30+
     13	      64 29 3A 20 24
     14	0043  45 6E 74 65 72 20	66+	     third:  db	'Enter frame height (max: 25d):	$'
     15	      72 61 6D 65 20 68	65+
     16	      69 67 68 74 20 28	6D+
     17	      61 78 3A 20 32 35	64+
     18	      29 3A 20 24
     19	0063  45 6E 74 65 72 20	66+	     forth:  db	'Enter frame length (max: 80d):	$'
     20	      72 61 6D 65 20 6C	65+
     21	      6E 67 74 68 20 28	6D+
     22	      61 78 3A 20 38 30	64+
     23	      29 3A 20 24
     24	0083  45 6E 74 65 72 20	66+	     fifth:  db	'Enter frame type (1 - ones, 2 - twos, 3 - *, 4	- custom): $'
     25	      72 61 6D 65 20 74	79+
     26	      70 65 20 28 31 20	2D+
     27	      20 6F 6E 65 73 2C	20+
     28	      32 20 2D 20 74 77	6F+
     29	      73 2C 20 33 20 2D	20+
     30	      2A 2C 20 34 20 2D	20+
     31	      63 75 73 74 6F 6D	29+
     32	      3A 20 24
     33
     34	00BE  45 6E 74 65 72 20	75+	     ub:  db 'Enter upper bound	char: $'
     35	      70 70 65 72 20 62	6F+
     36	      75 6E 64 20 63 68	61+
     37	      72 3A 20 24
     38	00D7  0A 45 6E 74 65 72	20+	     rs:     db	0Ah, 'Enter right side border char: $'
     39	      72 69 67 68 74 20	73+
     40	      69 64 65 20 62 6F	72+
     41	      64 65 72 20 63 68	61+
     42	      72 3A 20 24
     43	00F7  0A 45 6E 74 65 72	20+	     lb:     db	0Ah, 'Enter lower bound	char: $'
     44	      6C 6F 77 65 72 20	62+
     45	      6F 75 6E 64 20 63	68+
     46	      61 72 3A 20 24
     47	0111  0A 45 6E 74 65 72	20+	     ls:     db	0Ah, 'Enter left side border char: $'
     48	      6C 65 66 74 20 73	69+
     49	      64 65 20 62 6F 72	64+
     50	      65 72 20 63 68 61	72+
     51	      3A 20 24
     52
     53	0130  0A 45 6E 74 65 72	20+	     lhc:    db	0Ah, 'Enter left higher	corner:	$'
     54	      6C 65 66 74 20 68	69+
     55	      67 68 65 72 20 63	6F+
     56	      72 6E 65 72 3A 20	24
     57	014C  0A 45 6E 74 65 72	20+	     rhc:    db	0Ah, 'Enter right higher corner: $'
Turbo Assembler	 Version 4.1	    02/20/23 00:43:12	    Page 2
ramka.asm



     58	      72 69 67 68 74 20	68+
     59	      69 67 68 65 72 20	63+
     60	      6F 72 6E 65 72 3A	20+
     61	      24
     62	0169  0A 45 6E 74 65 72	20+	     llc:    db	0Ah, 'Enter left lower corner: $'
     63	      6C 65 66 74 20 6C	6F+
     64	      77 65 72 20 63 6F	72+
     65	      6E 65 72 3A 20 24
     66	0184  0A 45 6E 74 65 72	20+	     rlc:    db	0Ah, 'Enter right lower	corner:	$'
     67	      72 69 67 68 74 20	6C+
     68	      6F 77 65 72 20 63	6F+
     69	      72 6E 65 72 3A 20	24
     70
     71	01A0  0A 45 6E 74 65 72	20+	     inside: db	0Ah, 'Enter inside char: $'
     72	      69 6E 73 69 64 65	20+
     73	      63 68 61 72 3A 20	24
     74
     75	01B5  59 6F 75 20 61 72	65+	     error_str:	 db 'You are mistaken! IDIOT. Aborting...$'
     76	      20 6D 69 73 74 61	6B+
     77	      65 6E 21 20 49 44	49+
     78	      4F 54 2E 20 41 62	6F+
     79	      72 74 69 6E 67 2E	2E+
     80	      2E 24
     81	01DA			     .code
     82
     83				     org 100h
     84
     85				     locals @@
     86
     87	0100			     Start:
     88	0100  BB B800				     mov bx, 0b800h
     89	0103  8E C3				     mov es, bx
     90	0105  BB 0000				     mov bx, 00h
     91
     92						     ; LINE NUMBER ;
     93	0108  B4 09				     mov ah, 09h
     94	010A  BA 0000r				     mov dx, offset first
     95	010D  CD 21				     int 21h
     96
     97	010F  E8 0200				     call IntInput
     98	0112  BF 0019				     mov di, 25d
     99	0115  E8 013F				     call CheckValue
    100	0118  8B C6				     mov ax, si
    101	011A  B9 00A0				     mov cx, 160d
    102	011D  F7 E1				     mul cx
    103	011F  8B D8				     mov bx, ax		     ; bx = line * 160
    104
    105						     ; STRING ID NUM ;
    106	0121  B4 09				     mov ah, 09h
    107	0123  BA 0022r				     mov dx, offset second
    108	0126  CD 21				     int 21h
    109
    110	0128  E8 01E7				     call IntInput
    111	012B  BF 0050				     mov di, 80d
    112	012E  E8 0126				     call CheckValue
    113	0131  03 F6				     add si, si
    114	0133  03 DE				     add bx, si		     ; bx += strintId
Turbo Assembler	 Version 4.1	    02/20/23 00:43:12	    Page 3
ramka.asm



    115									     ; position	ready
    116
    117	0135  53				     push bx
    118
    119						     ; FRAME HEIGHT ;
    120	0136  B4 09				     mov ah, 09h
    121	0138  BA 0043r				     mov dx, offset third
    122	013B  CD 21				     int 21h
    123
    124	013D  E8 01D2				     call IntInput
    125	0140  BF 0019				     mov di, 25d
    126	0143  E8 0111				     call CheckValue
    127	0146  56				     push si		     ; di = height
    128
    129						     ; FRAME LENGTH ;
    130
    131	0147  B4 09				     mov ah, 09h
    132	0149  BA 0063r				     mov dx, offset forth
    133	014C  CD 21				     int 21h
    134
    135	014E  E8 01C1				     call IntInput
    136	0151  BF 0050				     mov di, 80d
    137	0154  E8 0100				     call CheckValue
    138	0157  56				     push si		     ; cx = length
    139									     ; sizes ready
    140
    141						     ; TYPE NUMBER ;
    142	0158  B4 09				     mov ah, 09h
    143	015A  BA 0083r				     mov dx, offset fifth
    144	015D  CD 21				     int 21h
    145
    146	015F  E8 01B0				     call IntInput
    147	0162  BF 0004				     mov di, 04h
    148	0165  E8 00EF				     call CheckValue	     ; si = type
    149
    150	0168  83 FE 01				     cmp si, 01h
    151	016B  74 0F				     je	@@Parse1
    152	016D  83 FE 02				     cmp si, 02h
    153	0170  74 26				     je	@@Parse2
    154	0172  83 FE 03				     cmp si, 03h
    155	0175  74 3D				     je	@@Parse3
    156	0177  83 FE 04				     cmp si, 04h
    157	017A  74 54				     je	@@Parse4
    158
    159	017C  B9 0008		     @@Parse1:	     mov cx, 08h
    160	017F  50 55 8B EC C7 46	02+  @@Loop1:	     push 0531h		     ; 1s
    161	      0531 5D
    162	0189  E2 F4				     loop @@Loop1
    163	018B  50 55 8B EC C7 46	02+		     push 0020h		     ; inside =	space
    164	      0020 5D
    165
    166	0195  E9 00B6				     jmp @@Call
    167
    168	0198  B9 0008		     @@Parse2:	     mov cx, 08h
    169	019B  50 55 8B EC C7 46	02+  @@Loop2:	     push 0532h
    170	      0532 5D
    171	01A5  E2 F4				     loop @@Loop2
Turbo Assembler	 Version 4.1	    02/20/23 00:43:12	    Page 4
ramka.asm



    172	01A7  50 55 8B EC C7 46	02+		     push 0020h		     ; inside =	space
    173	      0020 5D
    174
    175	01B1  E9 009A				     jmp @@Call
    176
    177	01B4  B9 0008		     @@Parse3:	     mov cx, 08h
    178	01B7  50 55 8B EC C7 46	02+  @@Loop3:	     push 052ah
    179	      052A 5D
    180	01C1  E2 F4				     loop @@Loop3
    181	01C3  50 55 8B EC C7 46	02+		     push 0020h		     ; inside =	space
    182	      0020 5D
    183
    184	01CD  EB 7F 90				     jmp @@Call
    185
    186	01D0  B4 09		     @@Parse4:	     mov ah, 09h
    187	01D2  BA 00BEr				     mov dx, offset ub
    188	01D5  CD 21				     int 21h
    189
    190	01D7  B4 01				     mov ah, 01h
    191	01D9  CD 21				     int 21h
    192
    193	01DB  B4 05				     mov ah, 05h
    194	01DD  50				     push ax		     ; read upper bound
    195
    196	01DE  B4 09				     mov ah, 09h
    197	01E0  BA 00D7r				     mov dx, offset rs
    198	01E3  CD 21				     int 21h
    199
    200	01E5  B4 01				     mov ah, 01h
    201	01E7  CD 21				     int 21h
    202
    203	01E9  B4 05				     mov ah, 05h
    204	01EB  50				     push ax		     ; read right side
    205
    206	01EC  B4 09				     mov ah, 09h
    207	01EE  BA 00F7r				     mov dx, offset lb
    208	01F1  CD 21				     int 21h
    209
    210	01F3  B4 01				     mov ah, 01h
    211	01F5  CD 21				     int 21h
    212
    213	01F7  B4 05				     mov ah, 05h
    214	01F9  50				     push ax		     ; lower bound
    215
    216	01FA  B4 09				     mov ah, 09h
    217	01FC  BA 0111r				     mov dx, offset ls
    218	01FF  CD 21				     int 21h
    219
    220	0201  B4 01				     mov ah, 01h
    221	0203  CD 21				     int 21h
    222
    223	0205  B4 05				     mov ah, 05h
    224	0207  50				     push ax		     ; left side border
    225
    226	0208  B4 09				     mov ah, 09h
    227	020A  BA 0130r				     mov dx, offset lhc
    228	020D  CD 21				     int 21h
Turbo Assembler	 Version 4.1	    02/20/23 00:43:12	    Page 5
ramka.asm



    229
    230	020F  B4 01				     mov ah, 01h
    231	0211  CD 21				     int 21h
    232
    233	0213  B4 05				     mov ah, 05h
    234	0215  50				     push ax		     ; left higher corner
    235
    236	0216  B4 09				     mov ah, 09h
    237	0218  BA 014Cr				     mov dx, offset rhc
    238	021B  CD 21				     int 21h
    239
    240	021D  B4 01				     mov ah, 01h
    241	021F  CD 21				     int 21h
    242
    243	0221  B4 05				     mov ah, 05h
    244	0223  50				     push ax		     ; right higher corner
    245
    246	0224  B4 09				     mov ah, 09h
    247	0226  BA 0169r				     mov dx, offset llc
    248	0229  CD 21				     int 21h
    249
    250	022B  B4 01				     mov ah, 01h
    251	022D  CD 21				     int 21h
    252
    253	022F  B4 05				     mov ah, 05h
    254	0231  50				     push ax		     ; left lower corner
    255
    256	0232  B4 09				     mov ah, 09h
    257	0234  BA 0184r				     mov dx, offset rlc
    258	0237  CD 21				     int 21h
    259
    260	0239  B4 01				     mov ah, 01h
    261	023B  CD 21				     int 21h
    262
    263	023D  B4 05				     mov ah, 05h
    264	023F  50				     push ax		     ; right lower corner
    265
    266	0240  B4 09				     mov ah, 09h
    267	0242  BA 01A0r				     mov dx, offset inside
    268	0245  CD 21				     int 21h
    269
    270	0247  B4 01				     mov ah, 01h
    271	0249  CD 21				     int 21h
    272
    273	024B  B4 05				     mov ah, 05h
    274	024D  50				     push ax		     ; inside char
    275
    276
    277
    278	024E  E8 0102		     @@Call:	     call DrawRect
    279	0251  83 C4 1A				     add sp, 26
    280	0254  CD 20				     int 20h
    281	0256  C3		     @@Exit:	     ret
    282
    283
    284	0257			     CheckValue	     proc			     ; compares	if si <= di
    285
Turbo Assembler	 Version 4.1	    02/20/23 00:43:12	    Page 6
ramka.asm



    286	0257  3B F7				     cmp si, di
    287	0259  77 03				     ja	@@Error
    288	025B  EB 0A 90				     jmp @@Exit
    289
    290	025E  B4 09		     @@Error:	     mov ah, 09h
    291	0260  BA 01B5r				     mov dx, offset error_str
    292	0263  CD 21				     int 21h
    293	0265  CD 20				     int 20h
    294
    295	0267  C3		     @@Exit:	     ret
    296	0268					     endp
    297
    298				     include ..\LIBA.ASM
1   299	0268			     .data
1   300	01DA  0A 54 68 69 73 20	73+	     ErrorMsg: db 0Ah, 'This symbol is not allowed!$'
    301	      79 6D 62 6F 6C 20	69+
    302	      73 20 6E 6F 74 20	61+
    303	      6C 6C 6F 77 65 64	21+
    304	      24
1   305
1   306	01F7			     .code
1   307
1   308				     ;-----------------------------------------------------------
1   309				     ; Print binary of value
1   310				     ;-----------------------------------------------------------
1   311				     ; Entry:	     AX	= value	to convert to
1   312				     ;		     BX	= coordinates to print on string
1   313				     ; Exit:	     None
1   314				     ; Expects:	     ES	-> videomem (b800h)
1   315				     ; Destroys:     BX, CX, DL
1   316				     ;-----------------------------------------------------------
1   317	0268			     ToBin   proc
1   318
1   319	0268  BA 8000			     mov dx, 8000h	     ; dx = 2 ** 15
1   320	026B  EB 17 90			     jmp @@NewByte
1   321
1   322	026E			     @@Print1:
1   323	026E  26: C7 07	0531		     mov es:[bx], 0531h	     ; put 0 to	videomem
1   324	0273  83 C3 02			     add bx, 2		     ; bx += 2
1   325	0276  EB 17 90			     jmp @@Next
1   326
1   327	0279			     @@Print0:
1   328	0279  26: C7 07	0530		     mov es:[bx], 0530h	     ; put 0 to	videomem
1   329	027E  83 C3 02			     add bx, 2		     ; bx += 2
1   330	0281  EB 0C 90			     jmp @@Next
1   331
1   332	0284			     @@NewByte:
1   333	0284  8B C8			     mov cx, ax		     ; cx = ax
1   334	0286  23 CA			     and cx, dx		     ; cx && dx
1   335
1   336	0288  83 F9 00			     cmp cx, 0h		     ; if cx ==	0: print(0) else: print(1)
1   337	028B  74 EC			     je	 @@Print0
1   338	028D  EB DF			     jmp @@Print1
1   339
1   340	028F			     @@Next:
1   341	028F  83 FA 01			     cmp dx, 1h		     ; if dx ==	1: return
1   342	0292  74 04			     je	@@Exit
Turbo Assembler	 Version 4.1	    02/20/23 00:43:12	    Page 7
ramka.asm



1   343
1   344	0294  D1 EA			     shr dx, 1		     ; dx >> 1
1   345	0296  EB EC			     jmp @@NewByte
1   346
1   347	0298  C3		     @@Exit: ret
1   348	0299				     endp
1   349
1   350				     ;-----------------------------------------------------------
1   351				     ; Print hex of value
1   352				     ;-----------------------------------------------------------
1   353				     ; Entry:	     SI	= value	to convert to
1   354				     ;		     BX	= coordinates to print in cmd
1   355				     ; Exit:	     None
1   356				     ; Expects:	     ES	-> videomem (b800h)
1   357				     ; Destroys:     AX, BX, CX, DX, DI, BP, SP
1   358				     ;----------------------------------------------------------
1   359	0299			     ToHex   proc
1   360
1   361	0299  BA 8000			     mov dx, 8000h	     ; first byte is 1 others are 0
1   362	029C  B9 0004			     mov cx, 0004h	     ; cx = 0
1   363	029F  BF 0000			     mov di, 0000h
1   364
1   365	02A2			     @@ReadBytes:
1   366	02A2  FE C5			     inc ch		     ; ch++ (byte counter in 4th)
1   367	02A4  80 FD 05			     cmp ch, 05h	     ; if ch ==	5: exit	else: continue
1   368	02A7  74 45			     je	@@Exit
1   369	02A9  EB 01 90			     jmp @@Proceed4bit
1   370
1   371	02AC			     @@Proceed4bit:
1   372	02AC  8B C6			     mov ax, si		     ; ax = si (given value)
1   373	02AE  23 C2			     and ax, dx		     ; ax && ax
1   374
1   375	02B0  3D 0000			     cmp ax, 00h	     ; if ax ==	0: SkipMul()
1   376	02B3  74 0E			     je	@@SkipMul
1   377
1   378	02B5  B0 01			     mov al, 01h	     ; al = 1 (value to	add)
1   379	02B7  B4 00			     mov ah, 00h	     ; ah = 0 (needed not to brake ax)
1   380	02B9  80 E9 01			     sub cl, 1		     ; cl-- (bit num)
1   381	02BC  D2 E0			     shl al, cl		     ; al = 2^cl
1   382	02BE  80 C1 01			     add cl, 1		     ; cl++
1   383	02C1  03 F8			     add di, ax		     ; di += ax	(di - result to	print)
1   384
1   385	02C3			     @@SkipMul:
1   386	02C3  80 E9 01			     sub cl, 1		     ; cl--
1   387	02C6  D1 EA			     shr dx, 1		     ; dx /= 2
1   388
1   389	02C8  80 F9 00			     cmp cl, 00h
1   390	02CB  74 02			     je	@@PrintSymbol
1   391	02CD  EB DD			     jmp @@Proceed4bit	     ; if cl ==	0: Print else continue reading byte
1   392
1   393	02CF			     @@PrintSymbol:
1   394	02CF  8B C7			     mov ax, di		     ; ax = di
1   395	02D1  B4 05			     mov ah, 05h	     ; ah = 05h	(COLOR)
1   396
1   397	02D3  3C 0A			     cmp al, 10d	     ; if al >=	10: PrintAsLetter
1   398	02D5  73 05			     jae @@LetterPrint
1   399
Turbo Assembler	 Version 4.1	    02/20/23 00:43:12	    Page 8
ramka.asm



1   400	02D7  04 30			     add al, 30h	     ; else: al	+= 30h -> print	as ASCII
1   401	02D9  EB 06 90			     jmp @@ContinuePrint
1   402
1   403	02DC			     @@LetterPrint:
1   404	02DC  04 37			     add al, 37h	     ; al += 37	-> add letter as ASCII
1   405	02DE  EB 01 90			     jmp @@ContinuePrint
1   406
1   407	02E1			     @@ContinuePrint:
1   408	02E1  26: 89 07			     mov es:[bx], ax	     ; put ax to videomem
1   409	02E4  83 C3 02			     add bx, 2		     ; bx += 2
1   410	02E7  BF 0000			     mov di, 00h	     ; di = 0
1   411	02EA  B1 04			     mov cl, 04h	     ; cl = 4 (byte count)
1   412	02EC  EB B4			     jmp @@ReadBytes
1   413
1   414	02EE			     @@Exit:
1   415	02EE  C3			     ret
1   416	02EF				     endp
1   417
1   418
1   419				     ;-----------------------------------------------------------
1   420				     ; Print dec of value
1   421				     ;-----------------------------------------------------------
1   422				     ; Entry:	     SI	= value	to convert to
1   423				     ;		     BX	= coordinates to print on string
1   424				     ; Exit:	     None
1   425				     ; Expects:	     ES	-> videomem (b800h)
1   426				     ; Destroys:     AX, BX, CX, DX, DI
1   427				     ;-----------------------------------------------------------
1   428	02EF			     ToDec   proc
1   429
1   430	02EF  8B C6			     mov ax, si		     ; ax = si
1   431	02F1  BF 0006			     mov di, 06h	     ; amount of digits
1   432
1   433	02F4			     @@PrintSymb:
1   434	02F4  B9 000A			     mov cx, 000Ah	     ; cx = 10
1   435	02F7  F7 F1			     div cx		     ; ax = ax / 10, dx	= ax % 10
1   436
1   437	02F9  80 C2 30			     add dl, 30h	     ; dl += 30	(symb ascii)
1   438	02FC  B6 05			     mov dh, 05h	     ; dh = 5	(color)
1   439
1   440	02FE  26: 89 17			     mov es:[bx], dx
1   441	0301  BA 0000			     mov dx, 0000h	     ; print on	screen
1   442
1   443	0304  83 EB 02			     sub bx, 2		     ; bx -= 2
1   444	0307  83 EF 01			     sub di, 1		     ; di --
1   445
1   446	030A  83 FF 00			     cmp di, 0
1   447	030D  74 02			     je	@@Exit
1   448
1   449	030F  EB E3			     jmp @@PrintSymb
1   450
1   451	0311  C3		     @@Exit: ret
1   452	0312				     endp
1   453
1   454
1   455				     ;------------------------------------------------------------
1   456				     ; Reads dec number
Turbo Assembler	 Version 4.1	    02/20/23 00:43:12	    Page 9
ramka.asm



1   457				     ;------------------------------------------------------------
1   458				     ; Entry:	     None
1   459				     ; Exit:	     DI	- dec value
1   460				     ; Expects:	     None
1   461				     ; Destroys:     AX, CX, DI, SI
1   462				     ;------------------------------------------------------------
1   463	0312			     IntInput	     proc
1   464
1   465	0312  BF 0000				     mov di, 0000h	     ; di = 0
1   466	0315  B9 0005				     mov cx, 0005h	     ; cx = 5 (max amount of numbers)
1   467	0318  EB 0B 90				     jmp @@Loop
1   468	031B			     @@OnError:
1   469	031B  BA 01DAr				     mov dx, offset ErrorMsg
1   470	031E  B4 09				     mov ah, 09h
1   471	0320  CD 21				     int 21h		     ; print Error message
1   472
1   473	0322  EB 2E 90				     jmp @@Exit
1   474
1   475	0325  B4 01		     @@Loop:	     mov ah, 01h
1   476	0327  CD 21				     int 21h		     ; reading char -> al
1   477
1   478	0329  3C 0D				     cmp al, 0Dh
1   479	032B  74 25				     je	@@Exit
1   480
1   481	032D  3C 13				     cmp al, 13h
1   482	032F  74 21				     je	@@Exit		     ; if al ==	'\n' ||	'\r': retunr
1   483
1   484	0331  3C 30				     cmp al, 30h
1   485	0333  72 E6				     jb	@@OnError
1   486
1   487	0335  3C 40				     cmp al, 40h
1   488	0337  77 E2				     ja	@@OnError	     ; if !alnum(al): OnError()
1   489
1   490	0339  2C 30				     sub al, 30h	     ; al -= 30	(ascii -> number)
1   491	033B  B4 00				     mov ah, 00h
1   492
1   493	033D  8B F0				     mov si, ax
1   494	033F  8B C7				     mov ax, di
1   495	0341  8B FE				     mov di, si		     ; swap (ax, di)
1   496
1   497	0343  BE 000A				     mov si, 10d
1   498	0346  F7 E6				     mul si		     ; ax *= 10
1   499
1   500	0348  03 C7				     add ax, di		     ; ax += di	(last number)
1   501
1   502	034A  8B F0				     mov si, ax
1   503	034C  8B C7				     mov ax, di
1   504	034E  8B FE				     mov di, si		     ; swap (ax, di)
1   505
1   506	0350  E2 D3				     loop @@Loop
1   507
1   508	0352  C3		     @@Exit:	     ret
1   509	0353					     endp
1   510
1   511
1   512				     ;-------------------------------------------------------------
1   513				     ; Draws rectangle on screen with given borders
Turbo Assembler	 Version 4.1	    02/20/23 00:43:12	    Page 10
ramka.asm



1   514				     ;-------------------------------------------------------------
1   515				     ; Entry:	     AX	- horizontal border
1   516				     ;		     DX	- vertical   border
1   517				     ;		     BX	- left highest point
1   518				     ;		     CX	- horizontal size
1   519				     ;		     DI	- vertical   size
1   520				     ; Exit:	     None
1   521				     ; Expects:	     ES	-> videomem (0b800h)
1   522				     ; Destroys:     BP, SI
1   523				     ;-------------------------------------------------------------
1   524	0353			     DrawRect	     proc
1   525
1   526	0353  55				     push bp
1   527	0354  8B EC				     mov bp, sp
1   528
1   529	0356  8B 5E 1A				     mov bx, [bp + 26d]
1   530	0359  8B 7E 18				     mov di, [bp + 24d]
1   531	035C  8B 4E 16				     mov cx, [bp + 22d]
1   532
1   533	035F  83 E9 02				     sub cx, 2
1   534	0362  8B F7				     mov si, di		     ; i = di
1   535	0364  EB 0C 90				     jmp @@MainCycle
1   536
1   537	0367  83 EE 01		     @@IterateI:     sub si, 1		     ; i--
1   538
1   539	036A  2B D9				     sub bx, cx		     ; start vertically
1   540	036C  2B D9				     sub bx, cx
1   541	036E  81 C3 00A0			     add bx, 160d	     ; new line
1   542
1   543	0372  8B C1		     @@MainCycle:    mov ax, cx		     ; j = cx
1   544
1   545	0374  83 EB 02				     sub bx, 2		     ; bx -= 2 (then i += 2 to print)
1   546
1   547	0377  83 FE 00				     cmp si, 00h
1   548	037A  75 39				     jne @@DrawV
1   549
1   550	037C  83 C3 02		     @@ContinueMain: add bx, 2		     ; bx += 2 (watch previous comment)
1   551	037F  83 FE 00				     cmp si, 00h
1   552	0382  74 79				     je	@@Exit		     ; if i == 0: exit(0)
1   553
1   554	0384  8B 56 04		     @@SecondCycle:  mov dx, [bp + 4]
1   555	0387  26: 89 17				     mov es:[bx], dx
1   556
1   557	038A  3D 0000				     cmp ax, 00h
1   558	038D  74 4A				     je	@@DrawRightV	     ; print left border (WORKS!)
1   559
1   560	038F  3B F7				     cmp si, di
1   561	0391  74 12				     je	@@DrawH		     ; draw highest border
1   562
1   563	0393  83 FE 01				     cmp si, 01h
1   564	0396  74 15				     je	@@DrawLower	     ; draw lowest border
1   565
1   566	0398			     @@ContinueSecond:
1   567	0398  3D 0000				     cmp ax, 00h
1   568	039B  74 CA				     je	@@IterateI	     ; if j == 0: i++
1   569
1   570	039D  2D 0001				     sub ax, 1		     ; else: j--
Turbo Assembler	 Version 4.1	    02/20/23 00:43:12	    Page 11
ramka.asm



1   571	03A0  83 C3 02				     add bx, 2		     ; bx += 2
1   572	03A3  EB DF				     jmp @@SecondCycle
1   573
1   574	03A5  8B 56 14		     @@DrawH:	     mov dx, [bp + 20d]
1   575	03A8  26: 89 17				     mov es:[bx], dx
1   576	03AB  EB EB				     jmp @@ContinueSecond
1   577
1   578	03AD  8B 56 10		     @@DrawLower:    mov dx, [bp + 16d]
1   579	03B0  26: 89 17				     mov es:[bx], dx
1   580	03B3  EB E3				     jmp @@ContinueSecond
1   581
1   582	03B5  83 FE 01		     @@DrawV:	     cmp si, 01h
1   583	03B8  74 0F				     je	@@LowLeft
1   584	03BA  3B F7				     cmp si, di
1   585	03BC  74 03				     je	@@HighLeft
1   586	03BE  EB 11 90				     jmp @@Left
1   587
1   588	03C1  8B 56 0C		     @@HighLeft:     mov dx, [bp + 12d]
1   589	03C4  26: 89 17				     mov es:[bx], dx
1   590	03C7  EB B3				     jmp @@ContinueMain
1   591
1   592	03C9  8B 56 08		     @@LowLeft:	     mov dx, [bp + 8d]
1   593	03CC  26: 89 17				     mov es:[bx], dx
1   594	03CF  EB AB				     jmp @@ContinueMain
1   595
1   596	03D1  8B 56 0E		     @@Left:	     mov dx, [bp + 14d]
1   597	03D4  26: 89 17				     mov es:[bx], dx
1   598	03D7  EB A3				     jmp @@ContinueMain
1   599
1   600	03D9  83 FE 01		     @@DrawRightV:   cmp si, 01h
1   601	03DC  74 07				     je	@@LowRight
1   602	03DE  3B F7				     cmp si, di
1   603	03E0  74 0B				     je	@@HighRight
1   604	03E2  EB 11 90				     jmp @@Right
1   605
1   606	03E5  8B 56 06		     @@LowRight:     mov dx, [bp + 6d]
1   607	03E8  26: 89 17				     mov es:[bx], dx
1   608	03EB  EB AB				     jmp @@ContinueSecond
1   609
1   610	03ED  8B 56 0A		     @@HighRight:    mov dx, [bp + 10d]
1   611	03F0  26: 89 17				     mov es:[bx], dx
1   612	03F3  EB A3				     jmp @@ContinueSecond
1   613
1   614	03F5  8B 56 12		     @@Right:	     mov dx, [bp + 18d]
1   615	03F8  26: 89 17				     mov es:[bx], dx
1   616	03FB  EB 9B				     jmp @@ContinueSecond
1   617
1   618	03FD  5D		     @@Exit:	     pop bp
1   619	03FE  C3				     ret
1   620	03FF					     endp
1   621
1   622
1   623				     ;-----------------------------------------------------------
1   624				     ; Put symbol with given ascii to videomem
1   625				     ;-----------------------------------------------------------
1   626				     ; Entry:	     BX	= coordinates where to print symbol
1   627				     ;		     CX	= symbol itself
Turbo Assembler	 Version 4.1	    02/20/23 00:43:12	    Page 12
ramka.asm



1   628				     ; Exit:	     None
1   629				     ; Expects:	     ES	-> videomem (b800h)
1   630				     ; Destroys:     None
1   631				     ;-----------------------------------------------------------
1   632	03FF			     PutChar proc
1   633
1   634	03FF  26: 89 0F			     mov es:[bx], cx	     ; put symbol to videomem
1   635
1   636	0402  C3			     ret
1   637	0403				     endp
1   638
    639
    640				     end     Start
Turbo Assembler	 Version 4.1	    02/20/23 00:43:12	    Page 13
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "02/20/23"
??FILENAME			  Text	 "ramka	  "
??TIME				  Text	 "00:43:12"
??VERSION			  Number 040A
@32BIT				  Text	 0
@@CALL				  Near	 DGROUP:024E
@@CONTINUEMAIN			  Near	 DGROUP:037C
@@CONTINUEPRINT			  Near	 DGROUP:02E1
@@CONTINUESECOND		  Near	 DGROUP:0398
@@DRAWH				  Near	 DGROUP:03A5
@@DRAWLOWER			  Near	 DGROUP:03AD
@@DRAWRIGHTV			  Near	 DGROUP:03D9
@@DRAWV				  Near	 DGROUP:03B5
@@ERROR				  Near	 DGROUP:025E
@@EXIT				  Near	 DGROUP:0256
@@EXIT				  Near	 DGROUP:0267
@@EXIT				  Near	 DGROUP:0298
@@EXIT				  Near	 DGROUP:02EE
@@EXIT				  Near	 DGROUP:0311
@@EXIT				  Near	 DGROUP:0352
@@EXIT				  Near	 DGROUP:03FD
@@HIGHLEFT			  Near	 DGROUP:03C1
@@HIGHRIGHT			  Near	 DGROUP:03ED
@@ITERATEI			  Near	 DGROUP:0367
@@LEFT				  Near	 DGROUP:03D1
@@LETTERPRINT			  Near	 DGROUP:02DC
@@LOOP				  Near	 DGROUP:0325
@@LOOP1				  Near	 DGROUP:017F
@@LOOP2				  Near	 DGROUP:019B
@@LOOP3				  Near	 DGROUP:01B7
@@LOWLEFT			  Near	 DGROUP:03C9
@@LOWRIGHT			  Near	 DGROUP:03E5
@@MAINCYCLE			  Near	 DGROUP:0372
@@NEWBYTE			  Near	 DGROUP:0284
@@NEXT				  Near	 DGROUP:028F
@@ONERROR			  Near	 DGROUP:031B
@@PARSE1			  Near	 DGROUP:017C
@@PARSE2			  Near	 DGROUP:0198
@@PARSE3			  Near	 DGROUP:01B4
@@PARSE4			  Near	 DGROUP:01D0
@@PRINT0			  Near	 DGROUP:0279
@@PRINT1			  Near	 DGROUP:026E
@@PRINTSYMB			  Near	 DGROUP:02F4
@@PRINTSYMBOL			  Near	 DGROUP:02CF
@@PROCEED4BIT			  Near	 DGROUP:02AC
@@READBYTES			  Near	 DGROUP:02A2
@@RIGHT				  Near	 DGROUP:03F5
@@SECONDCYCLE			  Near	 DGROUP:0384
@@SKIPMUL			  Near	 DGROUP:02C3
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0101H
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
Turbo Assembler	 Version 4.1	    02/20/23 00:43:12	    Page 14
Symbol Table



@DATASIZE			  Text	 0
@FILENAME			  Text	 RAMKA
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
CHECKVALUE			  Near	 DGROUP:0257
DRAWRECT			  Near	 DGROUP:0353
ERRORMSG			  Near	 DGROUP:01DA
ERROR_STR			  Near	 DGROUP:01B5
FIFTH				  Near	 DGROUP:0083
FIRST				  Near	 DGROUP:0000
FORTH				  Near	 DGROUP:0063
INSIDE				  Near	 DGROUP:01A0
INTINPUT			  Near	 DGROUP:0312
LB				  Near	 DGROUP:00F7
LHC				  Near	 DGROUP:0130
LLC				  Near	 DGROUP:0169
LS				  Near	 DGROUP:0111
PUTCHAR				  Near	 DGROUP:03FF
RHC				  Near	 DGROUP:014C
RLC				  Near	 DGROUP:0184
RS				  Near	 DGROUP:00D7
SECOND				  Near	 DGROUP:0022
START				  Near	 DGROUP:0100
THIRD				  Near	 DGROUP:0043
TOBIN				  Near	 DGROUP:0268
TODEC				  Near	 DGROUP:02EF
TOHEX				  Near	 DGROUP:0299
UB				  Near	 DGROUP:00BE

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  01F7 Word	  Public  DATA
  _TEXT				  16  0403 Word	  Public  CODE
