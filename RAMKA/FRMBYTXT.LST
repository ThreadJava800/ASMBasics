Turbo Assembler	 Version 4.1	    02/26/23 00:20:59	    Page 1
frmbytxt.asm



      1	    0000			 .model	tiny
      2
      3	    0000			 .data
      4	    0000  A0*(24)		     printText:	 db 160d dup('$')
      5	    00A0  09*(0000)		     arguments:	 dw 9 dup(0)
      6
      7	    00B2			 .code
      8
      9					 .386
     10
     11					 org 100h
     12
     13					 locals	@@
     14
     15	    0100			 Start:
     16	    0100  BB 0082						 mov bx, 0082h
     17	    0103  E8 00ED						 call ReadNumber		 ; ax -> line
     18
     19	    0106  BE 00A0						 mov si, 160d
     20	    0109  F7 E6							 mul si					 ; ax *= 10
     21	    010B  8B F8							 mov di, ax				 ; si =	ax
     22
     23	    010D  E8 00E3						 call ReadNumber
     24	    0110  03 C0							 add ax, ax
     25	    0112  03 F8							 add di, ax
     26	    0114  57							 push di				 ; coordinates ready
     27
     28	    0115  E8 00DB				 call ReadNumber		 ; type
     29	    0118  50							 push ax				 ; type
     30
     31	    0119  E8 00D7						 call ReadNumber
     32	    011C  8B D0							 mov dx, ax				 ; dx =	color
     33	    011E  58							 pop ax					 ; ax =	type
     34
     35	    011F  3D 0001						 cmp ax, 01h
     36	    0122  74 17	90 90						 je @@Parse1
     37	    0126  3D 0002						 cmp ax, 02h
     38	    0129  74 30	90 90						 je @@Parse2
     39	    012D  3D 0003						 cmp ax, 03h
     40	    0130  74 61	90 90						 je @@Parse3
     41	    0134  3D 0004						 cmp ax, 04h
     42	    0137  74 76	90 90						 je @@Parse4
     43
     44					 ; MODE	= 1 ;
     45	    013B			 @@Parse1:
     46	    013B  B9 0008						 mov cx, 08h				 ; counter for loop
     47	    013E  BF 00A0r						 lea di, arguments
     48
     49									 ; READING ASCII ;
     50	    0141  8A 07							 mov byte ptr al, [bx]	 ; al =	ascii code
     51	    0143  FE C3							 inc bl
     52	    0145  FE C3							 inc bl					 ; bl += 2
     53
     54	    0147  8A E2							 mov ah, dl
     55
     56	    0149  89 05			 @@Loop1:		 mov [di], ax
     57	    014B  47							 inc di
Turbo Assembler	 Version 4.1	    02/26/23 00:20:59	    Page 2
frmbytxt.asm



     58	    014C  47							 inc di
     59	    014D  E2 FA							 loop @@Loop1			 ; symb	-> argument x8
     60
     61	    014F  C7 05	0020						 mov word ptr [di], 0020h			 ; inside = +
     62					 space
     63	    0153  BF 00A0r						 lea di, arguments
     64
     65	    0156  6A 00					 push 00h		 ; is double
     66	    0158  EB 6E	90						 jmp @@Call
     67
     68					 ; MODE	= 2 ;
     69	    015B			 @@Parse2:
     70	    015B  B9 0008						 mov cx, 08h				 ; counter for loop
     71	    015E  BF 00A0r						 lea di, arguments
     72
     73									 ; READING ASCII ;
     74	    0161  8A 07							 mov byte ptr al, [bx]	 ; al =	ascii code
     75	    0163  FE C3							 inc bl
     76	    0165  FE C3							 inc bl					 ; bl += 2
     77
     78	    0167  8A E2							 mov ah, dl
     79
     80	    0169  89 05			 @@Loop2:		 mov [di], ax
     81	    016B  47							 inc di
     82	    016C  47							 inc di
     83	    016D  E2 FA							 loop @@Loop2			 ; symb	-> argument x8
     84
     85	    016F  C7 05	0020						 mov word ptr [di], 0020h ; inside = space
     86	    0173  BF 00A0r						 lea di, arguments
     87
     88	    0176  8B F3							 mov si, bx				 ; address of	    +
     89					 argument cmd
     90
     91	    0178  BB B800						 mov bx, 0b800h
     92	    017B  8E C3							 mov es, bx				 ; es -> 0b800h
     93	    017D  5B							 pop bx					 ; coordinates
     94
     95	    017E  53							 push bx				 ; save	coords
     96
     97	    017F  81 EB	00A2						 sub bx, 162d
     98
     99	    0183  56							 push si				 ; address of	    +
    100					 argument cmd
    101	    0184  E8 01A7						 call DrawRect			 ; draw	bigger frame
    102
    103	    0187  5E							 pop si					 ; args
    104	    0188  5B							 pop bx					 ; coords
    105	    0189  53							 push bx				 ; coords
    106	    018A  8B DE							 mov bx, si
    107
    108	    018C  6A 01					 push 01h		 ; is double
    109	    018E  EB 38	90						 jmp @@Call
    110
    111	    0191  CD 20							 int 20h				 ; exit(0)
    112
    113					 ; MODE	= 3 ;
    114	    0193  B9 0008		 @@Parse3:		 mov cx, 08h
Turbo Assembler	 Version 4.1	    02/26/23 00:20:59	    Page 3
frmbytxt.asm



    115	    0196  BF 00A0r						 lea di, arguments
    116
    117	    0199  8A E2			 @@Loop3:		 mov ah, dl
    118	    019B  B0 2A					 mov al, 2ah
    119	    019D  89 05					 mov word ptr [di], ax
    120	    019F  47							 inc di
    121	    01A0  47							 inc di
    122	    01A1  E2 F6							 loop @@Loop3
    123
    124	    01A3  C7 05	0020						 mov word ptr [di], 0020h			 ; inside = +
    125					 space
    126	    01A7  BF 00A0r						 lea di, arguments
    127
    128	    01AA  6A 00					 push 00h		 ; is double
    129	    01AC  EB 1A	90						 jmp @@Call
    130
    131					 ; MODE	= 4 ;
    132	    01AF  B9 0009		 @@Parse4:		 mov cx, 09h
    133	    01B2  BF 00A0r						 lea di, arguments
    134
    135	    01B5  8A 07			 @@Loop4:		 mov byte ptr al, [bx]	 ; al =	ascii code
    136	    01B7  FE C3							 inc bl					 ; bl++
    137	    01B9  8A E2							 mov ah, dl
    138
    139	    01BB  89 05							 mov [di], ax
    140	    01BD  47							 inc di
    141	    01BE  47							 inc di
    142
    143	    01BF  E2 F4							 loop @@Loop4
    144
    145	    01C1  BF 00A0r						 lea di, arguments
    146	    01C4  FE C3							 inc bl					 ; move	to next	    +
    147					 symbol
    148	    01C6  6A 00					 push 00h		 ; is double
    149
    150	    01C8			 @@Call:
    151	    01C8  8A 07							 mov byte ptr al, [bx]	 ; al =	ascii code
    152	    01CA  FE C3							 inc bl
    153
    154									 ; cmp al, 60h
    155									 ; je @@StartRead
    156									 ; jmp @@Continue
    157
    158	    01CC  50			 @@StartRead:	 push ax
    159	    01CD  53					 push bx
    160	    01CE  56					 push si
    161	    01CF  FE CB							 dec bl
    162	    01D1  E8 001F				 call ReadNumber	 ; ax -> text color
    163	    01D4  5E					 pop si
    164	    01D5  5B					 pop bx
    165	    01D6  8B D0					 mov dx, ax		 ; dx =	text color
    166	    01D8  58					 pop ax
    167
    168	    01D9  53					 push bx
    169	    01DA  FE C3							 inc bl
    170	    01DC  FE C3							 inc bl
    171	    01DE  E8 0038						 call ReadText
Turbo Assembler	 Version 4.1	    02/26/23 00:20:59	    Page 4
frmbytxt.asm



    172	    01E1  5B							 pop bx
    173
    174	    01E2  BB B800		 @@Continue:		 mov bx, 0b800h
    175	    01E5  8E C3							 mov es, bx				 ; es -> 0b800h
    176	    01E7  58					 pop ax			 ; ax =	is_double
    177	    01E8  5B							 pop bx					 ; coordinates
    178
    179	    01E9  BE 0000r				 lea si, printText
    180	    01EC  BF 00A0r				 lea di, arguments
    181	    01EF  E8 023C						 call FrameByTxt
    182
    183	    01F2  C3			 @@Exit:	 ret
    184
    185
    186					 ;-----------------------------------------------------------
    187					 ; Reads command line int arguments
    188					 ;-----------------------------------------------------------
    189					 ; Entry:		 BX = position in command line (starting 80h)
    190					 ; Exit:		 AX - read value
    191					 ; Expects:	 None
    192					 ; Destroys:	 AX, BX, CL, DX, SI
    193					 ;-----------------------------------------------------------
    194	    01F3			 ReadNumber		 proc
    195	    01F3  B8 0000						 mov ax, 00h
    196	    01F6  BA 0000						 mov dx, 00h					 ; dx:ax = 0
    197
    198	    01F9  8A 0F			 @@Loop:		 mov byte ptr cl, [bx]		 ; cl =	arg symb
    199	    01FB  80 F9	0D						 cmp cl, 0Dh
    200	    01FE  74 16	90 90						 je @@Exit
    201
    202	    0202  80 F9	20						 cmp cl, 20h
    203	    0205  74 0F	90 90						 je @@Exit					 ; if cl == +
    204					 ' ' or	0D: exit()
    205
    206	    0209  BE 000A						 mov si, 10d
    207	    020C  F7 E6							 mul si						 ; ax *= 10
    208
    209	    020E  02 C1							 add al, cl
    210	    0210  2C 30							 sub al, 30h					 ; ax +=    +
    211					 read ascii.toChar()
    212
    213	    0212  FE C3							 inc bl						 ; bx++
    214	    0214  EB E3							 jmp @@Loop
    215
    216	    0216  FE C3			 @@Exit:		 inc bl						 ; bx++
    217	    0218  C3							 ret
    218	    0219							 endp
    219
    220
    221					 ;-----------------------------------------------------------
    222					 ; Reads text from command line	arguments
    223					 ;-----------------------------------------------------------
    224					 ; Entry:		 BX = position in command line (starting 80h)
    225					 ; Exit:		 printText
    226					 ; Expects:	 None
    227					 ; Destroys:	 BX, CX, DI
    228					 ;-----------------------------------------------------------
Turbo Assembler	 Version 4.1	    02/26/23 00:20:59	    Page 5
frmbytxt.asm



    229	    0219			 ReadText		 proc
    230	    0219  BF 0000r						 lea di, printText
    231
    232	    021C  8A 0F			 @@Loop:		 mov byte ptr cl, [bx]		 ; cl =	arg symb
    233
    234	    021E  80 F9	60						 cmp cl, 60h
    235	    0221  74 09	90 90						 je @@Exit					 ; if al == +
    236					 ': exit()
    237
    238	    0225  88 0D							 mov [di], cl
    239
    240	    0227  47							 inc di						 ; di++
    241	    0228  FE C3							 inc bl						 ; bx++
    242	    022A  EB F0							 jmp @@Loop
    243
    244	    022C  B0 24			 @@Exit:		 mov al, '$'
    245	    022E  88 05							 mov [di], al
    246	    0230  FE C3							 inc bl						 ; bx++
    247
    248	    0232  C3							 ret
    249	    0233							 endp
    250
    251
    252					 include ..\LIBA.ASM
1   253	    0233			 .data
1   254	    00B2  0A 54	68 69 73 20 73+		 ErrorMsg: db 0Ah, 'This symbol	is not allowed!$'
    255		  79 6D	62 6F 6C 20 69+
    256		  73 20	6E 6F 74 20 61+
    257		  6C 6C	6F 77 65 64 21+
    258		  24
1   259
1   260	    00CF			 .code
1   261
1   262					 ;-----------------------------------------------------------
1   263					 ; Print binary	of value
1   264					 ;-----------------------------------------------------------
1   265					 ; Entry:		 AX = value to convert to
1   266					 ;				 BX = coordinates to print on string
1   267					 ; Exit:		 None
1   268					 ; Expects:	 ES -> videomem	(b800h)
1   269					 ; Destroys:	 BX, CX, DL
1   270					 ;-----------------------------------------------------------
1   271	    0233			 ToBin		 proc
1   272
1   273	    0233  BA 8000					 mov dx, 8000h		 ; dx =	2 ** 15
1   274	    0236  EB 17	90					 jmp @@NewByte
1   275
1   276	    0239			 @@Print1:
1   277	    0239  26: C7 07 0531				 mov es:[bx], 0531h	 ; put 0 to videomem
*Warning* ..\LIBA.ASM(21) Argument needs type override
1   278	    023E  83 C3	02					 add bx, 2			 ; bx += 2
1   279	    0241  EB 17	90					 jmp @@Next
1   280
1   281	    0244			 @@Print0:
1   282	    0244  26: C7 07 0530				 mov es:[bx], 0530h	 ; put 0 to videomem
*Warning* ..\LIBA.ASM(26) Argument needs type override
1   283	    0249  83 C3	02					 add bx, 2			 ; bx += 2
Turbo Assembler	 Version 4.1	    02/26/23 00:20:59	    Page 6
frmbytxt.asm



1   284	    024C  EB 0C	90					 jmp @@Next
1   285
1   286	    024F			 @@NewByte:
1   287	    024F  8B C8						 mov cx, ax			 ; cx =	ax
1   288	    0251  23 CA						 and cx, dx			 ; cx && dx
1   289
1   290	    0253  83 F9	00					 cmp cx, 0h			 ; if cx == 0: print(0)	else: print +
    291					 (1)
1   292	    0256  74 EC						 je  @@Print0
1   293	    0258  EB DF						 jmp @@Print1
1   294
1   295	    025A			 @@Next:
1   296	    025A  83 FA	01					 cmp dx, 1h			 ; if dx == 1: return
1   297	    025D  74 06	90 90					 je @@Exit
1   298
1   299	    0261  D1 EA						 shr dx, 1			 ; dx >> 1
1   300	    0263  EB EA						 jmp @@NewByte
1   301
1   302	    0265  C3			 @@Exit:	 ret
1   303	    0266						 endp
1   304
1   305					 ;-----------------------------------------------------------
1   306					 ; Print hex of	value
1   307					 ;-----------------------------------------------------------
1   308					 ; Entry:	 SI = value to convert to
1   309					 ;			 BX = coordinates to print in cmd
1   310					 ; Exit:	 None
1   311					 ; Expects:	 ES -> videomem	(b800h)
1   312					 ; Destroys:	 AX, BX, CX, DX, DI, BP, SP
1   313					 ;----------------------------------------------------------
1   314	    0266			 ToHex	 proc
1   315
1   316	    0266  BA 8000						 mov dx, 8000h		 ; first byte is 1 others are 0
1   317	    0269  B9 0004						 mov cx, 0004h		 ; cx =	0
1   318	    026C  BF 0000						 mov di, 0000h
1   319
1   320	    026F			 @@ReadBytes:
1   321	    026F  FE C5							 inc ch				 ; ch++	(byte counter in 4th)
1   322	    0271  80 FD	05						 cmp ch, 05h			 ; if ch == 5: exit else:   +
    323					 continue
1   324	    0274  74 4D	90 90						 je @@Exit
1   325	    0278  EB 01	90						 jmp @@Proceed4bit
1   326
1   327	    027B			 @@Proceed4bit:
1   328	    027B  8B C6							 mov ax, si			 ; ax =	si (given value)
1   329	    027D  23 C2							 and ax, dx			 ; ax && ax
1   330
1   331	    027F  3D 0000						 cmp ax, 00h			 ; if ax == 0: SkipMul()
1   332	    0282  74 10	90 90						 je @@SkipMul
1   333
1   334	    0286  B0 01							 mov al, 01h			 ; al =	1 (value to add)
1   335	    0288  B4 00							 mov ah, 00h			 ; ah =	0 (needed not to    +
    336					 brake ax)
1   337	    028A  80 E9	01						 sub cl, 1			 ; cl--	(bit num)
1   338	    028D  D2 E0							 shl al, cl			 ; al =	2^cl
1   339	    028F  80 C1	01						 add cl, 1			 ; cl++
1   340	    0292  03 F8							 add di, ax			 ; di += ax (di	- result to +
Turbo Assembler	 Version 4.1	    02/26/23 00:20:59	    Page 7
frmbytxt.asm



    341					 print)
1   342
1   343	    0294			 @@SkipMul:
1   344	    0294  80 E9	01						 sub cl, 1			 ; cl--
1   345	    0297  D1 EA							 shr dx, 1			 ; dx /= 2
1   346
1   347	    0299  80 F9	00						 cmp cl, 00h
1   348	    029C  74 04	90 90						 je @@PrintSymbol
1   349	    02A0  EB D9							 jmp @@Proceed4bit	 ; if cl == 0: Print else continue  +
    350					 reading byte
1   351
1   352	    02A2			 @@PrintSymbol:
1   353	    02A2  8B C7							 mov ax, di			 ; ax =	di
1   354	    02A4  B4 05							 mov ah, 05h			 ; ah =	05h (COLOR)
1   355
1   356	    02A6  3C 0A							 cmp al, 10d			 ; if al >= 10:	PrintAsLetter
1   357	    02A8  73 07	90 90						 jae @@LetterPrint
1   358
1   359	    02AC  04 30							 add al, 30h			 ; else: al += 30h -> print +
    360					 as ASCII
1   361	    02AE  EB 06	90						 jmp @@ContinuePrint
1   362
1   363	    02B1			 @@LetterPrint:
1   364	    02B1  04 37							 add al, 37h			 ; al += 37 -> add letter as+
    365					 ASCII
1   366	    02B3  EB 01	90						 jmp @@ContinuePrint
1   367
1   368	    02B6			 @@ContinuePrint:
1   369	    02B6  26: 89 07						 mov es:[bx], ax	 ; put ax to videomem
1   370	    02B9  83 C3	02						 add bx, 2			 ; bx += 2
1   371	    02BC  BF 0000						 mov di, 00h			 ; di =	0
1   372	    02BF  B1 04							 mov cl, 04h			 ; cl =	4 (byte	count)
1   373	    02C1  EB AC							 jmp @@ReadBytes
1   374
1   375	    02C3			 @@Exit:
1   376	    02C3  C3							 ret
1   377	    02C4							 endp
1   378
1   379
1   380					 ;-----------------------------------------------------------
1   381					 ; Print dec of	value
1   382					 ;-----------------------------------------------------------
1   383					 ; Entry:	 SI = value to convert to
1   384					 ;		 BX = coordinates to print on string
1   385					 ; Exit:	 None
1   386					 ; Expects:	 ES -> videomem	(b800h)
1   387					 ; Destroys:	 AX, BX, CX, DX, DI
1   388					 ;-----------------------------------------------------------
1   389	    02C4			 ToDec		 proc
1   390
1   391	    02C4  8B C6						 mov ax, si			 ; ax =	si
1   392	    02C6  BF 0006					 mov di, 06h			 ; amount of digits
1   393
1   394	    02C9			 @@PrintSymb:
1   395	    02C9  B9 000A					 mov cx, 000Ah		 ; cx =	10
1   396	    02CC  F7 F1						 div cx				 ; ax =	ax / 10, dx = ax % 10
1   397
Turbo Assembler	 Version 4.1	    02/26/23 00:20:59	    Page 8
frmbytxt.asm



1   398	    02CE  80 C2	30					 add dl, 30h			 ; dl += 30 (symb ascii)
1   399	    02D1  B6 05						 mov dh, 05h			 ; dh =	5   (color)
1   400
1   401	    02D3  26: 89 17					 mov es:[bx], dx
1   402	    02D6  BA 0000					 mov dx, 0000h		 ; print on screen
1   403
1   404	    02D9  83 EB	02					 sub bx, 2			 ; bx -= 2
1   405	    02DC  83 EF	01					 sub di, 1			 ; di --
1   406
1   407	    02DF  83 FF	00					 cmp di, 0
1   408	    02E2  74 04	90 90					 je @@Exit
1   409
1   410	    02E6  EB E1						 jmp @@PrintSymb
1   411
1   412	    02E8  C3			 @@Exit:	 ret
1   413	    02E9						 endp
1   414
1   415
1   416					 ;------------------------------------------------------------
1   417					 ; Reads dec number
1   418					 ;------------------------------------------------------------
1   419					 ; Entry:	 None
1   420					 ; Exit:	 DI - dec value
1   421					 ; Expects:	 None
1   422					 ; Destroys:	 AX, CX, DI, SI
1   423					 ;------------------------------------------------------------
1   424	    02E9			 IntInput	 proc
1   425
1   426	    02E9  BF 0000					 mov di, 0000h		 ; di =	0
1   427	    02EC  B9 0005					 mov cx, 0005h		 ; cx =	5 (max amount of numbers)
1   428	    02EF  EB 0B	90					 jmp @@Loop
1   429	    02F2			 @@OnError:
1   430	    02F2  BA 00B2r					 mov dx, offset	ErrorMsg
1   431	    02F5  B4 09						 mov ah, 09h
1   432	    02F7  CD 21						 int 21h			 ; print Error message
1   433
1   434	    02F9  EB 32	90					 jmp @@Exit
1   435
1   436	    02FC  B4 01			 @@Loop:	 mov ah, 01h
1   437	    02FE  CD 21						 int 21h			 ; reading char	-> al
1   438
1   439	    0300  3C 0D						 cmp al, 0Dh
1   440	    0302  74 29	90 90					 je @@Exit
1   441
1   442	    0306  3C 13						 cmp al, 13h
1   443	    0308  74 23	90 90					 je @@Exit			 ; if al == '\n' || '\r': retunr
1   444
1   445	    030C  3C 30						 cmp al, 30h
1   446	    030E  72 E2						 jb @@OnError
1   447
1   448	    0310  3C 40						 cmp al, 40h
1   449	    0312  77 DE						 ja @@OnError		 ; if !alnum(al): OnError()
1   450
1   451	    0314  2C 30						 sub al, 30h			 ; al -= 30 (ascii -> number)
1   452	    0316  B4 00						 mov ah, 00h
1   453
1   454	    0318  8B F0						 mov si, ax
Turbo Assembler	 Version 4.1	    02/26/23 00:20:59	    Page 9
frmbytxt.asm



1   455	    031A  8B C7						 mov ax, di
1   456	    031C  8B FE						 mov di, si			 ; swap	(ax, di)
1   457
1   458	    031E  BE 000A					 mov si, 10d
1   459	    0321  F7 E6						 mul si				 ; ax *= 10
1   460
1   461	    0323  03 C7						 add ax, di			 ; ax += di (last number)
1   462
1   463	    0325  8B F0						 mov si, ax
1   464	    0327  8B C7						 mov ax, di
1   465	    0329  8B FE						 mov di, si			 ; swap	(ax, di)
1   466
1   467	    032B  E2 CF						 loop @@Loop
1   468
1   469	    032D  C3			 @@Exit:	 ret
1   470	    032E						 endp
1   471
1   472
1   473					 ;-------------------------------------------------------------
1   474					 ; Draws rectangle on screen with given	borders
1   475					 ;-------------------------------------------------------------
1   476					 ; Entry:	 DI - pointer to array with symbols
1   477					 ;			 BX - coordinates where	to print
1   478					 ;			 CX - horizontal size
1   479					 ;			 DX - vertical size
1   480					 ; Exit:	 None
1   481					 ; Expects:	 ES -> videomem	(0b800h)
1   482					 ; Destroys:	 AX, BX, CX, SI
1   483					 ;-------------------------------------------------------------
1   484	    032E			 DrawRect		 proc
1   485	    032E  55							 push bp
1   486
1   487	    032F  83 E9	02						 sub cx, 2
1   488	    0332  8B F2							 mov si, dx				 ; i = dx
1   489	    0334  EB 0C	90						 jmp @@MainCycle
1   490
1   491	    0337  83 EE	01		 @@IterateI:		 sub si, 1				 ; i--
1   492
1   493	    033A  2B D9							 sub bx, cx				 ; start vertically
1   494	    033C  2B D9							 sub bx, cx
1   495	    033E  81 C3	00A0						 add bx, 160d			 ; new line
1   496
1   497	    0342  8B C1			 @@MainCycle:	 mov ax, cx				 ; j = cx
1   498
1   499	    0344  83 EB	02						 sub bx, 2				 ; bx -= 2 (then i  +
    500					 += 2 to print)
1   501
1   502	    0347  83 FE	00						 cmp si, 00h
1   503	    034A  75 43	90 90						 jne @@DrawV
1   504
1   505	    034E  83 C3	02		 @@ContinueMain: add bx, 2				 ; bx += 2 (watch previous comment)
1   506	    0351  83 FE	00						 cmp si, 00h
1   507	    0354  0F 84	0086						 je @@Exit				 ; if i	== 0: exit(0)
1   508
1   509	    0358  8B 6D	10		 @@SecondCycle:	 mov bp, [di + 16d]
1   510	    035B  26: 89 2F						 mov es:[bx], bp
1   511
Turbo Assembler	 Version 4.1	    02/26/23 00:20:59	    Page 10
frmbytxt.asm



1   512	    035E  3D 0000						 cmp ax, 00h
1   513	    0361  74 53	90 90						 je @@DrawRightV		 ; print left border (WORKS!)
1   514
1   515	    0365  3B F2							 cmp si, dx
1   516	    0367  74 16	90 90						 je @@DrawH				 ; draw	highest	    +
    517					 border
1   518
1   519	    036B  83 FE	01						 cmp si, 01h
1   520	    036E  74 17	90 90						 je @@DrawLower			 ; draw	lowest border
1   521
1   522	    0372			 @@ContinueSecond:
1   523	    0372  3D 0000						 cmp ax, 00h
1   524	    0375  74 C0							 je @@IterateI			 ; if j	== 0: i++
1   525
1   526	    0377  2D 0001						 sub ax, 1				 ; else: j--
1   527	    037A  83 C3	02						 add bx, 2				 ; bx += 2
1   528	    037D  EB D9							 jmp @@SecondCycle
1   529
1   530	    037F  8B 6D	02		 @@DrawH:		 mov bp, [di + 2d]
1   531	    0382  26: 89 2F						 mov es:[bx], bp
1   532	    0385  EB EB							 jmp @@ContinueSecond
1   533
1   534	    0387  8B 6D	0A		 @@DrawLower:	 mov bp, [di + 10d]
1   535	    038A  26: 89 2F						 mov es:[bx], bp
1   536	    038D  EB E3							 jmp @@ContinueSecond
1   537
1   538	    038F  83 FE	01		 @@DrawV:		 cmp si, 01h
1   539	    0392  74 12	90 90						 je @@LowLeft
1   540	    0396  3B F2							 cmp si, dx
1   541	    0398  74 05	90 90						 je @@HighLeft
1   542	    039C  EB 10	90						 jmp @@Left			     ; TODO: all labels	    +
    543					 !!!!! -> functions
1   544
1   545	    039F  8B 2D			 @@HighLeft:		 mov bp, [di]
1   546	    03A1  26: 89 2F						 mov es:[bx], bp
1   547	    03A4  EB A8							 jmp @@ContinueMain
1   548
1   549	    03A6  8B 6D	0C		 @@LowLeft:		 mov bp, [di + 12d]
1   550	    03A9  26: 89 2F						 mov es:[bx], bp
1   551	    03AC  EB A0							 jmp @@ContinueMain
1   552
1   553	    03AE  8B 6D	0E		 @@Left:		 mov bp, [di + 14d]
1   554	    03B1  26: 89 2F						 mov es:[bx], bp
1   555	    03B4  EB 98							 jmp @@ContinueMain
1   556
1   557	    03B6  83 FE	01		 @@DrawRightV:	 cmp si, 01h
1   558	    03B9  74 0B	90 90						 je @@LowRight
1   559	    03BD  3B F2							 cmp si, dx
1   560	    03BF  74 0D	90 90						 je @@HighRight
1   561	    03C3  EB 11	90						 jmp @@Right
1   562
1   563	    03C6  8B 6D	08		 @@LowRight:		 mov bp, [di + 8d]
1   564	    03C9  26: 89 2F						 mov es:[bx], bp
1   565	    03CC  EB A4							 jmp @@ContinueSecond
1   566
1   567	    03CE  8B 6D	04		 @@HighRight:	 mov bp, [di + 4d]
1   568	    03D1  26: 89 2F						 mov es:[bx], bp
Turbo Assembler	 Version 4.1	    02/26/23 00:20:59	    Page 11
frmbytxt.asm



1   569	    03D4  EB 9C							 jmp @@ContinueSecond
1   570
1   571	    03D6  8B 6D	06		 @@Right:		 mov bp, [di + 6d]
1   572	    03D9  26: 89 2F						 mov es:[bx], bp
1   573	    03DC  EB 94							 jmp @@ContinueSecond
1   574
1   575	    03DE  5D			 @@Exit:		 pop bp
1   576	    03DF  C3							 ret
1   577	    03E0							 endp
1   578
1   579
1   580					 ;-----------------------------------------------------------
1   581					 ; Put symbol with given ascii to videomem
1   582					 ;-----------------------------------------------------------
1   583					 ; Entry:	 BX = coordinates of left higher corner	of frame
1   584					 ;			 DX = height
1   585					 ;			 CX = length
1   586					 ;			 SI = pointer to text
1   587					 ;			 AX = text color
1   588					 ; Exit:	 None
1   589					 ; Expects:	 ES -> videomem	(b800h)
1   590					 ; Destroys:	 AX, DX, DI
1   591					 ;-----------------------------------------------------------
1   592	    03E0			 RectText		 proc
1   593
1   594	    03E0  50							 push ax			 ; save	color
1   595
1   596	    03E1  8B FA							 mov di, dx			 ; moving for div
1   597
1   598	    03E3  BA 0000						 mov dx, 0h
1   599	    03E6  8B C3							 mov ax, bx
1   600	    03E8  BB 00A0						 mov bx, 160d
1   601	    03EB  F7 F3							 div bx				 ; ax =	lines, dx = columns
1   602
1   603	    03ED  03 F8							 add di, ax			 ; bottom
1   604	    03EF  03 F8							 add di, ax			 ; bottom + top
1   605	    03F1  D1 EF							 shr di, 1			 ; (bottom + top) / 2
1   606
1   607	    03F3  52							 push dx
1   608
1   609	    03F4  93							 xchg ax, bx			 ; swap	(ax, bx)
1   610	    03F5  F7 E7							 mul di				 ; ax =	160 * height (di)
1   611	    03F7  93							 xchg ax, bx			 ; swap	(ax, bx)
1   612
1   613	    03F8  5A							 pop dx
1   614
1   615	    03F9  8B F9							 mov di, cx			 ; moving for strlen (di =  +
    616					 length)
1   617	    03FB  56							 push si
1   618
1   619	    03FC  E8 0070						 call Strlen			 ; len(string) -> cx
1   620
1   621	    03FF  5E							 pop si
1   622
1   623	    0400  03 D7							 add dx, di			 ; right border
1   624	    0402  03 D2							 add dx, dx
1   625	    0404  D1 EA							 shr dx, 1			 ; (left + right) / 2
Turbo Assembler	 Version 4.1	    02/26/23 00:20:59	    Page 12
frmbytxt.asm



1   626
1   627	    0406  2B D1							 sub dx, cx
1   628	    0408  4A							 dec dx
1   629	    0409  4A							 dec dx
1   630
1   631	    040A  B8 0001						 mov ax, 01h		 ; mask	to check last byte
1   632	    040D  23 C2							 and ax, dx
1   633	    040F  3D 0001						 cmp ax, 01h
1   634	    0412  74 05	90 90						 je @@DoInc
1   635	    0416  EB 02	90						 jmp @@Continue
1   636
1   637	    0419  42			 @@DoInc:		 inc dx
1   638
1   639	    041A  03 DA			 @@Continue:		 add bx, dx
1   640	    041C  8B FB							 mov di, bx
1   641
1   642	    041E  83 F9	00						 cmp cx, 00h
1   643	    0421  74 0A	90 90						 je @@Exit
1   644
1   645	    0425  FC							 cld
1   646
1   647	    0426  58							 pop ax
1   648	    0427  8A E0							 mov ah, al
1   649									 ; PRINTING STRING ;
1   650	    0429  AC			 @@Loop:		 lodsb				 ; ds:si -> al
1   651	    042A  AB							 stosw				 ; ax -> es:di
1   652	    042B  E2 FC							 loop @@Loop
1   653
1   654	    042D  C3			 @@Exit:		 ret
1   655	    042E							 endp
1   656
1   657
1   658					 ;-----------------------------------------------------------
1   659					 ; Put symbol with given ascii to videomem
1   660					 ;-----------------------------------------------------------
1   661					 ; Entry:	 AX = 0	|| 1 if	frame is double	or not
1   662					 ;			 BX = coordinates
1   663					 ;			 SI = pointer to text
1   664					 ;			 DI - pointer to array with symbols
1   665					 ;			 DX - text color
1   666					 ; Exit:	 None
1   667					 ; Expects:	 ES -> videomem	(b800h)
1   668					 ; Destroys:	 AX, BX, CX, DX, SI, DI
1   669					 ;-----------------------------------------------------------
1   670	    042E			 FrameByTxt		 proc
1   671
1   672	    042E  56							 push si			 ; pointer to text
1   673	    042F  52							 push dx			 ; save	text color
1   674	    0430  50							 push ax
1   675	    0431  E8 003B						 call Strlen		 ; len(si) -> cx
1   676	    0434  58							 pop ax
1   677
1   678	    0435  53							 push bx			 ; where to print text
1   679
1   680	    0436  81 EB	0140						 sub bx, 320d		 ; two lines back
1   681	    043A  83 EB	02						 sub bx, 2d			 ; two columns back
1   682
Turbo Assembler	 Version 4.1	    02/26/23 00:20:59	    Page 13
frmbytxt.asm



1   683	    043D  BA 0005						 mov dx, 5d			 ; heght = 5
1   684
1   685	    0440  83 C1	04						 add cx, 4d			 ; length = strLen + 2
1   686
1   687	    0443  3D 0001						 cmp ax, 01h
1   688	    0446  75 13	90 90						 jne @@DrawUsual	 ; if ax != 1: draw not	double frame
1   689
1   690									 ; DRAWING DOUBLE RAM ;
1   691	    044A  53							 push bx			 ; coords
1   692	    044B  52							 push dx			 ; height
1   693	    044C  51							 push cx			 ; length
1   694
1   695	    044D  81 EB	00A2						 sub bx, 162d		 ; new start
1   696	    0451  42							 inc dx
1   697	    0452  42							 inc dx
1   698
1   699	    0453  41							 inc cx
1   700	    0454  41							 inc cx				 ; len += 2; height += 2
1   701
1   702	    0455  E8 FED6						 call DrawRect
1   703
1   704	    0458  59							 pop cx
1   705	    0459  5A							 pop dx
1   706	    045A  5B							 pop bx
1   707
1   708
1   709	    045B  E8 FED0		 @@DrawUsual:	 call DrawRect		 ; drawing frame
1   710
1   711	    045E  83 E9	02						 sub cx, 2d			 ; cx -	strlen
1   712	    0461  5F							 pop di				 ; where to print text -> di
1   713	    0462  5A							 pop dx				 ; dx =	text color
1   714	    0463  5E							 pop si				 ; pointer to text
1   715
1   716	    0464  8A E2							 mov ah, dl
1   717	    0466  AC			 @@Loop:		 lodsb				 ; ds:si -> al
1   718	    0467  AB							 stosw				 ; ax -> es:di
1   719	    0468  E2 FC							 loop @@Loop
1   720
1   721
1   722	    046A  C3			 @@Exit:		 ret
1   723	    046B							 endp
1   724
1   725
1   726					 ;-----------------------------------------------------------
1   727					 ; Put symbol with given ascii to videomem
1   728					 ;-----------------------------------------------------------
1   729					 ; Entry:	 BX = coordinates where	to print symbol
1   730					 ;			 CX = symbol itself
1   731					 ; Exit:	 None
1   732					 ; Expects:	 ES -> videomem	(b800h)
1   733					 ; Destroys:	 None
1   734					 ;-----------------------------------------------------------
1   735	    046B			 PutChar proc
1   736
1   737	    046B  26: 89 0F			 mov es:[bx], cx	 ; put symbol to videomem
1   738
1   739	    046E  C3				 ret
Turbo Assembler	 Version 4.1	    02/26/23 00:20:59	    Page 14
frmbytxt.asm



1   740	    046F				 endp
1   741
1   742
1   743
1   744					 ;----------------STRING FUNCTIONS-------------------;
1   745
1   746
1   747
1   748					 ;------------------------------------------------------------
1   749					 ; Gets	length of string (string must end with '\0' (0 ascii)
1   750					 ;------------------------------------------------------------
1   751					 ; Entry:	 DS:SI - pointer to string
1   752					 ; Expects:	 None
1   753					 ; Exit:	 CX - amount of	symbols	in string
1   754					 ; Destroys:	 AX, CX, SI
1   755					 ;------------------------------------------------------------
1   756	    046F			 Strlen		 proc
1   757	    046F  B9 0000					 mov cx, 00h
1   758
1   759	    0472  FC			 @@Repeat:	 cld
1   760	    0473  AC						 lodsb			 ; DS:SI++ -> AL
1   761
1   762	    0474  3C 00						 cmp al, 00h		 ; ('\0')
1   763	    0476  74 0B	90 90					 je  @@Exit
1   764
1   765	    047A  3C 24						 cmp al, 24h		 ; ('$')
1   766	    047C  74 05	90 90					 je @@Exit
1   767
1   768	    0480  41						 inc cx			 ; count++
1   769	    0481  EB EF						 jmp @@Repeat	 ; if al == 0 || '$': exit() else: loop
1   770
1   771	    0483  C3			 @@Exit:	 ret
1   772	    0484						 endp
1   773
1   774					 ;------------------------------------------------------------
1   775					 ; Copies bytes	from one side of memory	to another one
1   776					 ;------------------------------------------------------------
1   777					 ; Entry:	 ES:DI - destination pointer
1   778					 ;			 DS:SI - from where pointer
1   779					 ;			 CX    - amount	of bytes to copy
1   780					 ; Expects:	 None
1   781					 ; Exit:	 None
1   782					 ; Destroys:	 CX, DI, SI
1   783					 ;------------------------------------------------------------
1   784	    0484			 Memcpy		 proc
1   785
1   786	    0484  FC						 cld
1   787	    0485  F3> A4					 rep movsb	 ; while (cx--)	DS:SI -> ES:DI
1   788
1   789	    0487  C3						 ret
1   790	    0488						 endp
1   791
1   792					 ;------------------------------------------------------------
1   793					 ; Copies strings
1   794					 ;------------------------------------------------------------
1   795					 ; Entry:	 ES:DI - destination pointer
1   796					 ;		 DS:SI - string	to copy
Turbo Assembler	 Version 4.1	    02/26/23 00:20:59	    Page 15
frmbytxt.asm



1   797					 ; Expects:	 None
1   798					 ; Exit:	 None
1   799					 ; Destroys:	 AL, CX, DI, SI
1   800					 ;------------------------------------------------------------
1   801	    0488			 Strcpy		 proc
1   802
1   803	    0488  FC						 cld
1   804
1   805	    0489  56						 push si
1   806	    048A  57						 push di
1   807
1   808	    048B  E8 FFE1					 call Strlen		 ; strlen(ds:si) -> cx
1   809
1   810	    048E  5F						 pop di
1   811	    048F  5E						 pop si
1   812
1   813	    0490  E8 FFF1					 call Memcpy
1   814
1   815	    0493  B0 24						 mov al, '$'
1   816	    0495  AA						 stosb			 ; destStr[-1] = '$'
1   817
1   818	    0496  C3						 ret
1   819	    0497						 endp
1   820
1   821
1   822					 ;-------------------------------------------------------------
1   823					 ; Fills first n bytes with given symbol
1   824					 ;-------------------------------------------------------------
1   825					 ; Entry:	 ES:DI - pointer to write bytes
1   826					 ;		 AL    - byte
1   827					 ;		 CX    - count
1   828					 ; Exit:	 None
1   829					 ; Expects:	 None
1   830					 ; Destroys:	 CX, DI
1   831					 ;-------------------------------------------------------------
1   832	    0497			 Memset		 proc
1   833
1   834	    0497  FC						 cld
1   835	    0498  F3> AA					 rep stosb
1   836
1   837	    049A  C3						 ret
1   838	    049B						 endp
1   839
1   840					 ;--------------------------------------------------------------
1   841					 ; Compares first n bytes in buffers
1   842					 ;--------------------------------------------------------------
1   843					 ; Entry:	 ES:DI - buf1
1   844					 ;			 DS:SI - buf2
1   845					 ;			 CX    - byte count
1   846					 ; Exit:	 DX    - 0 if eq, < 0 if buf1 <	buf2 &&	> 0 if buf1 > buf2
1   847					 ; Expects:	 None
1   848					 ; Destroys:	 CX, DX, DI, SI
1   849					 ;-------------------------------------------------------------
1   850	    049B			 Memcmp		 proc
1   851	    049B  FC						 cld
1   852
1   853	    049C  BA 0000					 mov dx, 00h
Turbo Assembler	 Version 4.1	    02/26/23 00:20:59	    Page 16
frmbytxt.asm



1   854
1   855	    049F  83 F9	00		 @@Loop:	 cmp cx, 00h
1   856	    04A2  74 0D	90 90					 je @@Exit
1   857	    04A6  49						 dec cx
1   858
1   859	    04A7  A6						 cmpsb			 ; rep cmpsb doesn't work???
1   860	    04A8  74 F5						 je @@Loop		 ; if ZF == 1: repeat
1   861
1   862	    04AA  4F						 dec di			 ; else	return di - si
1   863	    04AB  4E						 dec si
1   864
1   865	    04AC  26: 8B 15					 mov dx, es:[di]
1   866	    04AF  2B 14						 sub dx, ds:[si]
1   867
1   868	    04B1  C3			 @@Exit:	 ret
1   869	    04B2						 endp
1   870
1   871
1   872					 ;-----------------------------------------------------------------------
1   873					 ; Compares to string
1   874					 ;-----------------------------------------------------------------------
1   875					 ; Entry:	 ES:DI - buf1
1   876					 ;		 DS:SI - buf2
1   877					 ; Exit:	 DX    - 0 if equ, < 0 if buf1 < buf2 && > 0 if	buf1 > buf2
1   878					 ; Expects:	 None
1   879					 ; Destroys:	 AX, DX, DI, SI
1   880					 ;-----------------------------------------------------------------------
1   881	    04B2			 Strcmp			 proc
1   882
1   883	    04B2  FC							 cld
1   884	    04B3  BA 0000						 mov dx, 00h
1   885
1   886	    04B6  26: 8A 05		 @@Loop:		 mov al, es:[di]
1   887	    04B9  8A 24							 mov ah, ds:[si]
1   888
1   889	    04BB  80 FC	24						 cmp ah, '$'
1   890	    04BE  74 15	90 90						 je @@CheckLenSI
1   891
1   892	    04C2  3C 24							 cmp al, '$'
1   893	    04C4  74 1B	90 90						 je @@CheckLenDI	 ; if al == '$': cmp lens
1   894
1   895	    04C8  A6							 cmpsb
1   896	    04C9  74 EB							 je @@Loop			 ; if zf == 1: repeat
1   897
1   898	    04CB  4F							 dec di
1   899	    04CC  4E							 dec si
1   900	    04CD  26: 8B 15						 mov dx, es:[di]
1   901	    04D0  2B 14							 sub dx, ds:[si]
1   902	    04D2  EB 10	90						 jmp @@Exit			 ; else	return *di - *si
1   903
1   904	    04D5  3C 24			 @@CheckLenSI:	 cmp al, '$'
1   905	    04D7  74 0B	90 90						 je @@Exit			 ; if al == '$'	return 0
1   906
1   907	    04DB  BA 0001						 mov dx, 01h			 ; dx =	1
1   908	    04DE  EB 04	90						 jmp @@Exit
1   909
1   910	    04E1			 @@CheckLenDI:						 ; di ended faster
Turbo Assembler	 Version 4.1	    02/26/23 00:20:59	    Page 17
frmbytxt.asm



1   911	    04E1  BA FFFE						 mov dx, 0fffeh		 ; dx =	-1
1   912
1   913	    04E4  C3			 @@Exit:		 ret
1   914	    04E5							 endp
1   915
    916
    917					 end	     Start
Turbo Assembler	 Version 4.1	    02/26/23 00:20:59	    Page 18
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "02/26/23"
??FILENAME			  Text	 "frmbytxt"
??TIME				  Text	 "00:20:59"
??VERSION			  Number 040A
@32BIT				  Text	 0
@@CALL				  Near	 DGROUP:01C8
@@CHECKLENDI			  Near	 DGROUP:04E1
@@CHECKLENSI			  Near	 DGROUP:04D5
@@CONTINUE			  Near	 DGROUP:01E2
@@CONTINUE			  Near	 DGROUP:041A
@@CONTINUEMAIN			  Near	 DGROUP:034E
@@CONTINUEPRINT			  Near	 DGROUP:02B6
@@CONTINUESECOND		  Near	 DGROUP:0372
@@DOINC				  Near	 DGROUP:0419
@@DRAWH				  Near	 DGROUP:037F
@@DRAWLOWER			  Near	 DGROUP:0387
@@DRAWRIGHTV			  Near	 DGROUP:03B6
@@DRAWUSUAL			  Near	 DGROUP:045B
@@DRAWV				  Near	 DGROUP:038F
@@EXIT				  Near	 DGROUP:01F2
@@EXIT				  Near	 DGROUP:0216
@@EXIT				  Near	 DGROUP:022C
@@EXIT				  Near	 DGROUP:0265
@@EXIT				  Near	 DGROUP:02C3
@@EXIT				  Near	 DGROUP:02E8
@@EXIT				  Near	 DGROUP:032D
@@EXIT				  Near	 DGROUP:03DE
@@EXIT				  Near	 DGROUP:042D
@@EXIT				  Near	 DGROUP:046A
@@EXIT				  Near	 DGROUP:0483
@@EXIT				  Near	 DGROUP:04B1
@@EXIT				  Near	 DGROUP:04E4
@@HIGHLEFT			  Near	 DGROUP:039F
@@HIGHRIGHT			  Near	 DGROUP:03CE
@@ITERATEI			  Near	 DGROUP:0337
@@LEFT				  Near	 DGROUP:03AE
@@LETTERPRINT			  Near	 DGROUP:02B1
@@LOOP				  Near	 DGROUP:01F9
@@LOOP				  Near	 DGROUP:021C
@@LOOP				  Near	 DGROUP:02FC
@@LOOP				  Near	 DGROUP:0429
@@LOOP				  Near	 DGROUP:0466
@@LOOP				  Near	 DGROUP:049F
@@LOOP				  Near	 DGROUP:04B6
@@LOOP1				  Near	 DGROUP:0149
@@LOOP2				  Near	 DGROUP:0169
@@LOOP3				  Near	 DGROUP:0199
@@LOOP4				  Near	 DGROUP:01B5
@@LOWLEFT			  Near	 DGROUP:03A6
@@LOWRIGHT			  Near	 DGROUP:03C6
@@MAINCYCLE			  Near	 DGROUP:0342
@@NEWBYTE			  Near	 DGROUP:024F
@@NEXT				  Near	 DGROUP:025A
@@ONERROR			  Near	 DGROUP:02F2
Turbo Assembler	 Version 4.1	    02/26/23 00:20:59	    Page 19
Symbol Table



@@PARSE1			  Near	 DGROUP:013B
@@PARSE2			  Near	 DGROUP:015B
@@PARSE3			  Near	 DGROUP:0193
@@PARSE4			  Near	 DGROUP:01AF
@@PRINT0			  Near	 DGROUP:0244
@@PRINT1			  Near	 DGROUP:0239
@@PRINTSYMB			  Near	 DGROUP:02C9
@@PRINTSYMBOL			  Near	 DGROUP:02A2
@@PROCEED4BIT			  Near	 DGROUP:027B
@@READBYTES			  Near	 DGROUP:026F
@@REPEAT			  Near	 DGROUP:0472
@@RIGHT				  Near	 DGROUP:03D6
@@SECONDCYCLE			  Near	 DGROUP:0358
@@SKIPMUL			  Near	 DGROUP:0294
@@STARTREAD			  Near	 DGROUP:01CC
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0F0FH
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 FRMBYTXT
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
ARGUMENTS			  Near	 DGROUP:00A0
DRAWRECT			  Near	 DGROUP:032E
ERRORMSG			  Near	 DGROUP:00B2
FRAMEBYTXT			  Near	 DGROUP:042E
INTINPUT			  Near	 DGROUP:02E9
MEMCMP				  Near	 DGROUP:049B
MEMCPY				  Near	 DGROUP:0484
MEMSET				  Near	 DGROUP:0497
PRINTTEXT			  Near	 DGROUP:0000
PUTCHAR				  Near	 DGROUP:046B
READNUMBER			  Near	 DGROUP:01F3
READTEXT			  Near	 DGROUP:0219
RECTTEXT			  Near	 DGROUP:03E0
START				  Near	 DGROUP:0100
STRCMP				  Near	 DGROUP:04B2
STRCPY				  Near	 DGROUP:0488
STRLEN				  Near	 DGROUP:046F
TOBIN				  Near	 DGROUP:0233
TODEC				  Near	 DGROUP:02C4
TOHEX				  Near	 DGROUP:0266

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  00CF Word	  Public  DATA
  _TEXT				  16  04E5 Word	  Public  CODE
Turbo Assembler	 Version 4.1	    02/26/23 00:20:59	    Page 20
Error Summary



*Warning* ..\LIBA.ASM(21) Argument needs type override
*Warning* ..\LIBA.ASM(26) Argument needs type override
