Turbo Assembler	 Version 4.1	    03/03/23 09:48:18	    Page 1
temp.asm



      1				     .286				     ; so shr(4) do not	takes 4	commands
      2	0000			     .model tiny
      3
      4	0000			     .data
      5	0000  0000			 status: dw 0			     ; whether on or off
      6
      7	0002			     .code
      8				     ;
      9				     org 100h
     10
     11				     locals @@
     12
     13	0100			     Start:	 ; KEYBOARD SETUP ;
     14	0100  FA				 cli
     15	0101  33 DB				 xor bx, bx
     16	0103  8E C3				 mov es, bx
     17	0105  BB 0024				 mov bx, 9 * 4
     18
     19	0108  26: 8B 07				 mov ax, es:[bx]
     20	010B  A3 0193r				 mov [oldIntAd], ax
     21	010E  26: 8B 47	02			 mov ax, es:[bx	+ 2]
     22	0112  A3 0195r				 mov [oldIntSeg], ax		 ; saving all data about old interruption
     23
     24	0115  26: C7 07	014Fr			 mov es:[bx], offset NewInt
     25	011A  8C C8				 mov ax, cs
     26	011C  26: 89 47	02			 mov es:[bx + 2], ax
     27	0120  FB				 sti				 ; setting our 09h interruption
     28
     29						 ; CHRONOMETER SETUP ;
     30	0121  FA				 cli
     31	0122  33 DB				 xor bx, bx
     32	0124  8E C3				 mov es, bx
     33	0126  BB 0020				 mov bx, 8 * 4
     34
     35	0129  26: 8B 07				 mov ax, es:[bx]
     36	012C  A3 01BEr				 mov [oldIntAd08], ax
     37	012F  26: 8B 47	02			 mov ax, es:[bx	+ 2]
     38	0133  A3 01C0r				 mov [oldIntSeg08], ax		   ; saving all	data about old interruption
     39
     40	0136  26: C7 07	0198r			 mov es:[bx], offset NewInt08h
     41	013B  8C C8				 mov ax, cs
     42	013D  26: 89 47	02			 mov es:[bx + 2], ax
     43	0141  FB				 sti				 ; setting our 08h interruption
     44
     45						 ; SAVING PROGRAM IN MEMORY ;
     46	0142  B8 3100				 mov ax, 3100h			 ; code	for exiting program leaving it in memory
     47	0145  BA 23ADr				 mov dx, offset	ProgEnd		 ; amount of memory to keep resident
     48	0148  C1 EA 04				 shr dx, 4			 ; dx /= 16 (as	paragraph == 16	byte)
     49	014B  42				 inc dx				 ; trunc(dx)
     50	014C  CD 21				 int 21h
     51
     52						 ; call	VidToArr
     53						 ; call	ArrToVid
     54
     55	014E  C3				 ret
     56
     57				     ;------------------------------------------------------------------------------------
Turbo Assembler	 Version 4.1	    03/03/23 09:48:18	    Page 2
temp.asm



     58	014F			     NewInt	 proc
     59	014F  50 53 51 52 56 57	55+		 push ax bx cx dx si di	bp sp ds es ss ; saving	registers
     60	      54 1E 06 16
     61
     62	015A  E8 0066				 call CodeFromPort
     63	015D  80 F9 1D				 cmp cl, 1Dh			 ; ctrl
     64	0160  74 03				 je @@OnOff
     65	0162  EB 22 90				 jmp @@Exit			 ; if ctrl pressed read	next
     66
     67	0165  BF 0000r		     @@OnOff:	 lea di, cs:status
     68	0168  2E: 8A 0D				 mov cl, cs:[di]		 ; di =	status
     69
     70	016B  80 F9 00				 cmp cl, 00h			 ; if isOff: switchOn
     71	016E  74 0B				 je @@SwOn			 ; else: SwitchOff
     72
     73	0170  B1 00		     @@SwOff:	 mov cl, 00h
     74	0172  2E: 88 0D				 mov cs:[di], cl		 ; set status =	0
     75
     76	0175  E8 1FC0				 call ArrToVid
     77
     78	0178  EB 0C 90				 jmp @@Exit
     79
     80	017B  B1 01		     @@SwOn:	 mov cl, 01h
     81	017D  2E: 88 0D				 mov cs:[di], cl		 ; set status =	1
     82
     83	0180  E8 1F93				 call VidToArr
     84
     85	0183  EB 01 90				 jmp @@Exit
     86
     87
     88	0186  17 07 1F 5C 5D 5F	5E+  @@Exit:	 pop ss	es ds sp bp di si dx cx	bx ax  ; register back
     89	      5A 59 5B 58
     90
     91	0191  9C				 pushf				 ; putting flags to stack for int call immitation
     92	0192  9A				 db 09ah			 ; call	far
     93	0193  0000		     oldIntAd	 dw 0
     94	0195  0000		     oldIntSeg	 dw 0
     95
     96	0197  CF				 iret				 ; return from interruption
     97										 ; (iret does popf automatically)
     98	0198					 endp
     99				     ;------------------------------------------------------------------------------------
    100				     ;------------------------------------------------------------------------------------
    101	0198			     NewInt08h	     proc
    102
    103	0198  50 53 51 52 56 57	55+		     push ax bx	cx dx si di bp sp ds es	ss
    104	      54 1E 06 16
    105
    106	01A3  BF 0000r				     lea di, cs:status
    107	01A6  2E: 8A 0D				     mov cl, cs:[di]		     ; di = status
    108	01A9  80 F9 00				     cmp cl, 00h
    109	01AC  74 03				     je	@@Exit
    110
    111	01AE  E8 1FA9				     call DisplayRegs
    112
    113	01B1  17 07 1F 5C 5D 5F	5E+  @@Exit:	     pop ss es ds sp bp	di si dx cx bx ax  ; register back
    114	      5A 59 5B 58
Turbo Assembler	 Version 4.1	    03/03/23 09:48:18	    Page 3
temp.asm



    115
    116	01BC  9C				     pushf			     ; putting flags to	stack for int call immitation
    117	01BD  9A				     db	09ah			     ; call far
    118	01BE  0000		     oldIntAd08	     dw	0
    119	01C0  0000		     oldIntSeg08     dw	0
    120
    121	01C2  CF				     iret			     ; return from interruption
    122										     ; (iret does popf automatically)
    123	01C3					     endp
    124				     ;------------------------------------------------------------------------------------
    125
    126				     ;------------------------------------------------------------------------------
    127				     ; Gets scan code from 61st	port and puts it to register
    128				     ;------------------------------------------------------------------------------
    129				     ; Entry:	     None
    130				     ; Exit:	     CL	- read symbol
    131				     ; Expects:	     None
    132				     ; Destroys:     AL, CL
    133				     ;------------------------------------------------------------------------------
    134	01C3			     CodeFromPort    proc
    135	01C3  E4 60				     in	al, 60h
    136	01C5  8A C8				     mov cl, al
    137
    138	01C7  E4 61				     in	al, 61h			     ; get data	from 61	port
    139
    140	01C9  0C 80				     or	al, 80h			     ; setting first bit = 1
    141	01CB  E6 61				     out 61h, al
    142	01CD  24 7F				     and al, not 80h
    143	01CF  E6 61				     out 61h, al		     ; blinking
    144
    145	01D1  B0 20				     mov al, 20h
    146	01D3  E6 20				     out 20h, al		     ; sending verification to int controller
    147
    148	01D5  C3				     ret
    149	01D6					     endp
    150
    151
    152	01D6  07D0*(0000)	     video: dw 80d * 25d dup(0)
    153	1176  07D0*(0000)	     image: dw 80d * 25d dup(0)
    154
    155				     ;-------------------------------------------------------------------------------
    156				     ; Saves videomem to array
    157				     ;-------------------------------------------------------------------------------
    158				     ; Entry:	     None
    159				     ; Exit:	     video
    160				     ; Expects:	     ES	-> videomem (0b800h)
    161				     ; Destroys:     AX, BX, CX, DX, DI
    162				     ;-------------------------------------------------------------------------------
    163	2116			     VidToArr	     proc
    164
    165	2116  BB B800				     mov bx, 0b800h
    166	2119  8E C3				     mov es, bx
    167
    168	211B  33 DB				     xor bx, bx			     ; bx = 0
    169	211D  33 C0				     xor ax, ax			     ; i = 0
    170	211F  BF 01D6r				     lea di, video
    171
Turbo Assembler	 Version 4.1	    03/03/23 09:48:18	    Page 4
temp.asm



    172	2122  40		     @@ReadRow:	     inc ax
    173	2123  B9 00A0				     mov cx, 160d		      ;	j = 160
    174
    175	2126  26: 8B 17		     @@ReadLine:     mov dx, es:[bx]
    176	2129  2E: 89 15				     mov cs:[di], dx		     ; put val from arr	to vidmem
    177	212C  43				     inc bx
    178	212D  43				     inc bx			     ; bx += 2
    179
    180	212E  47				     inc di
    181	212F  47				     inc di			     ; di += 2
    182
    183	2130  E2 F4				     loop @@ReadLine
    184
    185						     ; add bx, 160d - 14d * 2d
    186
    187	2132  3D 0019				     cmp ax, 25d
    188	2135  75 EB				     jne @@ReadRow
    189
    190	2137  C3				     ret
    191	2138					     endp
    192
    193				     ;-------------------------------------------------------------------------------
    194				     ; Build videomem from array
    195				     ;-------------------------------------------------------------------------------
    196				     ; Entry:	     video
    197				     ; Exit:	     videomem
    198				     ; Expects:	     ES	-> videomem (0b800h)
    199				     ; Destroys:
    200				     ;-------------------------------------------------------------------------------
    201	2138			     ArrToVid	     proc
    202
    203	2138  BB B800				     mov bx, 0b800h
    204	213B  8E C3				     mov es, bx
    205
    206	213D  33 DB				     xor bx, bx			     ; bx = 0
    207	213F  33 C0				     xor ax, ax			     ; ax = 0
    208	2141  BF 01D6r				     lea di, video
    209
    210	2144  40		     @@ReadRow:	     inc ax
    211	2145  B9 00A0				     mov cx, 160d		     ; j = 160
    212
    213	2148  2E: 8B 15		     @@ReadLine:     mov dx, cs:[di]
    214	214B  26: 89 17				     mov es:[bx], dx
    215	214E  43				     inc bx
    216	214F  43				     inc bx
    217
    218	2150  47				     inc di
    219	2151  47				     inc di
    220
    221	2152  E2 F4				     loop @@ReadLine
    222
    223						     ; add bx, 160d - 14d * 2d
    224
    225	2154  3D 0019				     cmp ax, 25d
    226	2157  75 EB				     jne @@ReadRow
    227
    228	2159  C3				     ret
Turbo Assembler	 Version 4.1	    03/03/23 09:48:18	    Page 5
temp.asm



    229	215A					     endp
    230
    231				     ;-------------------------------------------------------------------------------
    232				     ; Videomem	to array
    233				     ;------------------------------------------------------------------------------
    234				     ; Entry:	     None
    235				     ; Exit:	     CL	- read symbol
    236				     ; Expects:	     None
    237				     ; Destroys:     AL, CL
    238				     ;------------------------------------------------------------------------------
    239				     ShowReg macro name, value
    240					     mov cx, name
    241					     mov di, bx
    242					     mov ah, 05h
    243					     mov al, ch
    244					     stosw
    245					     mov al, cl
    246					     stosw
    247
    248					     add bx, 12d
    249
    250
    251					     mov si, [value]
    252					     call ToHex
    253					     add bx, 160d - 10d	* 2d
    254
    255					     endm
    256
    257				     ;-------------------------------------------------------------------------------
    258				     ; Draws rectangle and shows all registers in screen
    259				     ;-------------------------------------------------------------------------------
    260				     ; Entry:	     None
    261				     ; Exit:	     None
    262				     ; Expects:	     None
    263				     ; Destroys:     BX, ES
    264				     ;-------------------------------------------------------------------------------
    265	215A			     DisplayRegs     proc
    266	215A  55				     push bp		     ; saving old base pointer
    267	215B  57				     push di		     ; status var address
    268	215C  8B EC				     mov bp, sp
    269
    270	215E  8C CB				     mov bx, cs
    271	2160  8E C3				     mov es, bx
    272	2162  BB 1176r				     mov bx, offset image	    ; point to left higher point
    273
    274						     ; DRAWING FRAME ;
    275	2165  BF 2295r				     mov di, offset symbols
    276	2168  B9 000E				     mov cx, 14d
    277	216B  BA 000D				     mov dx, 13d
    278	216E  E8 018C				     call DrawRect
    279
    280	2171  BB 00A4				     mov bx, 160d + 4d
    281
    282						     ShowReg "AX" bp+26
1   283	2174  B9 4158			     mov cx, "AX"
1   284	2177  8B FB			     mov di, bx
1   285	2179  B4 05			     mov ah, 05h
Turbo Assembler	 Version 4.1	    03/03/23 09:48:18	    Page 6
temp.asm



1   286	217B  8A C5			     mov al, ch
1   287	217D  AB			     stosw
1   288	217E  8A C1			     mov al, cl
1   289	2180  AB			     stosw
1   290
1   291	2181  83 C3 0C			     add bx, 12d
1   292
1   293
1   294	2184  8B 76 1A			     mov si, [bp+26]
1   295	2187  E8 011D			     call ToHex
1   296	218A  81 C3 008C		     add bx, 160d - 10d	* 2d
1   297
    298						     ShowReg "BX" bp+24
1   299	218E  B9 4258			     mov cx, "BX"
1   300	2191  8B FB			     mov di, bx
1   301	2193  B4 05			     mov ah, 05h
1   302	2195  8A C5			     mov al, ch
1   303	2197  AB			     stosw
1   304	2198  8A C1			     mov al, cl
1   305	219A  AB			     stosw
1   306
1   307	219B  83 C3 0C			     add bx, 12d
1   308
1   309
1   310	219E  8B 76 18			     mov si, [bp+24]
1   311	21A1  E8 0103			     call ToHex
1   312	21A4  81 C3 008C		     add bx, 160d - 10d	* 2d
1   313
    314						     ShowReg "CX" bp+22
1   315	21A8  B9 4358			     mov cx, "CX"
1   316	21AB  8B FB			     mov di, bx
1   317	21AD  B4 05			     mov ah, 05h
1   318	21AF  8A C5			     mov al, ch
1   319	21B1  AB			     stosw
1   320	21B2  8A C1			     mov al, cl
1   321	21B4  AB			     stosw
1   322
1   323	21B5  83 C3 0C			     add bx, 12d
1   324
1   325
1   326	21B8  8B 76 16			     mov si, [bp+22]
1   327	21BB  E8 00E9			     call ToHex
1   328	21BE  81 C3 008C		     add bx, 160d - 10d	* 2d
1   329
    330						     ShowReg "DX" bp+20
1   331	21C2  B9 4458			     mov cx, "DX"
1   332	21C5  8B FB			     mov di, bx
1   333	21C7  B4 05			     mov ah, 05h
1   334	21C9  8A C5			     mov al, ch
1   335	21CB  AB			     stosw
1   336	21CC  8A C1			     mov al, cl
1   337	21CE  AB			     stosw
1   338
1   339	21CF  83 C3 0C			     add bx, 12d
1   340
1   341
1   342	21D2  8B 76 14			     mov si, [bp+20]
Turbo Assembler	 Version 4.1	    03/03/23 09:48:18	    Page 7
temp.asm



1   343	21D5  E8 00CF			     call ToHex
1   344	21D8  81 C3 008C		     add bx, 160d - 10d	* 2d
1   345
    346						     ShowReg "SI" bp+18
1   347	21DC  B9 5349			     mov cx, "SI"
1   348	21DF  8B FB			     mov di, bx
1   349	21E1  B4 05			     mov ah, 05h
1   350	21E3  8A C5			     mov al, ch
1   351	21E5  AB			     stosw
1   352	21E6  8A C1			     mov al, cl
1   353	21E8  AB			     stosw
1   354
1   355	21E9  83 C3 0C			     add bx, 12d
1   356
1   357
1   358	21EC  8B 76 12			     mov si, [bp+18]
1   359	21EF  E8 00B5			     call ToHex
1   360	21F2  81 C3 008C		     add bx, 160d - 10d	* 2d
1   361
    362						     ShowReg "DI" bp+16
1   363	21F6  B9 4449			     mov cx, "DI"
1   364	21F9  8B FB			     mov di, bx
1   365	21FB  B4 05			     mov ah, 05h
1   366	21FD  8A C5			     mov al, ch
1   367	21FF  AB			     stosw
1   368	2200  8A C1			     mov al, cl
1   369	2202  AB			     stosw
1   370
1   371	2203  83 C3 0C			     add bx, 12d
1   372
1   373
1   374	2206  8B 76 10			     mov si, [bp+16]
1   375	2209  E8 009B			     call ToHex
1   376	220C  81 C3 008C		     add bx, 160d - 10d	* 2d
1   377
    378						     ShowReg "BP" bp+14
1   379	2210  B9 4250			     mov cx, "BP"
1   380	2213  8B FB			     mov di, bx
1   381	2215  B4 05			     mov ah, 05h
1   382	2217  8A C5			     mov al, ch
1   383	2219  AB			     stosw
1   384	221A  8A C1			     mov al, cl
1   385	221C  AB			     stosw
1   386
1   387	221D  83 C3 0C			     add bx, 12d
1   388
1   389
1   390	2220  8B 76 0E			     mov si, [bp+14]
1   391	2223  E8 0081			     call ToHex
1   392	2226  81 C3 008C		     add bx, 160d - 10d	* 2d
1   393
    394						     ShowReg "SP" bp+12
1   395	222A  B9 5350			     mov cx, "SP"
1   396	222D  8B FB			     mov di, bx
1   397	222F  B4 05			     mov ah, 05h
1   398	2231  8A C5			     mov al, ch
1   399	2233  AB			     stosw
Turbo Assembler	 Version 4.1	    03/03/23 09:48:18	    Page 8
temp.asm



1   400	2234  8A C1			     mov al, cl
1   401	2236  AB			     stosw
1   402
1   403	2237  83 C3 0C			     add bx, 12d
1   404
1   405
1   406	223A  8B 76 0C			     mov si, [bp+12]
1   407	223D  E8 0067			     call ToHex
1   408	2240  81 C3 008C		     add bx, 160d - 10d	* 2d
1   409
    410						     ShowReg "DS" bp+10
1   411	2244  B9 4453			     mov cx, "DS"
1   412	2247  8B FB			     mov di, bx
1   413	2249  B4 05			     mov ah, 05h
1   414	224B  8A C5			     mov al, ch
1   415	224D  AB			     stosw
1   416	224E  8A C1			     mov al, cl
1   417	2250  AB			     stosw
1   418
1   419	2251  83 C3 0C			     add bx, 12d
1   420
1   421
1   422	2254  8B 76 0A			     mov si, [bp+10]
1   423	2257  E8 004D			     call ToHex
1   424	225A  81 C3 008C		     add bx, 160d - 10d	* 2d
1   425
    426						     ShowReg "ES" bp+8
1   427	225E  B9 4553			     mov cx, "ES"
1   428	2261  8B FB			     mov di, bx
1   429	2263  B4 05			     mov ah, 05h
1   430	2265  8A C5			     mov al, ch
1   431	2267  AB			     stosw
1   432	2268  8A C1			     mov al, cl
1   433	226A  AB			     stosw
1   434
1   435	226B  83 C3 0C			     add bx, 12d
1   436
1   437
1   438	226E  8B 76 08			     mov si, [bp+8]
1   439	2271  E8 0033			     call ToHex
1   440	2274  81 C3 008C		     add bx, 160d - 10d	* 2d
1   441
    442						     ShowReg "SS" bp+6
1   443	2278  B9 5353			     mov cx, "SS"
1   444	227B  8B FB			     mov di, bx
1   445	227D  B4 05			     mov ah, 05h
1   446	227F  8A C5			     mov al, ch
1   447	2281  AB			     stosw
1   448	2282  8A C1			     mov al, cl
1   449	2284  AB			     stosw
1   450
1   451	2285  83 C3 0C			     add bx, 12d
1   452
1   453
1   454	2288  8B 76 06			     mov si, [bp+6]
1   455	228B  E8 0019			     call ToHex
1   456	228E  81 C3 008C		     add bx, 160d - 10d	* 2d
Turbo Assembler	 Version 4.1	    03/03/23 09:48:18	    Page 9
temp.asm



1   457
    458
    459	2292  5F				     pop di
    460	2293  5D				     pop bp
    461	2294  C3				     ret
    462	2295					     endp
    463
    464				     include SMLIB.ASM
1   465
1   466	2295  08*(042A)	0020	     symbols: dw 8d dup(042Ah),	0020h
1   467
1   468				     ;-----------------------------------------------------------
1   469				     ; Print hex of value
1   470				     ;-----------------------------------------------------------
1   471				     ; Entry:	     SI	= value	to convert to
1   472				     ;			     BX	= coordinates to print in cmd
1   473				     ; Exit:	     None
1   474				     ; Expects:	     ES	-> videomem (b800h)
1   475				     ; Destroys:     AX, BX, CX, DX, DI, BP, SP
1   476				     ;----------------------------------------------------------
1   477	22A7			     ToHex   proc
1   478
1   479	22A7  BA 8000						     mov dx, 8000h	     ; first byte is 1 others are 0
1   480	22AA  B9 0004						     mov cx, 0004h	     ; cx = 0
1   481	22AD  BF 0000						     mov di, 0000h
1   482
1   483	22B0			     @@ReadBytes:
1   484	22B0  FE C5						     inc ch			     ; ch++ (byte counter in 4th)
1   485	22B2  80 FD 05						     cmp ch, 05h		     ; if ch ==	5: exit	else:	    +
    486				     continue
1   487	22B5  74 45						     je	@@Exit
1   488	22B7  EB 01 90						     jmp @@Proceed4bit
1   489
1   490	22BA			     @@Proceed4bit:
1   491	22BA  8B C6						     mov ax, si			     ; ax = si (given value)
1   492	22BC  23 C2						     and ax, dx			     ; ax && ax
1   493
1   494	22BE  3D 0000						     cmp ax, 00h		     ; if ax ==	0: SkipMul()
1   495	22C1  74 0E						     je	@@SkipMul
1   496
1   497	22C3  B0 01						     mov al, 01h		     ; al = 1 (value to	add)
1   498	22C5  B4 00						     mov ah, 00h		     ; ah = 0 (needed not to brake  +
    499				     ax)
1   500	22C7  80 E9 01						     sub cl, 1			     ; cl-- (bit num)
1   501	22CA  D2 E0						     shl al, cl			     ; al = 2^cl
1   502	22CC  80 C1 01						     add cl, 1			     ; cl++
1   503	22CF  03 F8						     add di, ax			     ; di += ax	(di - result to	    +
    504				     print)
1   505
1   506	22D1			     @@SkipMul:
1   507	22D1  80 E9 01						     sub cl, 1			     ; cl--
1   508	22D4  D1 EA						     shr dx, 1			     ; dx /= 2
1   509
1   510	22D6  80 F9 00						     cmp cl, 00h
1   511	22D9  74 02						     je	@@PrintSymbol
1   512	22DB  EB DD						     jmp @@Proceed4bit	     ; if cl ==	0: Print else continue	    +
    513				     reading byte
Turbo Assembler	 Version 4.1	    03/03/23 09:48:18	    Page 10
temp.asm



1   514
1   515	22DD			     @@PrintSymbol:
1   516	22DD  8B C7						     mov ax, di			     ; ax = di
1   517	22DF  B4 05						     mov ah, 05h		     ; ah = 05h	(COLOR)
1   518
1   519	22E1  3C 0A						     cmp al, 10d		     ; if al >=	10: PrintAsLetter
1   520	22E3  73 05						     jae @@LetterPrint
1   521
1   522	22E5  04 30						     add al, 30h		     ; else: al	+= 30h -> print	as  +
    523				     ASCII
1   524	22E7  EB 06 90						     jmp @@ContinuePrint
1   525
1   526	22EA			     @@LetterPrint:
1   527	22EA  04 37						     add al, 37h		     ; al += 37	-> add letter as    +
    528				     ASCII
1   529	22EC  EB 01 90						     jmp @@ContinuePrint
1   530
1   531	22EF			     @@ContinuePrint:
1   532	22EF  26: 89 07						     mov es:[bx], ax	     ; put ax to videomem
1   533	22F2  83 C3 02						     add bx, 2			     ; bx += 2
1   534	22F5  BF 0000						     mov di, 00h		     ; di = 0
1   535	22F8  B1 04						     mov cl, 04h		     ; cl = 4 (byte count)
1   536	22FA  EB B4						     jmp @@ReadBytes
1   537
1   538	22FC			     @@Exit:
1   539	22FC  C3						     ret
1   540	22FD							     endp
1   541
1   542
1   543				     ;-------------------------------------------------------------
1   544				     ; Draws rectangle on screen with given borders
1   545				     ;-------------------------------------------------------------
1   546				     ; Entry:	     DI	- pointer to array with	symbols
1   547				     ;			     BX	- coordinates where to print
1   548				     ;			     CX	- horizontal size
1   549				     ;			     DX	- vertical size
1   550				     ; Exit:	     None
1   551				     ; Expects:	     ES	-> videomem (0b800h)
1   552				     ; Destroys:     AX, BX, CX, SI
1   553				     ;-------------------------------------------------------------
1   554	22FD			     DrawRect		     proc
1   555	22FD  55						     push bp
1   556	22FE  BF 2295r				     lea di, symbols
1   557
1   558	2301  83 E9 02						     sub cx, 2
1   559	2304  8B F2						     mov si, dx				     ; i = dx
1   560	2306  EB 0C 90						     jmp @@MainCycle
1   561
1   562	2309  83 EE 01		     @@IterateI:	     sub si, 1				     ; i--
1   563
1   564	230C  2B D9						     sub bx, cx				     ; start vertically
1   565	230E  2B D9						     sub bx, cx
1   566	2310  81 C3 00A0					     add bx, 160d		     ; new line
1   567
1   568	2314  8B C1		     @@MainCycle:    mov ax, cx				     ; j = cx
1   569
1   570	2316  83 EB 02						     sub bx, 2				     ; bx -= 2 (then i += 2 +
Turbo Assembler	 Version 4.1	    03/03/23 09:48:18	    Page 11
temp.asm



    571				     to	print)
1   572
1   573	2319  83 FE 00						     cmp si, 00h
1   574	231C  75 40						     jne @@DrawV
1   575
1   576	231E  83 C3 02		     @@ContinueMain: add bx, 2				     ; bx += 2 (watch previous comment)
1   577	2321  83 FE 00						     cmp si, 00h
1   578	2324  74 03						     je	@@CExit				     ; if i == 0: exit(0)
1   579	2326  EB 03 90						     jmp @@SecondCycle
1   580
1   581	2329  5D		     @@CExit:		     pop bp
1   582	232A  C3						     ret
1   583
1   584	232B  BD 0020		     @@SecondCycle:  mov bp, 0020h
1   585	232E  26: 89 2F						     mov es:[bx], bp
1   586
1   587	2331  3D 0000						     cmp ax, 00h
1   588	2334  74 4E						     je	@@DrawRightV		     ; print left border (WORKS!)
1   589
1   590	2336  3B F2						     cmp si, dx
1   591	2338  74 12						     je	@@DrawH				     ; draw highest border
1   592
1   593	233A  83 FE 01						     cmp si, 01h
1   594	233D  74 16						     je	@@DrawLower		     ; draw lowest border
1   595
1   596	233F			     @@ContinueSecond:
1   597	233F  3D 0000						     cmp ax, 00h
1   598	2342  74 C5						     je	@@IterateI		     ; if j == 0: i++
1   599
1   600	2344  2D 0001						     sub ax, 1				     ; else: j--
1   601	2347  83 C3 02						     add bx, 2				     ; bx += 2
1   602	234A  EB DF						     jmp @@SecondCycle
1   603
1   604	234C  2E: 8B 6D	02	     @@DrawH:		     mov bp, cs:[di + 2d]
1   605	2350  26: 89 2F						     mov es:[bx], bp
1   606	2353  EB EA						     jmp @@ContinueSecond
1   607
1   608	2355  2E: 8B 6D	06	     @@DrawLower:    mov bp, cs:[di + 6d]
1   609	2359  26: 89 2F						     mov es:[bx], bp
1   610	235C  EB E1						     jmp @@ContinueSecond
1   611
1   612	235E  83 FE 01		     @@DrawV:		     cmp si, 01h
1   613	2361  74 0F						     je	@@LowLeft
1   614	2363  3B F2						     cmp si, dx
1   615	2365  74 03						     je	@@HighLeft
1   616	2367  EB 12 90						     jmp @@Left				 ; TODO: all labels !!!!! ->+
    617				     functions
1   618
1   619	236A  2E: 8B 2D		     @@HighLeft:	     mov bp, cs:[di]
1   620	236D  26: 89 2F						     mov es:[bx], bp
1   621	2370  EB AC						     jmp @@ContinueMain
1   622
1   623	2372  2E: 8B 6D	06	     @@LowLeft:		     mov bp, cs:[di + 6d]
1   624	2376  26: 89 2F						     mov es:[bx], bp
1   625	2379  EB A3						     jmp @@ContinueMain
1   626
1   627	237B  2E: 8B 6D	06	     @@Left:		     mov bp, cs:[di + 6d]
Turbo Assembler	 Version 4.1	    03/03/23 09:48:18	    Page 12
temp.asm



1   628	237F  26: 89 2F						     mov es:[bx], bp
1   629	2382  EB 9A						     jmp @@ContinueMain
1   630
1   631	2384  83 FE 01		     @@DrawRightV:   cmp si, 01h
1   632	2387  74 07						     je	@@LowRight
1   633	2389  3B F2						     cmp si, dx
1   634	238B  74 0C						     je	@@HighRight
1   635	238D  EB 13 90						     jmp @@Right
1   636
1   637	2390  2E: 8B 6D	04	     @@LowRight:	     mov bp, cs:[di + 4d]
1   638	2394  26: 89 2F						     mov es:[bx], bp
1   639	2397  EB A6						     jmp @@ContinueSecond
1   640
1   641	2399  2E: 8B 6D	02	     @@HighRight:    mov bp, cs:[di + 2d]
1   642	239D  26: 89 2F						     mov es:[bx], bp
1   643	23A0  EB 9D						     jmp @@ContinueSecond
1   644
1   645	23A2  2E: 8B 6D	02	     @@Right:		     mov bp, cs:[di + 2d]
1   646	23A6  26: 89 2F						     mov es:[bx], bp
1   647	23A9  EB 94						     jmp @@ContinueSecond	     ; разные функции  +
    648				     для границ
1   649
1   650	23AB  5D		     @@Exit:		     pop bp
1   651	23AC  C3						     ret
1   652	23AD							     endp
1   653
    654
    655	23AD			     ProgEnd:
    656				     end	 Start
Turbo Assembler	 Version 4.1	    03/03/23 09:48:18	    Page 13
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "03/03/23"
??FILENAME			  Text	 "temp	  "
??TIME				  Text	 "09:48:18"
??VERSION			  Number 040A
@32BIT				  Text	 0
@@CEXIT				  Near	 DGROUP:2329
@@CONTINUEMAIN			  Near	 DGROUP:231E
@@CONTINUEPRINT			  Near	 DGROUP:22EF
@@CONTINUESECOND		  Near	 DGROUP:233F
@@DRAWH				  Near	 DGROUP:234C
@@DRAWLOWER			  Near	 DGROUP:2355
@@DRAWRIGHTV			  Near	 DGROUP:2384
@@DRAWV				  Near	 DGROUP:235E
@@EXIT				  Near	 DGROUP:0186
@@EXIT				  Near	 DGROUP:01B1
@@EXIT				  Near	 DGROUP:22FC
@@EXIT				  Near	 DGROUP:23AB
@@HIGHLEFT			  Near	 DGROUP:236A
@@HIGHRIGHT			  Near	 DGROUP:2399
@@ITERATEI			  Near	 DGROUP:2309
@@LEFT				  Near	 DGROUP:237B
@@LETTERPRINT			  Near	 DGROUP:22EA
@@LOWLEFT			  Near	 DGROUP:2372
@@LOWRIGHT			  Near	 DGROUP:2390
@@MAINCYCLE			  Near	 DGROUP:2314
@@ONOFF				  Near	 DGROUP:0165
@@PRINTSYMBOL			  Near	 DGROUP:22DD
@@PROCEED4BIT			  Near	 DGROUP:22BA
@@READBYTES			  Near	 DGROUP:22B0
@@READLINE			  Near	 DGROUP:2126
@@READLINE			  Near	 DGROUP:2148
@@READROW			  Near	 DGROUP:2122
@@READROW			  Near	 DGROUP:2144
@@RIGHT				  Near	 DGROUP:23A2
@@SECONDCYCLE			  Near	 DGROUP:232B
@@SKIPMUL			  Near	 DGROUP:22D1
@@SWOFF				  Near	 DGROUP:0170
@@SWON				  Near	 DGROUP:017B
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0707H
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 TEMP
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
ARRTOVID			  Near	 DGROUP:2138
CODEFROMPORT			  Near	 DGROUP:01C3
DISPLAYREGS			  Near	 DGROUP:215A
DRAWRECT			  Near	 DGROUP:22FD
IMAGE				  Near	 DGROUP:1176
Turbo Assembler	 Version 4.1	    03/03/23 09:48:18	    Page 14
Symbol Table



NEWINT				  Near	 DGROUP:014F
NEWINT08H			  Near	 DGROUP:0198
OLDINTAD			  Word	 DGROUP:0193
OLDINTAD08			  Word	 DGROUP:01BE
OLDINTSEG			  Word	 DGROUP:0195
OLDINTSEG08			  Word	 DGROUP:01C0
PROGEND				  Near	 DGROUP:23AD
START				  Near	 DGROUP:0100
STATUS				  Near	 DGROUP:0000
SYMBOLS				  Near	 DGROUP:2295
TOHEX				  Near	 DGROUP:22A7
VIDEO				  Near	 DGROUP:01D6
VIDTOARR			  Near	 DGROUP:2116

Macro Name

SHOWREG

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0002 Word	  Public  DATA
  _TEXT				  16  23AD Word	  Public  CODE
