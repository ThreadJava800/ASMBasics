Turbo Assembler	 Version 4.1	    02/28/23 24:03:02	    Page 1
regview.asm



      1				     .286				     ; so shr(4) do not	takes 4	commands
      2	0000			     .model tiny
      3
      4	0000			     .data
      5	0000  0000			 status: dw 0			     ; whether on or off
      6
      7	0002			     .code
      8
      9				     org 100h
     10
     11				     locals @@
     12
     13	0100  FA		     Start:	 cli
     14	0101  33 DB				 xor bx, bx
     15	0103  8E C3				 mov es, bx
     16	0105  BB 0024				 mov bx, 9 * 4
     17
     18	0108  26: 8B 07				 mov ax, es:[bx]
     19	010B  A3 018Dr				 mov [oldIntAd], ax
     20	010E  26: 8B 47	02			 mov ax, es:[bx	+ 2]
     21	0112  A3 018Fr				 mov [oldIntSeg], ax		 ; saving all data about old interruption
     22
     23	0115  26: C7 07	012Er			 mov es:[bx], offset NewInt
     24	011A  8C C8				 mov ax, cs
     25	011C  26: 89 47	02			 mov es:[bx + 2], ax
     26	0120  FB				 sti
     27
     28	0121  B8 3100				 mov ax, 3100h			 ; code	for exiting program leaving it in memory
     29	0124  BA 01A5r				 mov dx, offset	ProgEnd		 ; amount of memory to keep resident
     30	0127  C1 EA 04				 shr dx, 4			 ; dx /= 16 (as	paragraph == 16	byte)
     31	012A  42				 inc dx				 ; trunc(dx)
     32	012B  CD 21				 int 21h
     33
     34	012D  C3				 ret
     35
     36	012E			     NewInt	 proc
     37	012E  50 53 51 57 06			 push ax bx cx di es		 ; saving registers that will be killed
     38
     39	0133  E8 005C				 call CodeFromPort
     40	0136  80 F9 1D				 cmp cl, 1Dh			 ; ctrl
     41	0139  74 03				 je @@OnOff
     42	013B  EB 3A 90				 jmp @@Else			 ; if ctrl pressed read	next
     43
     44	013E  BF 0000r		     @@OnOff:	 lea di, status
     45	0141  2E: 8A 0D				 mov cl, cs:[di]		 ; di =	status
     46
     47	0144  80 F9 00				 cmp cl, 00h			 ; if isOff: switchOn
     48	0147  74 17				 je @@SwOn			 ; else: SwitchOff
     49
     50	0149  BB B800		     @@SwOff:	 mov bx, 0b800h
     51	014C  8E C3				 mov es, bx
     52	014E  BB 0370				 mov bx, 160d *	5d + 80d	 ; setting position on screen
     53
     54	0151  B4 4E				 mov ah, 4eh			 ; setting color for print
     55	0153  B0 21				 mov al, 21h			 ; '!'
     56	0155  26: 89 07				 mov es:[bx], ax
     57
Turbo Assembler	 Version 4.1	    02/28/23 24:03:02	    Page 2
regview.asm



     58	0158  B1 00				 mov cl, 00h
     59	015A  2E: 88 0D				 mov cs:[di], cl		 ; set status =	1
     60
     61	015D  EB 27 90				 jmp @@Exit
     62
     63	0160  BB B800		     @@SwOn:	 mov bx, 0b800h
     64	0163  8E C3				 mov es, bx
     65	0165  BB 0370				 mov bx, 160d *	5d + 80d	 ; setting position on screen
     66
     67	0168  B4 4E				 mov ah, 4eh			 ; setting color for print
     68	016A  B0 2B				 mov al, 2Bh			 ; '+'
     69	016C  26: 89 07				 mov es:[bx], ax
     70
     71	016F  B1 01				 mov cl, 01h
     72	0171  2E: 88 0D				 mov cs:[di], cl		 ; set status =	1
     73
     74	0174  EB 10 90				 jmp @@Exit
     75
     76
     77	0177  BB B800		     @@Else:	 mov bx, 0b800h
     78	017A  8E C3				 mov es, bx
     79	017C  BB 0370				 mov bx, 160d *	5d + 80d	 ; setting position on screen
     80
     81	017F  B4 4E				 mov ah, 4eh			 ; setting color for print
     82	0181  8A C1				 mov al, cl			; space
     83	0183  26: 89 07				 mov es:[bx], ax
     84
     85
     86	0186  07 5F 59 5B 58	     @@Exit:	 pop es	di cx bx ax
     87
     88	018B  9C				 pushf				 ; putting flags to stack for int call immitation
     89	018C  9A				 db 09ah			 ; call	far
     90	018D  0000		     oldIntAd	 dw 0
     91	018F  0000		     oldIntSeg	 dw 0
     92
     93	0191  CF				 iret				 ; return from interruption
     94										 ; (iret does popf automatically)
     95	0192					 endp
     96
     97
     98				     ;------------------------------------------------------------------------------
     99				     ; Gets scan code from 61st	port and puts it to register
    100				     ;------------------------------------------------------------------------------
    101				     ; Entry:	     None
    102				     ; Exit:	     CL	- read symbol
    103				     ; Expects:	     None
    104				     ; Destroys:     AL, CL
    105				     ;------------------------------------------------------------------------------
    106	0192			     CodeFromPort    proc
    107	0192  E4 60				     in	al, 60h
    108	0194  8A C8				     mov cl, al
    109
    110	0196  E4 61				     in	al, 61h			     ; get data	from 61	port
    111
    112	0198  0C 80				     or	al, 80h			     ; setting first bit = 1
    113	019A  E6 61				     out 61h, al
    114	019C  24 7F				     and al, not 80h
Turbo Assembler	 Version 4.1	    02/28/23 24:03:02	    Page 3
regview.asm



    115	019E  E6 61				     out 61h, al		     ; blinking
    116
    117	01A0  B0 20				     mov al, 20h
    118	01A2  E6 20				     out 20h, al		     ; sending verification to int controller
    119
    120	01A4  C3				     ret
    121	01A5					     endp
    122
    123	01A5			     ProgEnd:
    124				     end	 Start
Turbo Assembler	 Version 4.1	    02/28/23 24:03:02	    Page 4
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "02/28/23"
??FILENAME			  Text	 "regview "
??TIME				  Text	 "24:03:02"
??VERSION			  Number 040A
@32BIT				  Text	 0
@@ELSE				  Near	 DGROUP:0177
@@EXIT				  Near	 DGROUP:0186
@@ONOFF				  Near	 DGROUP:013E
@@SWOFF				  Near	 DGROUP:0149
@@SWON				  Near	 DGROUP:0160
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0707H
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 REGVIEW
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
CODEFROMPORT			  Near	 DGROUP:0192
NEWINT				  Near	 DGROUP:012E
OLDINTAD			  Word	 DGROUP:018D
OLDINTSEG			  Word	 DGROUP:018F
PROGEND				  Near	 DGROUP:01A5
START				  Near	 DGROUP:0100
STATUS				  Near	 DGROUP:0000

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0002 Word	  Public  DATA
  _TEXT				  16  01A5 Word	  Public  CODE
